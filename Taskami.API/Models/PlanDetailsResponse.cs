/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PlanDetailsResponse : IEquatable<PlanDetailsResponse>
    {
        /// <summary>
        /// Gets or Sets CurrentMemberCount
        /// </summary>
        [Required]
        [DataMember(Name="current_member_count", EmitDefaultValue=true)]
        public int CurrentMemberCount { get; set; }


        /// <summary>
        /// Gets or Sets CurrentPlan
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<CurrentPlanEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CurrentPlanEnum
        {
            
            /// <summary>
            /// Enum BusinessEnum for Business
            /// </summary>
            [EnumMember(Value = "Business")]
            BusinessEnum = 1,
            
            /// <summary>
            /// Enum StarterEnum for Starter
            /// </summary>
            [EnumMember(Value = "Starter")]
            StarterEnum = 2
        }

        /// <summary>
        /// Gets or Sets CurrentPlan
        /// </summary>
        [Required]
        [DataMember(Name="current_plan", EmitDefaultValue=true)]
        public CurrentPlanEnum CurrentPlan { get; set; }


        /// <summary>
        /// Gets or Sets CurrentPlanStatus
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<CurrentPlanStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CurrentPlanStatusEnum
        {
            
            /// <summary>
            /// Enum ActiveEnum for Active
            /// </summary>
            [EnumMember(Value = "Active")]
            ActiveEnum = 1,
            
            /// <summary>
            /// Enum DowngradedEnum for Downgraded
            /// </summary>
            [EnumMember(Value = "Downgraded")]
            DowngradedEnum = 2,
            
            /// <summary>
            /// Enum CancelledEnum for Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            CancelledEnum = 3,
            
            /// <summary>
            /// Enum NeverSubscribedEnum for NeverSubscribed
            /// </summary>
            [EnumMember(Value = "NeverSubscribed")]
            NeverSubscribedEnum = 4
        }

        /// <summary>
        /// Gets or Sets CurrentPlanStatus
        /// </summary>
        [Required]
        [DataMember(Name="current_plan_status", EmitDefaultValue=true)]
        public CurrentPlanStatusEnum CurrentPlanStatus { get; set; }

        /// <summary>
        /// Gets or Sets DowngradeAt
        /// </summary>
        [Required]
        [DataMember(Name="downgrade_at", EmitDefaultValue=true)]
        public string DowngradeAt { get; set; }

        /// <summary>
        /// Gets or Sets CurrentActiveProjects
        /// </summary>
        [Required]
        [DataMember(Name="current_active_projects", EmitDefaultValue=true)]
        public int CurrentActiveProjects { get; set; }

        /// <summary>
        /// Gets or Sets MaximumActiveProjects
        /// </summary>
        [Required]
        [DataMember(Name="maximum_active_projects", EmitDefaultValue=true)]
        public int MaximumActiveProjects { get; set; }

        /// <summary>
        /// Gets or Sets PriceList
        /// </summary>
        [Required]
        [DataMember(Name="price_list", EmitDefaultValue=false)]
        public List<FormattedPriceListing> PriceList { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceId
        /// </summary>
        [Required]
        [DataMember(Name="workspace_id", EmitDefaultValue=true)]
        public int WorkspaceId { get; set; }

        /// <summary>
        /// Gets or Sets IsTrialing
        /// </summary>
        [Required]
        [DataMember(Name="is_trialing", EmitDefaultValue=true)]
        public bool IsTrialing { get; set; }

        /// <summary>
        /// Gets or Sets TrialEndsAt
        /// </summary>
        [Required]
        [DataMember(Name="trial_ends_at", EmitDefaultValue=true)]
        public string TrialEndsAt { get; set; }

        /// <summary>
        /// Gets or Sets CancelAtPeriodEnd
        /// </summary>
        [Required]
        [DataMember(Name="cancel_at_period_end", EmitDefaultValue=true)]
        public bool CancelAtPeriodEnd { get; set; }

        /// <summary>
        /// Gets or Sets HasTrialed
        /// </summary>
        [Required]
        [DataMember(Name="has_trialed", EmitDefaultValue=true)]
        public bool HasTrialed { get; set; }

        /// <summary>
        /// Gets or Sets PlanPrice
        /// </summary>
        [Required]
        [DataMember(Name="plan_price", EmitDefaultValue=true)]
        public PlanPrice PlanPrice { get; set; }

        /// <summary>
        /// Gets or Sets HasBillingPortal
        /// </summary>
        [Required]
        [DataMember(Name="has_billing_portal", EmitDefaultValue=true)]
        public bool HasBillingPortal { get; set; }

        /// <summary>
        /// Gets or Sets HasBillingPortalSwitchToAnnual
        /// </summary>
        [Required]
        [DataMember(Name="has_billing_portal_switch_to_annual", EmitDefaultValue=true)]
        public bool HasBillingPortalSwitchToAnnual { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlanDetailsResponse {\n");
            sb.Append("  CurrentMemberCount: ").Append(CurrentMemberCount).Append("\n");
            sb.Append("  CurrentPlan: ").Append(CurrentPlan).Append("\n");
            sb.Append("  CurrentPlanStatus: ").Append(CurrentPlanStatus).Append("\n");
            sb.Append("  DowngradeAt: ").Append(DowngradeAt).Append("\n");
            sb.Append("  CurrentActiveProjects: ").Append(CurrentActiveProjects).Append("\n");
            sb.Append("  MaximumActiveProjects: ").Append(MaximumActiveProjects).Append("\n");
            sb.Append("  PriceList: ").Append(PriceList).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("  IsTrialing: ").Append(IsTrialing).Append("\n");
            sb.Append("  TrialEndsAt: ").Append(TrialEndsAt).Append("\n");
            sb.Append("  CancelAtPeriodEnd: ").Append(CancelAtPeriodEnd).Append("\n");
            sb.Append("  HasTrialed: ").Append(HasTrialed).Append("\n");
            sb.Append("  PlanPrice: ").Append(PlanPrice).Append("\n");
            sb.Append("  HasBillingPortal: ").Append(HasBillingPortal).Append("\n");
            sb.Append("  HasBillingPortalSwitchToAnnual: ").Append(HasBillingPortalSwitchToAnnual).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlanDetailsResponse)obj);
        }

        /// <summary>
        /// Returns true if PlanDetailsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of PlanDetailsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanDetailsResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CurrentMemberCount == other.CurrentMemberCount ||
                    
                    CurrentMemberCount.Equals(other.CurrentMemberCount)
                ) && 
                (
                    CurrentPlan == other.CurrentPlan ||
                    
                    CurrentPlan.Equals(other.CurrentPlan)
                ) && 
                (
                    CurrentPlanStatus == other.CurrentPlanStatus ||
                    
                    CurrentPlanStatus.Equals(other.CurrentPlanStatus)
                ) && 
                (
                    DowngradeAt == other.DowngradeAt ||
                    DowngradeAt != null &&
                    DowngradeAt.Equals(other.DowngradeAt)
                ) && 
                (
                    CurrentActiveProjects == other.CurrentActiveProjects ||
                    
                    CurrentActiveProjects.Equals(other.CurrentActiveProjects)
                ) && 
                (
                    MaximumActiveProjects == other.MaximumActiveProjects ||
                    
                    MaximumActiveProjects.Equals(other.MaximumActiveProjects)
                ) && 
                (
                    PriceList == other.PriceList ||
                    PriceList != null &&
                    other.PriceList != null &&
                    PriceList.SequenceEqual(other.PriceList)
                ) && 
                (
                    WorkspaceId == other.WorkspaceId ||
                    
                    WorkspaceId.Equals(other.WorkspaceId)
                ) && 
                (
                    IsTrialing == other.IsTrialing ||
                    
                    IsTrialing.Equals(other.IsTrialing)
                ) && 
                (
                    TrialEndsAt == other.TrialEndsAt ||
                    TrialEndsAt != null &&
                    TrialEndsAt.Equals(other.TrialEndsAt)
                ) && 
                (
                    CancelAtPeriodEnd == other.CancelAtPeriodEnd ||
                    
                    CancelAtPeriodEnd.Equals(other.CancelAtPeriodEnd)
                ) && 
                (
                    HasTrialed == other.HasTrialed ||
                    
                    HasTrialed.Equals(other.HasTrialed)
                ) && 
                (
                    PlanPrice == other.PlanPrice ||
                    PlanPrice != null &&
                    PlanPrice.Equals(other.PlanPrice)
                ) && 
                (
                    HasBillingPortal == other.HasBillingPortal ||
                    
                    HasBillingPortal.Equals(other.HasBillingPortal)
                ) && 
                (
                    HasBillingPortalSwitchToAnnual == other.HasBillingPortalSwitchToAnnual ||
                    
                    HasBillingPortalSwitchToAnnual.Equals(other.HasBillingPortalSwitchToAnnual)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + CurrentMemberCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + CurrentPlan.GetHashCode();
                    
                    hashCode = hashCode * 59 + CurrentPlanStatus.GetHashCode();
                    if (DowngradeAt != null)
                    hashCode = hashCode * 59 + DowngradeAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + CurrentActiveProjects.GetHashCode();
                    
                    hashCode = hashCode * 59 + MaximumActiveProjects.GetHashCode();
                    if (PriceList != null)
                    hashCode = hashCode * 59 + PriceList.GetHashCode();
                    
                    hashCode = hashCode * 59 + WorkspaceId.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsTrialing.GetHashCode();
                    if (TrialEndsAt != null)
                    hashCode = hashCode * 59 + TrialEndsAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + CancelAtPeriodEnd.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasTrialed.GetHashCode();
                    if (PlanPrice != null)
                    hashCode = hashCode * 59 + PlanPrice.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasBillingPortal.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasBillingPortalSwitchToAnnual.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlanDetailsResponse left, PlanDetailsResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlanDetailsResponse left, PlanDetailsResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
