// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A representation of a Workspace Project Sync View, extending the base ProjectSync View, to be returned to clients in a sync (or sync-like) response.
    /// </summary>
    public partial class WorkspaceProjectSyncView : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceProjectSyncView" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="canAssignTasks">canAssignTasks</param>
        /// <param name="childOrder">childOrder</param>
        /// <param name="color">color</param>
        /// <param name="isArchived">isArchived</param>
        /// <param name="isDeleted">isDeleted</param>
        /// <param name="isFavorite">isFavorite</param>
        /// <param name="isFrozen">isFrozen</param>
        /// <param name="name">name</param>
        /// <param name="viewStyle">viewStyle</param>
        /// <param name="defaultOrder">defaultOrder</param>
        /// <param name="description">description</param>
        /// <param name="publicKey">publicKey</param>
        /// <param name="collaboratorRoleDefault">collaboratorRoleDefault</param>
        /// <param name="isLinkSharingEnabled">isLinkSharingEnabled</param>
        /// <param name="status">status</param>
        /// <param name="workspaceId">workspaceId</param>
        /// <param name="isCollapsed">isCollapsed</param>
        /// <param name="isShared">isShared</param>
        /// <param name="creatorUid">creatorUid</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="access">access</param>
        /// <param name="role">role</param>
        /// <param name="folderId">folderId</param>
        /// <param name="isInviteOnly">isInviteOnly</param>
        [JsonConstructor]
        public WorkspaceProjectSyncView(string id, bool canAssignTasks, int childOrder, string color, bool isArchived, bool isDeleted, bool isFavorite, bool isFrozen, string name, string viewStyle, int defaultOrder, string description, string publicKey, string collaboratorRoleDefault, bool isLinkSharingEnabled, ProjectStatus status, string workspaceId, bool isCollapsed, bool isShared, string? creatorUid = default, string? createdAt = default, string? updatedAt = default, ProjectAccessView? access = default, string? role = default, string? folderId = default, bool? isInviteOnly = default)
        {
            Id = id;
            CanAssignTasks = canAssignTasks;
            ChildOrder = childOrder;
            Color = color;
            IsArchived = isArchived;
            IsDeleted = isDeleted;
            IsFavorite = isFavorite;
            IsFrozen = isFrozen;
            Name = name;
            ViewStyle = viewStyle;
            DefaultOrder = defaultOrder;
            Description = description;
            PublicKey = publicKey;
            CollaboratorRoleDefault = collaboratorRoleDefault;
            IsLinkSharingEnabled = isLinkSharingEnabled;
            Status = status;
            WorkspaceId = workspaceId;
            IsCollapsed = isCollapsed;
            IsShared = isShared;
            CreatorUid = creatorUid;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            Access = access;
            Role = role;
            FolderId = folderId;
            IsInviteOnly = isInviteOnly;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public ProjectStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CanAssignTasks
        /// </summary>
        [JsonPropertyName("can_assign_tasks")]
        public bool CanAssignTasks { get; set; }

        /// <summary>
        /// Gets or Sets ChildOrder
        /// </summary>
        [JsonPropertyName("child_order")]
        public int ChildOrder { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [JsonPropertyName("color")]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets IsArchived
        /// </summary>
        [JsonPropertyName("is_archived")]
        public bool IsArchived { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [JsonPropertyName("is_deleted")]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets IsFavorite
        /// </summary>
        [JsonPropertyName("is_favorite")]
        public bool IsFavorite { get; set; }

        /// <summary>
        /// Gets or Sets IsFrozen
        /// </summary>
        [JsonPropertyName("is_frozen")]
        public bool IsFrozen { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ViewStyle
        /// </summary>
        [JsonPropertyName("view_style")]
        public string ViewStyle { get; set; }

        /// <summary>
        /// Gets or Sets DefaultOrder
        /// </summary>
        [JsonPropertyName("default_order")]
        public int DefaultOrder { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PublicKey
        /// </summary>
        [JsonPropertyName("public_key")]
        public string PublicKey { get; set; }

        /// <summary>
        /// Gets or Sets CollaboratorRoleDefault
        /// </summary>
        [JsonPropertyName("collaborator_role_default")]
        public string CollaboratorRoleDefault { get; set; }

        /// <summary>
        /// Gets or Sets IsLinkSharingEnabled
        /// </summary>
        [JsonPropertyName("is_link_sharing_enabled")]
        public bool IsLinkSharingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceId
        /// </summary>
        [JsonPropertyName("workspace_id")]
        public string WorkspaceId { get; set; }

        /// <summary>
        /// Gets or Sets IsCollapsed
        /// </summary>
        [JsonPropertyName("is_collapsed")]
        public bool IsCollapsed { get; set; }

        /// <summary>
        /// Gets or Sets IsShared
        /// </summary>
        [JsonPropertyName("is_shared")]
        public bool IsShared { get; set; }

        /// <summary>
        /// Gets or Sets CreatorUid
        /// </summary>
        [JsonPropertyName("creator_uid")]
        public string? CreatorUid { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [JsonPropertyName("access")]
        public ProjectAccessView? Access { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public string? Role { get; set; }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [JsonPropertyName("folder_id")]
        public string? FolderId { get; set; }

        /// <summary>
        /// Gets or Sets IsInviteOnly
        /// </summary>
        [JsonPropertyName("is_invite_only")]
        public bool? IsInviteOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkspaceProjectSyncView {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CanAssignTasks: ").Append(CanAssignTasks).Append("\n");
            sb.Append("  ChildOrder: ").Append(ChildOrder).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  IsArchived: ").Append(IsArchived).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  IsFrozen: ").Append(IsFrozen).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ViewStyle: ").Append(ViewStyle).Append("\n");
            sb.Append("  DefaultOrder: ").Append(DefaultOrder).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  CollaboratorRoleDefault: ").Append(CollaboratorRoleDefault).Append("\n");
            sb.Append("  IsLinkSharingEnabled: ").Append(IsLinkSharingEnabled).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("  IsCollapsed: ").Append(IsCollapsed).Append("\n");
            sb.Append("  IsShared: ").Append(IsShared).Append("\n");
            sb.Append("  CreatorUid: ").Append(CreatorUid).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  IsInviteOnly: ").Append(IsInviteOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WorkspaceProjectSyncView" />
    /// </summary>
    public class WorkspaceProjectSyncViewJsonConverter : JsonConverter<WorkspaceProjectSyncView>
    {
        /// <summary>
        /// Deserializes json to <see cref="WorkspaceProjectSyncView" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WorkspaceProjectSyncView Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<bool?> canAssignTasks = default;
            Option<int?> childOrder = default;
            Option<string?> color = default;
            Option<bool?> isArchived = default;
            Option<bool?> isDeleted = default;
            Option<bool?> isFavorite = default;
            Option<bool?> isFrozen = default;
            Option<string?> name = default;
            Option<string?> viewStyle = default;
            Option<int?> defaultOrder = default;
            Option<string?> description = default;
            Option<string?> publicKey = default;
            Option<string?> collaboratorRoleDefault = default;
            Option<bool?> isLinkSharingEnabled = default;
            Option<ProjectStatus?> status = default;
            Option<string?> workspaceId = default;
            Option<bool?> isCollapsed = default;
            Option<bool?> isShared = default;
            Option<string?> creatorUid = default;
            Option<string?> createdAt = default;
            Option<string?> updatedAt = default;
            Option<ProjectAccessView?> access = default;
            Option<string?> role = default;
            Option<string?> folderId = default;
            Option<bool?> isInviteOnly = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "can_assign_tasks":
                            canAssignTasks = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "child_order":
                            childOrder = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "color":
                            color = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_archived":
                            isArchived = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_deleted":
                            isDeleted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_favorite":
                            isFavorite = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_frozen":
                            isFrozen = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "view_style":
                            viewStyle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "default_order":
                            defaultOrder = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "public_key":
                            publicKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "collaborator_role_default":
                            collaboratorRoleDefault = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_link_sharing_enabled":
                            isLinkSharingEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ProjectStatus?>(ProjectStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "workspace_id":
                            workspaceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_collapsed":
                            isCollapsed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_shared":
                            isShared = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "creator_uid":
                            creatorUid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "access":
                            access = new Option<ProjectAccessView?>(JsonSerializer.Deserialize<ProjectAccessView>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "role":
                            role = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "folder_id":
                            folderId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_invite_only":
                            isInviteOnly = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(id));

            if (!canAssignTasks.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(canAssignTasks));

            if (!childOrder.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(childOrder));

            if (!color.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(color));

            if (!isArchived.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(isArchived));

            if (!isDeleted.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(isDeleted));

            if (!isFavorite.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(isFavorite));

            if (!isFrozen.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(isFrozen));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(name));

            if (!viewStyle.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(viewStyle));

            if (!defaultOrder.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(defaultOrder));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(description));

            if (!publicKey.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(publicKey));

            if (!collaboratorRoleDefault.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(collaboratorRoleDefault));

            if (!isLinkSharingEnabled.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(isLinkSharingEnabled));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(status));

            if (!workspaceId.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(workspaceId));

            if (!isCollapsed.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(isCollapsed));

            if (!isShared.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(isShared));

            if (!creatorUid.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(creatorUid));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(updatedAt));

            if (!access.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(access));

            if (!role.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(role));

            if (!folderId.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(folderId));

            if (!isInviteOnly.IsSet)
                throw new ArgumentException("Property is required for class WorkspaceProjectSyncView.", nameof(isInviteOnly));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (canAssignTasks.IsSet && canAssignTasks.Value == null)
                throw new ArgumentNullException(nameof(canAssignTasks), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (childOrder.IsSet && childOrder.Value == null)
                throw new ArgumentNullException(nameof(childOrder), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (color.IsSet && color.Value == null)
                throw new ArgumentNullException(nameof(color), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (isArchived.IsSet && isArchived.Value == null)
                throw new ArgumentNullException(nameof(isArchived), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (isFavorite.IsSet && isFavorite.Value == null)
                throw new ArgumentNullException(nameof(isFavorite), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (isFrozen.IsSet && isFrozen.Value == null)
                throw new ArgumentNullException(nameof(isFrozen), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (viewStyle.IsSet && viewStyle.Value == null)
                throw new ArgumentNullException(nameof(viewStyle), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (defaultOrder.IsSet && defaultOrder.Value == null)
                throw new ArgumentNullException(nameof(defaultOrder), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (publicKey.IsSet && publicKey.Value == null)
                throw new ArgumentNullException(nameof(publicKey), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (collaboratorRoleDefault.IsSet && collaboratorRoleDefault.Value == null)
                throw new ArgumentNullException(nameof(collaboratorRoleDefault), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (isLinkSharingEnabled.IsSet && isLinkSharingEnabled.Value == null)
                throw new ArgumentNullException(nameof(isLinkSharingEnabled), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (workspaceId.IsSet && workspaceId.Value == null)
                throw new ArgumentNullException(nameof(workspaceId), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (isCollapsed.IsSet && isCollapsed.Value == null)
                throw new ArgumentNullException(nameof(isCollapsed), "Property is not nullable for class WorkspaceProjectSyncView.");

            if (isShared.IsSet && isShared.Value == null)
                throw new ArgumentNullException(nameof(isShared), "Property is not nullable for class WorkspaceProjectSyncView.");

            return new WorkspaceProjectSyncView(id.Value!, canAssignTasks.Value!.Value!, childOrder.Value!.Value!, color.Value!, isArchived.Value!.Value!, isDeleted.Value!.Value!, isFavorite.Value!.Value!, isFrozen.Value!.Value!, name.Value!, viewStyle.Value!, defaultOrder.Value!.Value!, description.Value!, publicKey.Value!, collaboratorRoleDefault.Value!, isLinkSharingEnabled.Value!.Value!, status.Value!.Value!, workspaceId.Value!, isCollapsed.Value!.Value!, isShared.Value!.Value!, creatorUid.Value!, createdAt.Value!, updatedAt.Value!, access.Value!, role.Value!, folderId.Value!, isInviteOnly.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="WorkspaceProjectSyncView" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="workspaceProjectSyncView"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WorkspaceProjectSyncView workspaceProjectSyncView, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, workspaceProjectSyncView, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WorkspaceProjectSyncView" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="workspaceProjectSyncView"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WorkspaceProjectSyncView workspaceProjectSyncView, JsonSerializerOptions jsonSerializerOptions)
        {
            if (workspaceProjectSyncView.Id == null)
                throw new ArgumentNullException(nameof(workspaceProjectSyncView.Id), "Property is required for class WorkspaceProjectSyncView.");

            if (workspaceProjectSyncView.Color == null)
                throw new ArgumentNullException(nameof(workspaceProjectSyncView.Color), "Property is required for class WorkspaceProjectSyncView.");

            if (workspaceProjectSyncView.Name == null)
                throw new ArgumentNullException(nameof(workspaceProjectSyncView.Name), "Property is required for class WorkspaceProjectSyncView.");

            if (workspaceProjectSyncView.ViewStyle == null)
                throw new ArgumentNullException(nameof(workspaceProjectSyncView.ViewStyle), "Property is required for class WorkspaceProjectSyncView.");

            if (workspaceProjectSyncView.Description == null)
                throw new ArgumentNullException(nameof(workspaceProjectSyncView.Description), "Property is required for class WorkspaceProjectSyncView.");

            if (workspaceProjectSyncView.PublicKey == null)
                throw new ArgumentNullException(nameof(workspaceProjectSyncView.PublicKey), "Property is required for class WorkspaceProjectSyncView.");

            if (workspaceProjectSyncView.CollaboratorRoleDefault == null)
                throw new ArgumentNullException(nameof(workspaceProjectSyncView.CollaboratorRoleDefault), "Property is required for class WorkspaceProjectSyncView.");

            if (workspaceProjectSyncView.WorkspaceId == null)
                throw new ArgumentNullException(nameof(workspaceProjectSyncView.WorkspaceId), "Property is required for class WorkspaceProjectSyncView.");

            writer.WriteString("id", workspaceProjectSyncView.Id);

            writer.WriteBoolean("can_assign_tasks", workspaceProjectSyncView.CanAssignTasks);

            writer.WriteNumber("child_order", workspaceProjectSyncView.ChildOrder);

            writer.WriteString("color", workspaceProjectSyncView.Color);

            writer.WriteBoolean("is_archived", workspaceProjectSyncView.IsArchived);

            writer.WriteBoolean("is_deleted", workspaceProjectSyncView.IsDeleted);

            writer.WriteBoolean("is_favorite", workspaceProjectSyncView.IsFavorite);

            writer.WriteBoolean("is_frozen", workspaceProjectSyncView.IsFrozen);

            writer.WriteString("name", workspaceProjectSyncView.Name);

            writer.WriteString("view_style", workspaceProjectSyncView.ViewStyle);

            writer.WriteNumber("default_order", workspaceProjectSyncView.DefaultOrder);

            writer.WriteString("description", workspaceProjectSyncView.Description);

            writer.WriteString("public_key", workspaceProjectSyncView.PublicKey);

            writer.WriteString("collaborator_role_default", workspaceProjectSyncView.CollaboratorRoleDefault);

            writer.WriteBoolean("is_link_sharing_enabled", workspaceProjectSyncView.IsLinkSharingEnabled);

            var statusRawValue = ProjectStatusValueConverter.ToJsonValue(workspaceProjectSyncView.Status);
            writer.WriteString("status", statusRawValue);

            writer.WriteString("workspace_id", workspaceProjectSyncView.WorkspaceId);

            writer.WriteBoolean("is_collapsed", workspaceProjectSyncView.IsCollapsed);

            writer.WriteBoolean("is_shared", workspaceProjectSyncView.IsShared);

            if (workspaceProjectSyncView.CreatorUid != null)
                writer.WriteString("creator_uid", workspaceProjectSyncView.CreatorUid);
            else
                writer.WriteNull("creator_uid");

            if (workspaceProjectSyncView.CreatedAt != null)
                writer.WriteString("created_at", workspaceProjectSyncView.CreatedAt);
            else
                writer.WriteNull("created_at");

            if (workspaceProjectSyncView.UpdatedAt != null)
                writer.WriteString("updated_at", workspaceProjectSyncView.UpdatedAt);
            else
                writer.WriteNull("updated_at");

            if (workspaceProjectSyncView.Access != null)
            {
                writer.WritePropertyName("access");
                JsonSerializer.Serialize(writer, workspaceProjectSyncView.Access, jsonSerializerOptions);
            }
            else
                writer.WriteNull("access");
            if (workspaceProjectSyncView.Role != null)
                writer.WriteString("role", workspaceProjectSyncView.Role);
            else
                writer.WriteNull("role");

            if (workspaceProjectSyncView.FolderId != null)
                writer.WriteString("folder_id", workspaceProjectSyncView.FolderId);
            else
                writer.WriteNull("folder_id");

            if (workspaceProjectSyncView.IsInviteOnly != null)
                writer.WriteBoolean("is_invite_only", workspaceProjectSyncView.IsInviteOnly.Value);
            else
                writer.WriteNull("is_invite_only");
        }
    }
}
