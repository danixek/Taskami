// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A class with fields representing an ItemView which will be returned to clients in a sync (or sync-like) response.
    /// </summary>
    public partial class ItemSyncView : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSyncView" /> class.
        /// </summary>
        /// <param name="userId">userId</param>
        /// <param name="id">id</param>
        /// <param name="projectId">projectId</param>
        /// <param name="labels">labels</param>
        /// <param name="checked">checked</param>
        /// <param name="isDeleted">isDeleted</param>
        /// <param name="priority">priority</param>
        /// <param name="childOrder">childOrder</param>
        /// <param name="content">content</param>
        /// <param name="description">description</param>
        /// <param name="noteCount">noteCount</param>
        /// <param name="dayOrder">dayOrder</param>
        /// <param name="isCollapsed">isCollapsed</param>
        /// <param name="sectionId">sectionId</param>
        /// <param name="parentId">parentId</param>
        /// <param name="addedByUid">addedByUid</param>
        /// <param name="assignedByUid">assignedByUid</param>
        /// <param name="responsibleUid">responsibleUid</param>
        /// <param name="deadline">deadline</param>
        /// <param name="duration">duration</param>
        /// <param name="addedAt">addedAt</param>
        /// <param name="completedAt">completedAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="due">due</param>
        [JsonConstructor]
        public ItemSyncView(string userId, string id, string projectId, List<string> labels, bool @checked, bool isDeleted, int priority, int childOrder, string content, string description, int noteCount, int dayOrder, bool isCollapsed, string? sectionId = default, string? parentId = default, string? addedByUid = default, string? assignedByUid = default, string? responsibleUid = default, Dictionary<string, ItemSyncViewDeadlineValue>? deadline = default, Dictionary<string, ItemSyncViewDurationValue>? duration = default, string? addedAt = default, string? completedAt = default, string? updatedAt = default, Dictionary<string, Object>? due = default)
        {
            UserId = userId;
            Id = id;
            ProjectId = projectId;
            Labels = labels;
            Checked = @checked;
            IsDeleted = isDeleted;
            Priority = priority;
            ChildOrder = childOrder;
            Content = content;
            Description = description;
            NoteCount = noteCount;
            DayOrder = dayOrder;
            IsCollapsed = isCollapsed;
            SectionId = sectionId;
            ParentId = parentId;
            AddedByUid = addedByUid;
            AssignedByUid = assignedByUid;
            ResponsibleUid = responsibleUid;
            Deadline = deadline;
            Duration = duration;
            AddedAt = addedAt;
            CompletedAt = completedAt;
            UpdatedAt = updatedAt;
            Due = due;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [JsonPropertyName("project_id")]
        public string ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [JsonPropertyName("labels")]
        public List<string> Labels { get; set; }

        /// <summary>
        /// Gets or Sets Checked
        /// </summary>
        [JsonPropertyName("checked")]
        public bool Checked { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [JsonPropertyName("is_deleted")]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [JsonPropertyName("priority")]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or Sets ChildOrder
        /// </summary>
        [JsonPropertyName("child_order")]
        public int ChildOrder { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets NoteCount
        /// </summary>
        [JsonPropertyName("note_count")]
        public int NoteCount { get; set; }

        /// <summary>
        /// Gets or Sets DayOrder
        /// </summary>
        [JsonPropertyName("day_order")]
        public int DayOrder { get; set; }

        /// <summary>
        /// Gets or Sets IsCollapsed
        /// </summary>
        [JsonPropertyName("is_collapsed")]
        public bool IsCollapsed { get; set; }

        /// <summary>
        /// Gets or Sets SectionId
        /// </summary>
        [JsonPropertyName("section_id")]
        public string? SectionId { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [JsonPropertyName("parent_id")]
        public string? ParentId { get; set; }

        /// <summary>
        /// Gets or Sets AddedByUid
        /// </summary>
        [JsonPropertyName("added_by_uid")]
        public string? AddedByUid { get; set; }

        /// <summary>
        /// Gets or Sets AssignedByUid
        /// </summary>
        [JsonPropertyName("assigned_by_uid")]
        public string? AssignedByUid { get; set; }

        /// <summary>
        /// Gets or Sets ResponsibleUid
        /// </summary>
        [JsonPropertyName("responsible_uid")]
        public string? ResponsibleUid { get; set; }

        /// <summary>
        /// Gets or Sets Deadline
        /// </summary>
        [JsonPropertyName("deadline")]
        public Dictionary<string, ItemSyncViewDeadlineValue>? Deadline { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [JsonPropertyName("duration")]
        public Dictionary<string, ItemSyncViewDurationValue>? Duration { get; set; }

        /// <summary>
        /// Gets or Sets AddedAt
        /// </summary>
        [JsonPropertyName("added_at")]
        public string? AddedAt { get; set; }

        /// <summary>
        /// Gets or Sets CompletedAt
        /// </summary>
        [JsonPropertyName("completed_at")]
        public string? CompletedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Due
        /// </summary>
        [JsonPropertyName("due")]
        public Dictionary<string, Object>? Due { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemSyncView {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Checked: ").Append(Checked).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ChildOrder: ").Append(ChildOrder).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  NoteCount: ").Append(NoteCount).Append("\n");
            sb.Append("  DayOrder: ").Append(DayOrder).Append("\n");
            sb.Append("  IsCollapsed: ").Append(IsCollapsed).Append("\n");
            sb.Append("  SectionId: ").Append(SectionId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  AddedByUid: ").Append(AddedByUid).Append("\n");
            sb.Append("  AssignedByUid: ").Append(AssignedByUid).Append("\n");
            sb.Append("  ResponsibleUid: ").Append(ResponsibleUid).Append("\n");
            sb.Append("  Deadline: ").Append(Deadline).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  AddedAt: ").Append(AddedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Due: ").Append(Due).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ItemSyncView" />
    /// </summary>
    public class ItemSyncViewJsonConverter : JsonConverter<ItemSyncView>
    {
        /// <summary>
        /// Deserializes json to <see cref="ItemSyncView" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ItemSyncView Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> userId = default;
            Option<string?> id = default;
            Option<string?> projectId = default;
            Option<List<string>?> labels = default;
            Option<bool?> varChecked = default;
            Option<bool?> isDeleted = default;
            Option<int?> priority = default;
            Option<int?> childOrder = default;
            Option<string?> content = default;
            Option<string?> description = default;
            Option<int?> noteCount = default;
            Option<int?> dayOrder = default;
            Option<bool?> isCollapsed = default;
            Option<string?> sectionId = default;
            Option<string?> parentId = default;
            Option<string?> addedByUid = default;
            Option<string?> assignedByUid = default;
            Option<string?> responsibleUid = default;
            Option<Dictionary<string, ItemSyncViewDeadlineValue>?> deadline = default;
            Option<Dictionary<string, ItemSyncViewDurationValue>?> duration = default;
            Option<string?> addedAt = default;
            Option<string?> completedAt = default;
            Option<string?> updatedAt = default;
            Option<Dictionary<string, Object>?> due = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "project_id":
                            projectId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "labels":
                            labels = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "checked":
                            varChecked = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_deleted":
                            isDeleted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "priority":
                            priority = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "child_order":
                            childOrder = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "note_count":
                            noteCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "day_order":
                            dayOrder = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_collapsed":
                            isCollapsed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "section_id":
                            sectionId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "parent_id":
                            parentId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "added_by_uid":
                            addedByUid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "assigned_by_uid":
                            assignedByUid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "responsible_uid":
                            responsibleUid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "deadline":
                            deadline = new Option<Dictionary<string, ItemSyncViewDeadlineValue>?>(JsonSerializer.Deserialize<Dictionary<string, ItemSyncViewDeadlineValue>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "duration":
                            duration = new Option<Dictionary<string, ItemSyncViewDurationValue>?>(JsonSerializer.Deserialize<Dictionary<string, ItemSyncViewDurationValue>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "added_at":
                            addedAt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "completed_at":
                            completedAt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "due":
                            due = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(userId));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(id));

            if (!projectId.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(projectId));

            if (!labels.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(labels));

            if (!varChecked.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(varChecked));

            if (!isDeleted.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(isDeleted));

            if (!priority.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(priority));

            if (!childOrder.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(childOrder));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(content));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(description));

            if (!noteCount.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(noteCount));

            if (!dayOrder.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(dayOrder));

            if (!isCollapsed.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(isCollapsed));

            if (!sectionId.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(sectionId));

            if (!parentId.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(parentId));

            if (!addedByUid.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(addedByUid));

            if (!assignedByUid.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(assignedByUid));

            if (!responsibleUid.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(responsibleUid));

            if (!deadline.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(deadline));

            if (!duration.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(duration));

            if (!addedAt.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(addedAt));

            if (!completedAt.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(completedAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(updatedAt));

            if (!due.IsSet)
                throw new ArgumentException("Property is required for class ItemSyncView.", nameof(due));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class ItemSyncView.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ItemSyncView.");

            if (projectId.IsSet && projectId.Value == null)
                throw new ArgumentNullException(nameof(projectId), "Property is not nullable for class ItemSyncView.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class ItemSyncView.");

            if (varChecked.IsSet && varChecked.Value == null)
                throw new ArgumentNullException(nameof(varChecked), "Property is not nullable for class ItemSyncView.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class ItemSyncView.");

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class ItemSyncView.");

            if (childOrder.IsSet && childOrder.Value == null)
                throw new ArgumentNullException(nameof(childOrder), "Property is not nullable for class ItemSyncView.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class ItemSyncView.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class ItemSyncView.");

            if (noteCount.IsSet && noteCount.Value == null)
                throw new ArgumentNullException(nameof(noteCount), "Property is not nullable for class ItemSyncView.");

            if (dayOrder.IsSet && dayOrder.Value == null)
                throw new ArgumentNullException(nameof(dayOrder), "Property is not nullable for class ItemSyncView.");

            if (isCollapsed.IsSet && isCollapsed.Value == null)
                throw new ArgumentNullException(nameof(isCollapsed), "Property is not nullable for class ItemSyncView.");

            return new ItemSyncView(userId.Value!, id.Value!, projectId.Value!, labels.Value!, varChecked.Value!.Value!, isDeleted.Value!.Value!, priority.Value!.Value!, childOrder.Value!.Value!, content.Value!, description.Value!, noteCount.Value!.Value!, dayOrder.Value!.Value!, isCollapsed.Value!.Value!, sectionId.Value!, parentId.Value!, addedByUid.Value!, assignedByUid.Value!, responsibleUid.Value!, deadline.Value!, duration.Value!, addedAt.Value!, completedAt.Value!, updatedAt.Value!, due.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ItemSyncView" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="itemSyncView"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ItemSyncView itemSyncView, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, itemSyncView, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ItemSyncView" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="itemSyncView"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ItemSyncView itemSyncView, JsonSerializerOptions jsonSerializerOptions)
        {
            if (itemSyncView.UserId == null)
                throw new ArgumentNullException(nameof(itemSyncView.UserId), "Property is required for class ItemSyncView.");

            if (itemSyncView.Id == null)
                throw new ArgumentNullException(nameof(itemSyncView.Id), "Property is required for class ItemSyncView.");

            if (itemSyncView.ProjectId == null)
                throw new ArgumentNullException(nameof(itemSyncView.ProjectId), "Property is required for class ItemSyncView.");

            if (itemSyncView.Labels == null)
                throw new ArgumentNullException(nameof(itemSyncView.Labels), "Property is required for class ItemSyncView.");

            if (itemSyncView.Content == null)
                throw new ArgumentNullException(nameof(itemSyncView.Content), "Property is required for class ItemSyncView.");

            if (itemSyncView.Description == null)
                throw new ArgumentNullException(nameof(itemSyncView.Description), "Property is required for class ItemSyncView.");

            writer.WriteString("user_id", itemSyncView.UserId);

            writer.WriteString("id", itemSyncView.Id);

            writer.WriteString("project_id", itemSyncView.ProjectId);

            writer.WritePropertyName("labels");
            JsonSerializer.Serialize(writer, itemSyncView.Labels, jsonSerializerOptions);
            writer.WriteBoolean("checked", itemSyncView.Checked);

            writer.WriteBoolean("is_deleted", itemSyncView.IsDeleted);

            writer.WriteNumber("priority", itemSyncView.Priority);

            writer.WriteNumber("child_order", itemSyncView.ChildOrder);

            writer.WriteString("content", itemSyncView.Content);

            writer.WriteString("description", itemSyncView.Description);

            writer.WriteNumber("note_count", itemSyncView.NoteCount);

            writer.WriteNumber("day_order", itemSyncView.DayOrder);

            writer.WriteBoolean("is_collapsed", itemSyncView.IsCollapsed);

            if (itemSyncView.SectionId != null)
                writer.WriteString("section_id", itemSyncView.SectionId);
            else
                writer.WriteNull("section_id");

            if (itemSyncView.ParentId != null)
                writer.WriteString("parent_id", itemSyncView.ParentId);
            else
                writer.WriteNull("parent_id");

            if (itemSyncView.AddedByUid != null)
                writer.WriteString("added_by_uid", itemSyncView.AddedByUid);
            else
                writer.WriteNull("added_by_uid");

            if (itemSyncView.AssignedByUid != null)
                writer.WriteString("assigned_by_uid", itemSyncView.AssignedByUid);
            else
                writer.WriteNull("assigned_by_uid");

            if (itemSyncView.ResponsibleUid != null)
                writer.WriteString("responsible_uid", itemSyncView.ResponsibleUid);
            else
                writer.WriteNull("responsible_uid");

            if (itemSyncView.Deadline != null)
            {
                writer.WritePropertyName("deadline");
                JsonSerializer.Serialize(writer, itemSyncView.Deadline, jsonSerializerOptions);
            }
            else
                writer.WriteNull("deadline");
            if (itemSyncView.Duration != null)
            {
                writer.WritePropertyName("duration");
                JsonSerializer.Serialize(writer, itemSyncView.Duration, jsonSerializerOptions);
            }
            else
                writer.WriteNull("duration");
            if (itemSyncView.AddedAt != null)
                writer.WriteString("added_at", itemSyncView.AddedAt);
            else
                writer.WriteNull("added_at");

            if (itemSyncView.CompletedAt != null)
                writer.WriteString("completed_at", itemSyncView.CompletedAt);
            else
                writer.WriteNull("completed_at");

            if (itemSyncView.UpdatedAt != null)
                writer.WriteString("updated_at", itemSyncView.UpdatedAt);
            else
                writer.WriteNull("updated_at");

            if (itemSyncView.Due != null)
            {
                writer.WritePropertyName("due");
                JsonSerializer.Serialize(writer, itemSyncView.Due, jsonSerializerOptions);
            }
            else
                writer.WriteNull("due");
        }
    }
}
