// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ActivityEvents
    /// </summary>
    public partial class ActivityEvents : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityEvents" /> class.
        /// </summary>
        /// <param name="objectType">objectType</param>
        /// <param name="objectId">objectId</param>
        /// <param name="v2ObjectId">v2ObjectId</param>
        /// <param name="eventType">eventType</param>
        /// <param name="eventDate">eventDate</param>
        /// <param name="id">id</param>
        /// <param name="parentProjectId">parentProjectId</param>
        /// <param name="v2ParentProjectId">v2ParentProjectId</param>
        /// <param name="parentItemId">parentItemId</param>
        /// <param name="v2ParentItemId">v2ParentItemId</param>
        /// <param name="initiatorId">The ID of the user who is responsible for the event, which only makes sense in shared projects, items and notes, and is null for non-shared objects</param>
        /// <param name="extraDataId">extraDataId</param>
        /// <param name="extraData">extraData</param>
        /// <param name="source">source</param>
        [JsonConstructor]
        public ActivityEvents(string objectType, string objectId, string v2ObjectId, string eventType, DateTime eventDate, Option<int?> id = default, Option<string?> parentProjectId = default, Option<string?> v2ParentProjectId = default, Option<string?> parentItemId = default, Option<string?> v2ParentItemId = default, Option<string?> initiatorId = default, Option<int?> extraDataId = default, Option<Dictionary<string, Object>?> extraData = default, Option<SourceEnum?> source = default)
        {
            ObjectType = objectType;
            ObjectId = objectId;
            V2ObjectId = v2ObjectId;
            EventType = eventType;
            EventDate = eventDate;
            IdOption = id;
            ParentProjectIdOption = parentProjectId;
            V2ParentProjectIdOption = v2ParentProjectId;
            ParentItemIdOption = parentItemId;
            V2ParentItemIdOption = v2ParentItemId;
            InitiatorIdOption = initiatorId;
            ExtraDataIdOption = extraDataId;
            ExtraDataOption = extraData;
            SourceOption = source;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Source
        /// </summary>
        public enum SourceEnum
        {
            /// <summary>
            /// Enum Mysql for value: mysql
            /// </summary>
            Mysql = 1,

            /// <summary>
            /// Enum Clickhouse for value: clickhouse
            /// </summary>
            Clickhouse = 2
        }

        /// <summary>
        /// Returns a <see cref="SourceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SourceEnum SourceEnumFromString(string value)
        {
            if (value.Equals("mysql"))
                return SourceEnum.Mysql;

            if (value.Equals("clickhouse"))
                return SourceEnum.Clickhouse;

            throw new NotImplementedException($"Could not convert value to type SourceEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SourceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SourceEnum? SourceEnumFromStringOrDefault(string value)
        {
            if (value.Equals("mysql"))
                return SourceEnum.Mysql;

            if (value.Equals("clickhouse"))
                return SourceEnum.Clickhouse;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SourceEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string? SourceEnumToJsonValue(SourceEnum? value)
        {
            if (value == null)
                return null;

            if (value == SourceEnum.Mysql)
                return "mysql";

            if (value == SourceEnum.Clickhouse)
                return "clickhouse";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Source
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SourceEnum?> SourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [JsonPropertyName("source")]
        public SourceEnum? Source { get { return this.SourceOption; } set { this.SourceOption = new(value); } }

        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>
        [JsonPropertyName("object_type")]
        public string ObjectType { get; set; }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [JsonPropertyName("object_id")]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets V2ObjectId
        /// </summary>
        [JsonPropertyName("v2_object_id")]
        public string V2ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [JsonPropertyName("event_type")]
        public string EventType { get; set; }

        /// <summary>
        /// Gets or Sets EventDate
        /// </summary>
        [JsonPropertyName("event_date")]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentProjectIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentProjectId
        /// </summary>
        [JsonPropertyName("parent_project_id")]
        public string? ParentProjectId { get { return this.ParentProjectIdOption; } set { this.ParentProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of V2ParentProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> V2ParentProjectIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets V2ParentProjectId
        /// </summary>
        [JsonPropertyName("v2_parent_project_id")]
        public string? V2ParentProjectId { get { return this.V2ParentProjectIdOption; } set { this.V2ParentProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentItemId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentItemIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentItemId
        /// </summary>
        [JsonPropertyName("parent_item_id")]
        public string? ParentItemId { get { return this.ParentItemIdOption; } set { this.ParentItemIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of V2ParentItemId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> V2ParentItemIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets V2ParentItemId
        /// </summary>
        [JsonPropertyName("v2_parent_item_id")]
        public string? V2ParentItemId { get { return this.V2ParentItemIdOption; } set { this.V2ParentItemIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of InitiatorId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InitiatorIdOption { get; private set; }

        /// <summary>
        /// The ID of the user who is responsible for the event, which only makes sense in shared projects, items and notes, and is null for non-shared objects
        /// </summary>
        /// <value>The ID of the user who is responsible for the event, which only makes sense in shared projects, items and notes, and is null for non-shared objects</value>
        [JsonPropertyName("initiator_id")]
        public string? InitiatorId { get { return this.InitiatorIdOption; } set { this.InitiatorIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExtraDataId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExtraDataIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExtraDataId
        /// </summary>
        [JsonPropertyName("extra_data_id")]
        public int? ExtraDataId { get { return this.ExtraDataIdOption; } set { this.ExtraDataIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExtraData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> ExtraDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExtraData
        /// </summary>
        [JsonPropertyName("extra_data")]
        public Dictionary<string, Object>? ExtraData { get { return this.ExtraDataOption; } set { this.ExtraDataOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivityEvents {\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  V2ObjectId: ").Append(V2ObjectId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentProjectId: ").Append(ParentProjectId).Append("\n");
            sb.Append("  V2ParentProjectId: ").Append(V2ParentProjectId).Append("\n");
            sb.Append("  ParentItemId: ").Append(ParentItemId).Append("\n");
            sb.Append("  V2ParentItemId: ").Append(V2ParentItemId).Append("\n");
            sb.Append("  InitiatorId: ").Append(InitiatorId).Append("\n");
            sb.Append("  ExtraDataId: ").Append(ExtraDataId).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ActivityEvents" />
    /// </summary>
    public class ActivityEventsJsonConverter : JsonConverter<ActivityEvents>
    {
        /// <summary>
        /// The format to use to serialize EventDate
        /// </summary>
        public static string EventDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ActivityEvents" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ActivityEvents Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> objectType = default;
            Option<string?> objectId = default;
            Option<string?> v2ObjectId = default;
            Option<string?> eventType = default;
            Option<DateTime?> eventDate = default;
            Option<int?> id = default;
            Option<string?> parentProjectId = default;
            Option<string?> v2ParentProjectId = default;
            Option<string?> parentItemId = default;
            Option<string?> v2ParentItemId = default;
            Option<string?> initiatorId = default;
            Option<int?> extraDataId = default;
            Option<Dictionary<string, Object>?> extraData = default;
            Option<ActivityEvents.SourceEnum?> source = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "object_type":
                            objectType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "object_id":
                            objectId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "v2_object_id":
                            v2ObjectId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "event_type":
                            eventType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "event_date":
                            eventDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "parent_project_id":
                            parentProjectId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "v2_parent_project_id":
                            v2ParentProjectId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "parent_item_id":
                            parentItemId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "v2_parent_item_id":
                            v2ParentItemId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "initiator_id":
                            initiatorId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "extra_data_id":
                            extraDataId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "extra_data":
                            extraData = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "source":
                            string? sourceRawValue = utf8JsonReader.GetString();
                            if (sourceRawValue != null)
                                source = new Option<ActivityEvents.SourceEnum?>(ActivityEvents.SourceEnumFromStringOrDefault(sourceRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!objectType.IsSet)
                throw new ArgumentException("Property is required for class ActivityEvents.", nameof(objectType));

            if (!objectId.IsSet)
                throw new ArgumentException("Property is required for class ActivityEvents.", nameof(objectId));

            if (!v2ObjectId.IsSet)
                throw new ArgumentException("Property is required for class ActivityEvents.", nameof(v2ObjectId));

            if (!eventType.IsSet)
                throw new ArgumentException("Property is required for class ActivityEvents.", nameof(eventType));

            if (!eventDate.IsSet)
                throw new ArgumentException("Property is required for class ActivityEvents.", nameof(eventDate));

            if (objectType.IsSet && objectType.Value == null)
                throw new ArgumentNullException(nameof(objectType), "Property is not nullable for class ActivityEvents.");

            if (objectId.IsSet && objectId.Value == null)
                throw new ArgumentNullException(nameof(objectId), "Property is not nullable for class ActivityEvents.");

            if (v2ObjectId.IsSet && v2ObjectId.Value == null)
                throw new ArgumentNullException(nameof(v2ObjectId), "Property is not nullable for class ActivityEvents.");

            if (eventType.IsSet && eventType.Value == null)
                throw new ArgumentNullException(nameof(eventType), "Property is not nullable for class ActivityEvents.");

            if (eventDate.IsSet && eventDate.Value == null)
                throw new ArgumentNullException(nameof(eventDate), "Property is not nullable for class ActivityEvents.");

            return new ActivityEvents(objectType.Value!, objectId.Value!, v2ObjectId.Value!, eventType.Value!, eventDate.Value!.Value!, id, parentProjectId, v2ParentProjectId, parentItemId, v2ParentItemId, initiatorId, extraDataId, extraData, source);
        }

        /// <summary>
        /// Serializes a <see cref="ActivityEvents" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="activityEvents"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ActivityEvents activityEvents, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, activityEvents, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ActivityEvents" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="activityEvents"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ActivityEvents activityEvents, JsonSerializerOptions jsonSerializerOptions)
        {
            if (activityEvents.ObjectType == null)
                throw new ArgumentNullException(nameof(activityEvents.ObjectType), "Property is required for class ActivityEvents.");

            if (activityEvents.ObjectId == null)
                throw new ArgumentNullException(nameof(activityEvents.ObjectId), "Property is required for class ActivityEvents.");

            if (activityEvents.V2ObjectId == null)
                throw new ArgumentNullException(nameof(activityEvents.V2ObjectId), "Property is required for class ActivityEvents.");

            if (activityEvents.EventType == null)
                throw new ArgumentNullException(nameof(activityEvents.EventType), "Property is required for class ActivityEvents.");

            writer.WriteString("object_type", activityEvents.ObjectType);

            writer.WriteString("object_id", activityEvents.ObjectId);

            writer.WriteString("v2_object_id", activityEvents.V2ObjectId);

            writer.WriteString("event_type", activityEvents.EventType);

            writer.WriteString("event_date", activityEvents.EventDate.ToString(EventDateFormat));

            if (activityEvents.IdOption.IsSet)
                if (activityEvents.IdOption.Value != null)
                    writer.WriteNumber("id", activityEvents.IdOption.Value!.Value);
                else
                    writer.WriteNull("id");

            if (activityEvents.ParentProjectIdOption.IsSet)
                if (activityEvents.ParentProjectIdOption.Value != null)
                    writer.WriteString("parent_project_id", activityEvents.ParentProjectId);
                else
                    writer.WriteNull("parent_project_id");

            if (activityEvents.V2ParentProjectIdOption.IsSet)
                if (activityEvents.V2ParentProjectIdOption.Value != null)
                    writer.WriteString("v2_parent_project_id", activityEvents.V2ParentProjectId);
                else
                    writer.WriteNull("v2_parent_project_id");

            if (activityEvents.ParentItemIdOption.IsSet)
                if (activityEvents.ParentItemIdOption.Value != null)
                    writer.WriteString("parent_item_id", activityEvents.ParentItemId);
                else
                    writer.WriteNull("parent_item_id");

            if (activityEvents.V2ParentItemIdOption.IsSet)
                if (activityEvents.V2ParentItemIdOption.Value != null)
                    writer.WriteString("v2_parent_item_id", activityEvents.V2ParentItemId);
                else
                    writer.WriteNull("v2_parent_item_id");

            if (activityEvents.InitiatorIdOption.IsSet)
                if (activityEvents.InitiatorIdOption.Value != null)
                    writer.WriteString("initiator_id", activityEvents.InitiatorId);
                else
                    writer.WriteNull("initiator_id");

            if (activityEvents.ExtraDataIdOption.IsSet)
                if (activityEvents.ExtraDataIdOption.Value != null)
                    writer.WriteNumber("extra_data_id", activityEvents.ExtraDataIdOption.Value!.Value);
                else
                    writer.WriteNull("extra_data_id");

            if (activityEvents.ExtraDataOption.IsSet)
                if (activityEvents.ExtraDataOption.Value != null)
                {
                    writer.WritePropertyName("extra_data");
                    JsonSerializer.Serialize(writer, activityEvents.ExtraData, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("extra_data");
            var sourceRawValue = ActivityEvents.SourceEnumToJsonValue(activityEvents.SourceOption.Value!.Value);
            if (sourceRawValue != null)
                writer.WriteString("source", sourceRawValue);
            else
                writer.WriteNull("source");
        }
    }
}
