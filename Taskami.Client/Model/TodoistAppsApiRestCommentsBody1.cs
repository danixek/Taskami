// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TodoistAppsApiRestCommentsBody1
    /// </summary>
    public partial class TodoistAppsApiRestCommentsBody1 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TodoistAppsApiRestCommentsBody1" /> class.
        /// </summary>
        /// <param name="content">content</param>
        /// <param name="projectId">projectId</param>
        /// <param name="taskId">taskId</param>
        /// <param name="attachment">attachment</param>
        /// <param name="uidsToNotify">uidsToNotify</param>
        [JsonConstructor]
        public TodoistAppsApiRestCommentsBody1(string content, Option<ProjectId4?> projectId = default, Option<TaskId3?> taskId = default, Option<Dictionary<string, Object>?> attachment = default, Option<List<int>?> uidsToNotify = default)
        {
            Content = content;
            ProjectIdOption = projectId;
            TaskIdOption = taskId;
            AttachmentOption = attachment;
            UidsToNotifyOption = uidsToNotify;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ProjectId4?> ProjectIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [JsonPropertyName("project_id")]
        public ProjectId4? ProjectId { get { return this.ProjectIdOption; } set { this.ProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of TaskId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TaskId3?> TaskIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [JsonPropertyName("task_id")]
        public TaskId3? TaskId { get { return this.TaskIdOption; } set { this.TaskIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Attachment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> AttachmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachment
        /// </summary>
        [JsonPropertyName("attachment")]
        public Dictionary<string, Object>? Attachment { get { return this.AttachmentOption; } set { this.AttachmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of UidsToNotify
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> UidsToNotifyOption { get; private set; }

        /// <summary>
        /// Gets or Sets UidsToNotify
        /// </summary>
        [JsonPropertyName("uids_to_notify")]
        public List<int>? UidsToNotify { get { return this.UidsToNotifyOption; } set { this.UidsToNotifyOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TodoistAppsApiRestCommentsBody1 {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("  UidsToNotify: ").Append(UidsToNotify).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Content (string) maxLength
            if (this.Content != null && this.Content.Length > 15000)
            {
                yield return new ValidationResult("Invalid value for Content, length must be less than 15000.", new [] { "Content" });
            }

            // Content (string) minLength
            if (this.Content != null && this.Content.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Content, length must be greater than 1.", new [] { "Content" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TodoistAppsApiRestCommentsBody1" />
    /// </summary>
    public class TodoistAppsApiRestCommentsBody1JsonConverter : JsonConverter<TodoistAppsApiRestCommentsBody1>
    {
        /// <summary>
        /// Deserializes json to <see cref="TodoistAppsApiRestCommentsBody1" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TodoistAppsApiRestCommentsBody1 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> content = default;
            Option<ProjectId4?> projectId = default;
            Option<TaskId3?> taskId = default;
            Option<Dictionary<string, Object>?> attachment = default;
            Option<List<int>?> uidsToNotify = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "project_id":
                            projectId = new Option<ProjectId4?>(JsonSerializer.Deserialize<ProjectId4>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "task_id":
                            taskId = new Option<TaskId3?>(JsonSerializer.Deserialize<TaskId3>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attachment":
                            attachment = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "uids_to_notify":
                            uidsToNotify = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class TodoistAppsApiRestCommentsBody1.", nameof(content));

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class TodoistAppsApiRestCommentsBody1.");

            return new TodoistAppsApiRestCommentsBody1(content.Value!, projectId, taskId, attachment, uidsToNotify);
        }

        /// <summary>
        /// Serializes a <see cref="TodoistAppsApiRestCommentsBody1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="todoistAppsApiRestCommentsBody1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TodoistAppsApiRestCommentsBody1 todoistAppsApiRestCommentsBody1, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, todoistAppsApiRestCommentsBody1, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TodoistAppsApiRestCommentsBody1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="todoistAppsApiRestCommentsBody1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TodoistAppsApiRestCommentsBody1 todoistAppsApiRestCommentsBody1, JsonSerializerOptions jsonSerializerOptions)
        {
            if (todoistAppsApiRestCommentsBody1.Content == null)
                throw new ArgumentNullException(nameof(todoistAppsApiRestCommentsBody1.Content), "Property is required for class TodoistAppsApiRestCommentsBody1.");

            writer.WriteString("content", todoistAppsApiRestCommentsBody1.Content);

            if (todoistAppsApiRestCommentsBody1.ProjectIdOption.IsSet)
                if (todoistAppsApiRestCommentsBody1.ProjectIdOption.Value != null)
                {
                    writer.WritePropertyName("project_id");
                    JsonSerializer.Serialize(writer, todoistAppsApiRestCommentsBody1.ProjectId, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("project_id");
            if (todoistAppsApiRestCommentsBody1.TaskIdOption.IsSet)
                if (todoistAppsApiRestCommentsBody1.TaskIdOption.Value != null)
                {
                    writer.WritePropertyName("task_id");
                    JsonSerializer.Serialize(writer, todoistAppsApiRestCommentsBody1.TaskId, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("task_id");
            if (todoistAppsApiRestCommentsBody1.AttachmentOption.IsSet)
                if (todoistAppsApiRestCommentsBody1.AttachmentOption.Value != null)
                {
                    writer.WritePropertyName("attachment");
                    JsonSerializer.Serialize(writer, todoistAppsApiRestCommentsBody1.Attachment, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachment");
            if (todoistAppsApiRestCommentsBody1.UidsToNotifyOption.IsSet)
                if (todoistAppsApiRestCommentsBody1.UidsToNotifyOption.Value != null)
                {
                    writer.WritePropertyName("uids_to_notify");
                    JsonSerializer.Serialize(writer, todoistAppsApiRestCommentsBody1.UidsToNotify, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("uids_to_notify");
        }
    }
}
