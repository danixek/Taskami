// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Indicates who can see a project
    /// </summary>
    /// <value>Indicates who can see a project</value>
    public enum ProjectVisibility
    {
        /// <summary>
        /// Enum Restricted for value: restricted
        /// </summary>
        Restricted = 1,

        /// <summary>
        /// Enum Team for value: team
        /// </summary>
        Team = 2,

        /// <summary>
        /// Enum Public for value: public
        /// </summary>
        Public = 3
    }

    /// <summary>
    /// Converts <see cref="ProjectVisibility"/> to and from the JSON value
    /// </summary>
    public static class ProjectVisibilityValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ProjectVisibility"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProjectVisibility FromString(string value)
        {
            if (value.Equals("restricted"))
                return ProjectVisibility.Restricted;

            if (value.Equals("team"))
                return ProjectVisibility.Team;

            if (value.Equals("public"))
                return ProjectVisibility.Public;

            throw new NotImplementedException($"Could not convert value to type ProjectVisibility: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ProjectVisibility"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProjectVisibility? FromStringOrDefault(string value)
        {
            if (value.Equals("restricted"))
                return ProjectVisibility.Restricted;

            if (value.Equals("team"))
                return ProjectVisibility.Team;

            if (value.Equals("public"))
                return ProjectVisibility.Public;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ProjectVisibility"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ProjectVisibility value)
        {
            if (value == ProjectVisibility.Restricted)
                return "restricted";

            if (value == ProjectVisibility.Team)
                return "team";

            if (value == ProjectVisibility.Public)
                return "public";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProjectVisibility"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ProjectVisibilityJsonConverter : JsonConverter<ProjectVisibility>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ProjectVisibility Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ProjectVisibility? result = rawValue == null
                ? null
                : ProjectVisibilityValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ProjectVisibility to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="projectVisibility"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ProjectVisibility projectVisibility, JsonSerializerOptions options)
        {
            writer.WriteStringValue(projectVisibility.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProjectVisibility"/>
    /// </summary>
    public class ProjectVisibilityNullableJsonConverter : JsonConverter<ProjectVisibility?>
    {
        /// <summary>
        /// Returns a ProjectVisibility from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ProjectVisibility? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ProjectVisibility? result = rawValue == null
                ? null
                : ProjectVisibilityValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="projectVisibility"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ProjectVisibility? projectVisibility, JsonSerializerOptions options)
        {
            writer.WriteStringValue(projectVisibility?.ToString() ?? "null");
        }
    }
}
