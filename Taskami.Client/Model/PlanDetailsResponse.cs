// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PlanDetailsResponse
    /// </summary>
    public partial class PlanDetailsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanDetailsResponse" /> class.
        /// </summary>
        /// <param name="currentMemberCount">currentMemberCount</param>
        /// <param name="currentPlan">currentPlan</param>
        /// <param name="currentPlanStatus">currentPlanStatus</param>
        /// <param name="currentActiveProjects">currentActiveProjects</param>
        /// <param name="maximumActiveProjects">maximumActiveProjects</param>
        /// <param name="priceList">priceList</param>
        /// <param name="workspaceId">workspaceId</param>
        /// <param name="isTrialing">isTrialing</param>
        /// <param name="cancelAtPeriodEnd">cancelAtPeriodEnd</param>
        /// <param name="hasTrialed">hasTrialed</param>
        /// <param name="hasBillingPortal">hasBillingPortal</param>
        /// <param name="hasBillingPortalSwitchToAnnual">hasBillingPortalSwitchToAnnual</param>
        /// <param name="downgradeAt">downgradeAt</param>
        /// <param name="trialEndsAt">trialEndsAt</param>
        /// <param name="planPrice">planPrice</param>
        [JsonConstructor]
        public PlanDetailsResponse(int currentMemberCount, CurrentPlanEnum currentPlan, CurrentPlanStatusEnum currentPlanStatus, int currentActiveProjects, int maximumActiveProjects, List<FormattedPriceListing> priceList, int workspaceId, bool isTrialing, bool cancelAtPeriodEnd, bool hasTrialed, bool hasBillingPortal, bool hasBillingPortalSwitchToAnnual, string? downgradeAt = default, string? trialEndsAt = default, PlanPrice? planPrice = default)
        {
            CurrentMemberCount = currentMemberCount;
            CurrentPlan = currentPlan;
            CurrentPlanStatus = currentPlanStatus;
            CurrentActiveProjects = currentActiveProjects;
            MaximumActiveProjects = maximumActiveProjects;
            PriceList = priceList;
            WorkspaceId = workspaceId;
            IsTrialing = isTrialing;
            CancelAtPeriodEnd = cancelAtPeriodEnd;
            HasTrialed = hasTrialed;
            HasBillingPortal = hasBillingPortal;
            HasBillingPortalSwitchToAnnual = hasBillingPortalSwitchToAnnual;
            DowngradeAt = downgradeAt;
            TrialEndsAt = trialEndsAt;
            PlanPrice = planPrice;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines CurrentPlan
        /// </summary>
        public enum CurrentPlanEnum
        {
            /// <summary>
            /// Enum Business for value: Business
            /// </summary>
            Business = 1,

            /// <summary>
            /// Enum Starter for value: Starter
            /// </summary>
            Starter = 2
        }

        /// <summary>
        /// Returns a <see cref="CurrentPlanEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CurrentPlanEnum CurrentPlanEnumFromString(string value)
        {
            if (value.Equals("Business"))
                return CurrentPlanEnum.Business;

            if (value.Equals("Starter"))
                return CurrentPlanEnum.Starter;

            throw new NotImplementedException($"Could not convert value to type CurrentPlanEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CurrentPlanEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CurrentPlanEnum? CurrentPlanEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Business"))
                return CurrentPlanEnum.Business;

            if (value.Equals("Starter"))
                return CurrentPlanEnum.Starter;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CurrentPlanEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CurrentPlanEnumToJsonValue(CurrentPlanEnum value)
        {
            if (value == CurrentPlanEnum.Business)
                return "Business";

            if (value == CurrentPlanEnum.Starter)
                return "Starter";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets CurrentPlan
        /// </summary>
        [JsonPropertyName("current_plan")]
        public CurrentPlanEnum CurrentPlan { get; set; }

        /// <summary>
        /// Defines CurrentPlanStatus
        /// </summary>
        public enum CurrentPlanStatusEnum
        {
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            Active = 1,

            /// <summary>
            /// Enum Downgraded for value: Downgraded
            /// </summary>
            Downgraded = 2,

            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            Cancelled = 3,

            /// <summary>
            /// Enum NeverSubscribed for value: NeverSubscribed
            /// </summary>
            NeverSubscribed = 4
        }

        /// <summary>
        /// Returns a <see cref="CurrentPlanStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CurrentPlanStatusEnum CurrentPlanStatusEnumFromString(string value)
        {
            if (value.Equals("Active"))
                return CurrentPlanStatusEnum.Active;

            if (value.Equals("Downgraded"))
                return CurrentPlanStatusEnum.Downgraded;

            if (value.Equals("Cancelled"))
                return CurrentPlanStatusEnum.Cancelled;

            if (value.Equals("NeverSubscribed"))
                return CurrentPlanStatusEnum.NeverSubscribed;

            throw new NotImplementedException($"Could not convert value to type CurrentPlanStatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CurrentPlanStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CurrentPlanStatusEnum? CurrentPlanStatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Active"))
                return CurrentPlanStatusEnum.Active;

            if (value.Equals("Downgraded"))
                return CurrentPlanStatusEnum.Downgraded;

            if (value.Equals("Cancelled"))
                return CurrentPlanStatusEnum.Cancelled;

            if (value.Equals("NeverSubscribed"))
                return CurrentPlanStatusEnum.NeverSubscribed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CurrentPlanStatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CurrentPlanStatusEnumToJsonValue(CurrentPlanStatusEnum value)
        {
            if (value == CurrentPlanStatusEnum.Active)
                return "Active";

            if (value == CurrentPlanStatusEnum.Downgraded)
                return "Downgraded";

            if (value == CurrentPlanStatusEnum.Cancelled)
                return "Cancelled";

            if (value == CurrentPlanStatusEnum.NeverSubscribed)
                return "NeverSubscribed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets CurrentPlanStatus
        /// </summary>
        [JsonPropertyName("current_plan_status")]
        public CurrentPlanStatusEnum CurrentPlanStatus { get; set; }

        /// <summary>
        /// Gets or Sets CurrentMemberCount
        /// </summary>
        [JsonPropertyName("current_member_count")]
        public int CurrentMemberCount { get; set; }

        /// <summary>
        /// Gets or Sets CurrentActiveProjects
        /// </summary>
        [JsonPropertyName("current_active_projects")]
        public int CurrentActiveProjects { get; set; }

        /// <summary>
        /// Gets or Sets MaximumActiveProjects
        /// </summary>
        [JsonPropertyName("maximum_active_projects")]
        public int MaximumActiveProjects { get; set; }

        /// <summary>
        /// Gets or Sets PriceList
        /// </summary>
        [JsonPropertyName("price_list")]
        public List<FormattedPriceListing> PriceList { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceId
        /// </summary>
        [JsonPropertyName("workspace_id")]
        public int WorkspaceId { get; set; }

        /// <summary>
        /// Gets or Sets IsTrialing
        /// </summary>
        [JsonPropertyName("is_trialing")]
        public bool IsTrialing { get; set; }

        /// <summary>
        /// Gets or Sets CancelAtPeriodEnd
        /// </summary>
        [JsonPropertyName("cancel_at_period_end")]
        public bool CancelAtPeriodEnd { get; set; }

        /// <summary>
        /// Gets or Sets HasTrialed
        /// </summary>
        [JsonPropertyName("has_trialed")]
        public bool HasTrialed { get; set; }

        /// <summary>
        /// Gets or Sets HasBillingPortal
        /// </summary>
        [JsonPropertyName("has_billing_portal")]
        public bool HasBillingPortal { get; set; }

        /// <summary>
        /// Gets or Sets HasBillingPortalSwitchToAnnual
        /// </summary>
        [JsonPropertyName("has_billing_portal_switch_to_annual")]
        public bool HasBillingPortalSwitchToAnnual { get; set; }

        /// <summary>
        /// Gets or Sets DowngradeAt
        /// </summary>
        [JsonPropertyName("downgrade_at")]
        public string? DowngradeAt { get; set; }

        /// <summary>
        /// Gets or Sets TrialEndsAt
        /// </summary>
        [JsonPropertyName("trial_ends_at")]
        public string? TrialEndsAt { get; set; }

        /// <summary>
        /// Gets or Sets PlanPrice
        /// </summary>
        [JsonPropertyName("plan_price")]
        public PlanPrice? PlanPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlanDetailsResponse {\n");
            sb.Append("  CurrentMemberCount: ").Append(CurrentMemberCount).Append("\n");
            sb.Append("  CurrentPlan: ").Append(CurrentPlan).Append("\n");
            sb.Append("  CurrentPlanStatus: ").Append(CurrentPlanStatus).Append("\n");
            sb.Append("  CurrentActiveProjects: ").Append(CurrentActiveProjects).Append("\n");
            sb.Append("  MaximumActiveProjects: ").Append(MaximumActiveProjects).Append("\n");
            sb.Append("  PriceList: ").Append(PriceList).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("  IsTrialing: ").Append(IsTrialing).Append("\n");
            sb.Append("  CancelAtPeriodEnd: ").Append(CancelAtPeriodEnd).Append("\n");
            sb.Append("  HasTrialed: ").Append(HasTrialed).Append("\n");
            sb.Append("  HasBillingPortal: ").Append(HasBillingPortal).Append("\n");
            sb.Append("  HasBillingPortalSwitchToAnnual: ").Append(HasBillingPortalSwitchToAnnual).Append("\n");
            sb.Append("  DowngradeAt: ").Append(DowngradeAt).Append("\n");
            sb.Append("  TrialEndsAt: ").Append(TrialEndsAt).Append("\n");
            sb.Append("  PlanPrice: ").Append(PlanPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlanDetailsResponse" />
    /// </summary>
    public class PlanDetailsResponseJsonConverter : JsonConverter<PlanDetailsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlanDetailsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlanDetailsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> currentMemberCount = default;
            Option<PlanDetailsResponse.CurrentPlanEnum?> currentPlan = default;
            Option<PlanDetailsResponse.CurrentPlanStatusEnum?> currentPlanStatus = default;
            Option<int?> currentActiveProjects = default;
            Option<int?> maximumActiveProjects = default;
            Option<List<FormattedPriceListing>?> priceList = default;
            Option<int?> workspaceId = default;
            Option<bool?> isTrialing = default;
            Option<bool?> cancelAtPeriodEnd = default;
            Option<bool?> hasTrialed = default;
            Option<bool?> hasBillingPortal = default;
            Option<bool?> hasBillingPortalSwitchToAnnual = default;
            Option<string?> downgradeAt = default;
            Option<string?> trialEndsAt = default;
            Option<PlanPrice?> planPrice = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "current_member_count":
                            currentMemberCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "current_plan":
                            string? currentPlanRawValue = utf8JsonReader.GetString();
                            if (currentPlanRawValue != null)
                                currentPlan = new Option<PlanDetailsResponse.CurrentPlanEnum?>(PlanDetailsResponse.CurrentPlanEnumFromStringOrDefault(currentPlanRawValue));
                            break;
                        case "current_plan_status":
                            string? currentPlanStatusRawValue = utf8JsonReader.GetString();
                            if (currentPlanStatusRawValue != null)
                                currentPlanStatus = new Option<PlanDetailsResponse.CurrentPlanStatusEnum?>(PlanDetailsResponse.CurrentPlanStatusEnumFromStringOrDefault(currentPlanStatusRawValue));
                            break;
                        case "current_active_projects":
                            currentActiveProjects = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "maximum_active_projects":
                            maximumActiveProjects = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "price_list":
                            priceList = new Option<List<FormattedPriceListing>?>(JsonSerializer.Deserialize<List<FormattedPriceListing>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "workspace_id":
                            workspaceId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_trialing":
                            isTrialing = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "cancel_at_period_end":
                            cancelAtPeriodEnd = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "has_trialed":
                            hasTrialed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "has_billing_portal":
                            hasBillingPortal = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "has_billing_portal_switch_to_annual":
                            hasBillingPortalSwitchToAnnual = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "downgrade_at":
                            downgradeAt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "trial_ends_at":
                            trialEndsAt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "plan_price":
                            planPrice = new Option<PlanPrice?>(JsonSerializer.Deserialize<PlanPrice>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!currentMemberCount.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(currentMemberCount));

            if (!currentPlan.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(currentPlan));

            if (!currentPlanStatus.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(currentPlanStatus));

            if (!currentActiveProjects.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(currentActiveProjects));

            if (!maximumActiveProjects.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(maximumActiveProjects));

            if (!priceList.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(priceList));

            if (!workspaceId.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(workspaceId));

            if (!isTrialing.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(isTrialing));

            if (!cancelAtPeriodEnd.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(cancelAtPeriodEnd));

            if (!hasTrialed.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(hasTrialed));

            if (!hasBillingPortal.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(hasBillingPortal));

            if (!hasBillingPortalSwitchToAnnual.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(hasBillingPortalSwitchToAnnual));

            if (!downgradeAt.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(downgradeAt));

            if (!trialEndsAt.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(trialEndsAt));

            if (!planPrice.IsSet)
                throw new ArgumentException("Property is required for class PlanDetailsResponse.", nameof(planPrice));

            if (currentMemberCount.IsSet && currentMemberCount.Value == null)
                throw new ArgumentNullException(nameof(currentMemberCount), "Property is not nullable for class PlanDetailsResponse.");

            if (currentPlan.IsSet && currentPlan.Value == null)
                throw new ArgumentNullException(nameof(currentPlan), "Property is not nullable for class PlanDetailsResponse.");

            if (currentPlanStatus.IsSet && currentPlanStatus.Value == null)
                throw new ArgumentNullException(nameof(currentPlanStatus), "Property is not nullable for class PlanDetailsResponse.");

            if (currentActiveProjects.IsSet && currentActiveProjects.Value == null)
                throw new ArgumentNullException(nameof(currentActiveProjects), "Property is not nullable for class PlanDetailsResponse.");

            if (maximumActiveProjects.IsSet && maximumActiveProjects.Value == null)
                throw new ArgumentNullException(nameof(maximumActiveProjects), "Property is not nullable for class PlanDetailsResponse.");

            if (priceList.IsSet && priceList.Value == null)
                throw new ArgumentNullException(nameof(priceList), "Property is not nullable for class PlanDetailsResponse.");

            if (workspaceId.IsSet && workspaceId.Value == null)
                throw new ArgumentNullException(nameof(workspaceId), "Property is not nullable for class PlanDetailsResponse.");

            if (isTrialing.IsSet && isTrialing.Value == null)
                throw new ArgumentNullException(nameof(isTrialing), "Property is not nullable for class PlanDetailsResponse.");

            if (cancelAtPeriodEnd.IsSet && cancelAtPeriodEnd.Value == null)
                throw new ArgumentNullException(nameof(cancelAtPeriodEnd), "Property is not nullable for class PlanDetailsResponse.");

            if (hasTrialed.IsSet && hasTrialed.Value == null)
                throw new ArgumentNullException(nameof(hasTrialed), "Property is not nullable for class PlanDetailsResponse.");

            if (hasBillingPortal.IsSet && hasBillingPortal.Value == null)
                throw new ArgumentNullException(nameof(hasBillingPortal), "Property is not nullable for class PlanDetailsResponse.");

            if (hasBillingPortalSwitchToAnnual.IsSet && hasBillingPortalSwitchToAnnual.Value == null)
                throw new ArgumentNullException(nameof(hasBillingPortalSwitchToAnnual), "Property is not nullable for class PlanDetailsResponse.");

            return new PlanDetailsResponse(currentMemberCount.Value!.Value!, currentPlan.Value!.Value!, currentPlanStatus.Value!.Value!, currentActiveProjects.Value!.Value!, maximumActiveProjects.Value!.Value!, priceList.Value!, workspaceId.Value!.Value!, isTrialing.Value!.Value!, cancelAtPeriodEnd.Value!.Value!, hasTrialed.Value!.Value!, hasBillingPortal.Value!.Value!, hasBillingPortalSwitchToAnnual.Value!.Value!, downgradeAt.Value!, trialEndsAt.Value!, planPrice.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PlanDetailsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="planDetailsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlanDetailsResponse planDetailsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, planDetailsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlanDetailsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="planDetailsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlanDetailsResponse planDetailsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (planDetailsResponse.PriceList == null)
                throw new ArgumentNullException(nameof(planDetailsResponse.PriceList), "Property is required for class PlanDetailsResponse.");

            writer.WriteNumber("current_member_count", planDetailsResponse.CurrentMemberCount);

            var currentPlanRawValue = PlanDetailsResponse.CurrentPlanEnumToJsonValue(planDetailsResponse.CurrentPlan);
            writer.WriteString("current_plan", currentPlanRawValue);
            var currentPlanStatusRawValue = PlanDetailsResponse.CurrentPlanStatusEnumToJsonValue(planDetailsResponse.CurrentPlanStatus);
            writer.WriteString("current_plan_status", currentPlanStatusRawValue);
            writer.WriteNumber("current_active_projects", planDetailsResponse.CurrentActiveProjects);

            writer.WriteNumber("maximum_active_projects", planDetailsResponse.MaximumActiveProjects);

            writer.WritePropertyName("price_list");
            JsonSerializer.Serialize(writer, planDetailsResponse.PriceList, jsonSerializerOptions);
            writer.WriteNumber("workspace_id", planDetailsResponse.WorkspaceId);

            writer.WriteBoolean("is_trialing", planDetailsResponse.IsTrialing);

            writer.WriteBoolean("cancel_at_period_end", planDetailsResponse.CancelAtPeriodEnd);

            writer.WriteBoolean("has_trialed", planDetailsResponse.HasTrialed);

            writer.WriteBoolean("has_billing_portal", planDetailsResponse.HasBillingPortal);

            writer.WriteBoolean("has_billing_portal_switch_to_annual", planDetailsResponse.HasBillingPortalSwitchToAnnual);

            if (planDetailsResponse.DowngradeAt != null)
                writer.WriteString("downgrade_at", planDetailsResponse.DowngradeAt);
            else
                writer.WriteNull("downgrade_at");

            if (planDetailsResponse.TrialEndsAt != null)
                writer.WriteString("trial_ends_at", planDetailsResponse.TrialEndsAt);
            else
                writer.WriteNull("trial_ends_at");

            if (planDetailsResponse.PlanPrice != null)
            {
                writer.WritePropertyName("plan_price");
                JsonSerializer.Serialize(writer, planDetailsResponse.PlanPrice, jsonSerializerOptions);
            }
            else
                writer.WriteNull("plan_price");
        }
    }
}
