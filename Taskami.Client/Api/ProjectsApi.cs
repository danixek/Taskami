// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IProjectsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ProjectsApiEvents Events { get; }

        /// <summary>
        /// Archive Project
        /// </summary>
        /// <remarks>
        /// Marks a project as archived. For personal projects, this will archive it just for the initiating user (leaving it visible to any other collaborators). For workspace projects, this will archive it for all workspace users, removing it from view.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse"/>&gt;</returns>
        Task<IArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse> ArchiveProjectApiV1ProjectsProjectIdArchivePostAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Archive Project
        /// </summary>
        /// <remarks>
        /// Marks a project as archived. For personal projects, this will archive it just for the initiating user (leaving it visible to any other collaborators). For workspace projects, this will archive it for all workspace users, removing it from view.
        /// </remarks>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse"/>?&gt;</returns>
        Task<IArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse?> ArchiveProjectApiV1ProjectsProjectIdArchivePostOrDefaultAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Project
        /// </summary>
        /// <remarks>
        /// Creates a new project and returns it
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiRestProjectsBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProjectApiV1ProjectsPostApiResponse"/>&gt;</returns>
        Task<ICreateProjectApiV1ProjectsPostApiResponse> CreateProjectApiV1ProjectsPostAsync(TodoistAppsApiRestProjectsBody1 todoistAppsApiRestProjectsBody1, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Project
        /// </summary>
        /// <remarks>
        /// Creates a new project and returns it
        /// </remarks>
        /// <param name="todoistAppsApiRestProjectsBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProjectApiV1ProjectsPostApiResponse"/>?&gt;</returns>
        Task<ICreateProjectApiV1ProjectsPostApiResponse?> CreateProjectApiV1ProjectsPostOrDefaultAsync(TodoistAppsApiRestProjectsBody1 todoistAppsApiRestProjectsBody1, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Project
        /// </summary>
        /// <remarks>
        /// Deletes a project and all of its sections and tasks.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteProjectApiV1ProjectsProjectIdDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteProjectApiV1ProjectsProjectIdDeleteApiResponse> DeleteProjectApiV1ProjectsProjectIdDeleteAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Project
        /// </summary>
        /// <remarks>
        /// Deletes a project and all of its sections and tasks.
        /// </remarks>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteProjectApiV1ProjectsProjectIdDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteProjectApiV1ProjectsProjectIdDeleteApiResponse?> DeleteProjectApiV1ProjectsProjectIdDeleteOrDefaultAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Archived
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetArchivedApiV1ProjectsArchivedGetApiResponse"/>&gt;</returns>
        Task<IGetArchivedApiV1ProjectsArchivedGetApiResponse> GetArchivedApiV1ProjectsArchivedGetAsync(Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Archived
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetArchivedApiV1ProjectsArchivedGetApiResponse"/>?&gt;</returns>
        Task<IGetArchivedApiV1ProjectsArchivedGetApiResponse?> GetArchivedApiV1ProjectsArchivedGetOrDefaultAsync(Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Project
        /// </summary>
        /// <remarks>
        /// Returns a project object related to the given ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectApiV1ProjectsProjectIdGetApiResponse"/>&gt;</returns>
        Task<IGetProjectApiV1ProjectsProjectIdGetApiResponse> GetProjectApiV1ProjectsProjectIdGetAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Project
        /// </summary>
        /// <remarks>
        /// Returns a project object related to the given ID
        /// </remarks>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectApiV1ProjectsProjectIdGetApiResponse"/>?&gt;</returns>
        Task<IGetProjectApiV1ProjectsProjectIdGetApiResponse?> GetProjectApiV1ProjectsProjectIdGetOrDefaultAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Project Collaborators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="publicKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse"/>&gt;</returns>
        Task<IGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse> GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetAsync(ProjectId3 projectId, Option<string?> cursor = default, Option<int> limit = default, Option<string?> publicKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Project Collaborators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="projectId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="publicKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse"/>?&gt;</returns>
        Task<IGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse?> GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetOrDefaultAsync(ProjectId3 projectId, Option<string?> cursor = default, Option<int> limit = default, Option<string?> publicKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Projects
        /// </summary>
        /// <remarks>
        /// Returns a list containing all active user projects
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectsApiV1ProjectsGetApiResponse"/>&gt;</returns>
        Task<IGetProjectsApiV1ProjectsGetApiResponse> GetProjectsApiV1ProjectsGetAsync(Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Projects
        /// </summary>
        /// <remarks>
        /// Returns a list containing all active user projects
        /// </remarks>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectsApiV1ProjectsGetApiResponse"/>?&gt;</returns>
        Task<IGetProjectsApiV1ProjectsGetApiResponse?> GetProjectsApiV1ProjectsGetOrDefaultAsync(Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Join
        /// </summary>
        /// <remarks>
        /// _Only used for workspaces_  This endpoint is used to join a workspace project by a workspace_user and is only usable by the workspace user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJoinApiV1ProjectsProjectIdJoinPostApiResponse"/>&gt;</returns>
        Task<IJoinApiV1ProjectsProjectIdJoinPostApiResponse> JoinApiV1ProjectsProjectIdJoinPostAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Join
        /// </summary>
        /// <remarks>
        /// _Only used for workspaces_  This endpoint is used to join a workspace project by a workspace_user and is only usable by the workspace user.
        /// </remarks>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJoinApiV1ProjectsProjectIdJoinPostApiResponse"/>?&gt;</returns>
        Task<IJoinApiV1ProjectsProjectIdJoinPostApiResponse?> JoinApiV1ProjectsProjectIdJoinPostOrDefaultAsync(string projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unarchive Project
        /// </summary>
        /// <remarks>
        /// Marks a previously archived project as active again. For personal projects, this will make the project visible again for the initiating user. For workspace projects, this will make the project visible again for all applicable workspace users.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse"/>&gt;</returns>
        Task<IUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse> UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unarchive Project
        /// </summary>
        /// <remarks>
        /// Marks a previously archived project as active again. For personal projects, this will make the project visible again for the initiating user. For workspace projects, this will make the project visible again for all applicable workspace users.
        /// </remarks>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse"/>?&gt;</returns>
        Task<IUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse?> UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostOrDefaultAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Project
        /// </summary>
        /// <remarks>
        /// Updated a project and return it
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="todoistAppsApiRestProjectsBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateProjectApiV1ProjectsProjectIdPostApiResponse"/>&gt;</returns>
        Task<IUpdateProjectApiV1ProjectsProjectIdPostApiResponse> UpdateProjectApiV1ProjectsProjectIdPostAsync(ProjectId3 projectId, TodoistAppsApiRestProjectsBody2 todoistAppsApiRestProjectsBody2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Project
        /// </summary>
        /// <remarks>
        /// Updated a project and return it
        /// </remarks>
        /// <param name="projectId"></param>
        /// <param name="todoistAppsApiRestProjectsBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateProjectApiV1ProjectsProjectIdPostApiResponse"/>?&gt;</returns>
        Task<IUpdateProjectApiV1ProjectsProjectIdPostApiResponse?> UpdateProjectApiV1ProjectsProjectIdPostOrDefaultAsync(ProjectId3 projectId, TodoistAppsApiRestProjectsBody2 todoistAppsApiRestProjectsBody2, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse"/>
    /// </summary>
    public interface IArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ResponseArchiveProjectApiV1ProjectsProjectIdArchivePost?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ICreateProjectApiV1ProjectsPostApiResponse"/>
    /// </summary>
    public interface ICreateProjectApiV1ProjectsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ResponseCreateProjectApiV1ProjectsPost?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteProjectApiV1ProjectsProjectIdDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteProjectApiV1ProjectsProjectIdDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetArchivedApiV1ProjectsArchivedGetApiResponse"/>
    /// </summary>
    public interface IGetArchivedApiV1ProjectsArchivedGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PaginatedListAnnotatedProjectV1ViewFieldInfoAnnotationNoneTypeRequiredTrueExamplesIdNameChildOrderParentIdColorCollapsedIsArchivedIsDeletedViewStyle?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetProjectApiV1ProjectsProjectIdGetApiResponse"/>
    /// </summary>
    public interface IGetProjectApiV1ProjectsProjectIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ResponseGetProjectApiV1ProjectsProjectIdGet?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse"/>
    /// </summary>
    public interface IGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PaginatedListCollaborator?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetProjectsApiV1ProjectsGetApiResponse"/>
    /// </summary>
    public interface IGetProjectsApiV1ProjectsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PaginatedListAnnotatedUnionPersonalProjectSyncViewWorkspaceProjectSyncViewFieldInfoAnnotationNoneTypeRequiredTrueTitleProjectObject?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IJoinApiV1ProjectsProjectIdJoinPostApiResponse"/>
    /// </summary>
    public interface IJoinApiV1ProjectsProjectIdJoinPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.GetDataV2Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse"/>
    /// </summary>
    public interface IUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ResponseUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateProjectApiV1ProjectsProjectIdPostApiResponse"/>
    /// </summary>
    public interface IUpdateProjectApiV1ProjectsProjectIdPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ResponseUpdateProjectApiV1ProjectsProjectIdPost?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ProjectsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnArchiveProjectApiV1ProjectsProjectIdArchivePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorArchiveProjectApiV1ProjectsProjectIdArchivePost;

        internal void ExecuteOnArchiveProjectApiV1ProjectsProjectIdArchivePost(ProjectsApi.ArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse apiResponse)
        {
            OnArchiveProjectApiV1ProjectsProjectIdArchivePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorArchiveProjectApiV1ProjectsProjectIdArchivePost(Exception exception)
        {
            OnErrorArchiveProjectApiV1ProjectsProjectIdArchivePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateProjectApiV1ProjectsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateProjectApiV1ProjectsPost;

        internal void ExecuteOnCreateProjectApiV1ProjectsPost(ProjectsApi.CreateProjectApiV1ProjectsPostApiResponse apiResponse)
        {
            OnCreateProjectApiV1ProjectsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateProjectApiV1ProjectsPost(Exception exception)
        {
            OnErrorCreateProjectApiV1ProjectsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteProjectApiV1ProjectsProjectIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteProjectApiV1ProjectsProjectIdDelete;

        internal void ExecuteOnDeleteProjectApiV1ProjectsProjectIdDelete(ProjectsApi.DeleteProjectApiV1ProjectsProjectIdDeleteApiResponse apiResponse)
        {
            OnDeleteProjectApiV1ProjectsProjectIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteProjectApiV1ProjectsProjectIdDelete(Exception exception)
        {
            OnErrorDeleteProjectApiV1ProjectsProjectIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetArchivedApiV1ProjectsArchivedGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetArchivedApiV1ProjectsArchivedGet;

        internal void ExecuteOnGetArchivedApiV1ProjectsArchivedGet(ProjectsApi.GetArchivedApiV1ProjectsArchivedGetApiResponse apiResponse)
        {
            OnGetArchivedApiV1ProjectsArchivedGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetArchivedApiV1ProjectsArchivedGet(Exception exception)
        {
            OnErrorGetArchivedApiV1ProjectsArchivedGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetProjectApiV1ProjectsProjectIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetProjectApiV1ProjectsProjectIdGet;

        internal void ExecuteOnGetProjectApiV1ProjectsProjectIdGet(ProjectsApi.GetProjectApiV1ProjectsProjectIdGetApiResponse apiResponse)
        {
            OnGetProjectApiV1ProjectsProjectIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProjectApiV1ProjectsProjectIdGet(Exception exception)
        {
            OnErrorGetProjectApiV1ProjectsProjectIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet;

        internal void ExecuteOnGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet(ProjectsApi.GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse apiResponse)
        {
            OnGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet(Exception exception)
        {
            OnErrorGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetProjectsApiV1ProjectsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetProjectsApiV1ProjectsGet;

        internal void ExecuteOnGetProjectsApiV1ProjectsGet(ProjectsApi.GetProjectsApiV1ProjectsGetApiResponse apiResponse)
        {
            OnGetProjectsApiV1ProjectsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProjectsApiV1ProjectsGet(Exception exception)
        {
            OnErrorGetProjectsApiV1ProjectsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJoinApiV1ProjectsProjectIdJoinPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJoinApiV1ProjectsProjectIdJoinPost;

        internal void ExecuteOnJoinApiV1ProjectsProjectIdJoinPost(ProjectsApi.JoinApiV1ProjectsProjectIdJoinPostApiResponse apiResponse)
        {
            OnJoinApiV1ProjectsProjectIdJoinPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJoinApiV1ProjectsProjectIdJoinPost(Exception exception)
        {
            OnErrorJoinApiV1ProjectsProjectIdJoinPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost;

        internal void ExecuteOnUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost(ProjectsApi.UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse apiResponse)
        {
            OnUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost(Exception exception)
        {
            OnErrorUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateProjectApiV1ProjectsProjectIdPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateProjectApiV1ProjectsProjectIdPost;

        internal void ExecuteOnUpdateProjectApiV1ProjectsProjectIdPost(ProjectsApi.UpdateProjectApiV1ProjectsProjectIdPostApiResponse apiResponse)
        {
            OnUpdateProjectApiV1ProjectsProjectIdPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateProjectApiV1ProjectsProjectIdPost(Exception exception)
        {
            OnErrorUpdateProjectApiV1ProjectsProjectIdPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ProjectsApi : IProjectsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ProjectsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ProjectsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi(ILogger<ProjectsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ProjectsApiEvents projectsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ProjectsApi>();
            HttpClient = httpClient;
            Events = projectsApiEvents;
        }

        partial void FormatArchiveProjectApiV1ProjectsProjectIdArchivePost(ProjectId3 projectId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="projectId"></param>
        /// <returns></returns>
        private void ValidateArchiveProjectApiV1ProjectsProjectIdArchivePost(ProjectId3 projectId)
        {
            if (projectId == null)
                throw new ArgumentNullException(nameof(projectId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        private void AfterArchiveProjectApiV1ProjectsProjectIdArchivePostDefaultImplementation(IArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse apiResponseLocalVar, ProjectId3 projectId)
        {
            bool suppressDefaultLog = false;
            AfterArchiveProjectApiV1ProjectsProjectIdArchivePost(ref suppressDefaultLog, apiResponseLocalVar, projectId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        partial void AfterArchiveProjectApiV1ProjectsProjectIdArchivePost(ref bool suppressDefaultLog, IArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse apiResponseLocalVar, ProjectId3 projectId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        private void OnErrorArchiveProjectApiV1ProjectsProjectIdArchivePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorArchiveProjectApiV1ProjectsProjectIdArchivePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        partial void OnErrorArchiveProjectApiV1ProjectsProjectIdArchivePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId);

        /// <summary>
        /// Archive Project Marks a project as archived. For personal projects, this will archive it just for the initiating user (leaving it visible to any other collaborators). For workspace projects, this will archive it for all workspace users, removing it from view.
        /// </summary>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse"/>&gt;</returns>
        public async Task<IArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse?> ArchiveProjectApiV1ProjectsProjectIdArchivePostOrDefaultAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ArchiveProjectApiV1ProjectsProjectIdArchivePostAsync(projectId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Archive Project Marks a project as archived. For personal projects, this will archive it just for the initiating user (leaving it visible to any other collaborators). For workspace projects, this will archive it for all workspace users, removing it from view.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse"/>&gt;</returns>
        public async Task<IArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse> ArchiveProjectApiV1ProjectsProjectIdArchivePostAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateArchiveProjectApiV1ProjectsProjectIdArchivePost(projectId);

                FormatArchiveProjectApiV1ProjectsProjectIdArchivePost(projectId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/projects/{project_id}/archive"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/projects/{project_id}/archive");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bproject_id%7D", Uri.EscapeDataString(projectId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse>();

                        ArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/projects/{project_id}/archive", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterArchiveProjectApiV1ProjectsProjectIdArchivePostDefaultImplementation(apiResponseLocalVar, projectId);

                        Events.ExecuteOnArchiveProjectApiV1ProjectsProjectIdArchivePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorArchiveProjectApiV1ProjectsProjectIdArchivePostDefaultImplementation(e, "/api/v1/projects/{project_id}/archive", uriBuilderLocalVar.Path, projectId);
                Events.ExecuteOnErrorArchiveProjectApiV1ProjectsProjectIdArchivePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse"/>
        /// </summary>
        public partial class ArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse(ILogger<ArchiveProjectApiV1ProjectsProjectIdArchivePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ResponseArchiveProjectApiV1ProjectsProjectIdArchivePost? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ResponseArchiveProjectApiV1ProjectsProjectIdArchivePost>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ResponseArchiveProjectApiV1ProjectsProjectIdArchivePost? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateProjectApiV1ProjectsPost(TodoistAppsApiRestProjectsBody1 todoistAppsApiRestProjectsBody1);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="todoistAppsApiRestProjectsBody1"></param>
        /// <returns></returns>
        private void ValidateCreateProjectApiV1ProjectsPost(TodoistAppsApiRestProjectsBody1 todoistAppsApiRestProjectsBody1)
        {
            if (todoistAppsApiRestProjectsBody1 == null)
                throw new ArgumentNullException(nameof(todoistAppsApiRestProjectsBody1));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiRestProjectsBody1"></param>
        private void AfterCreateProjectApiV1ProjectsPostDefaultImplementation(ICreateProjectApiV1ProjectsPostApiResponse apiResponseLocalVar, TodoistAppsApiRestProjectsBody1 todoistAppsApiRestProjectsBody1)
        {
            bool suppressDefaultLog = false;
            AfterCreateProjectApiV1ProjectsPost(ref suppressDefaultLog, apiResponseLocalVar, todoistAppsApiRestProjectsBody1);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiRestProjectsBody1"></param>
        partial void AfterCreateProjectApiV1ProjectsPost(ref bool suppressDefaultLog, ICreateProjectApiV1ProjectsPostApiResponse apiResponseLocalVar, TodoistAppsApiRestProjectsBody1 todoistAppsApiRestProjectsBody1);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiRestProjectsBody1"></param>
        private void OnErrorCreateProjectApiV1ProjectsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiRestProjectsBody1 todoistAppsApiRestProjectsBody1)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateProjectApiV1ProjectsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, todoistAppsApiRestProjectsBody1);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiRestProjectsBody1"></param>
        partial void OnErrorCreateProjectApiV1ProjectsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiRestProjectsBody1 todoistAppsApiRestProjectsBody1);

        /// <summary>
        /// Create Project Creates a new project and returns it
        /// </summary>
        /// <param name="todoistAppsApiRestProjectsBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProjectApiV1ProjectsPostApiResponse"/>&gt;</returns>
        public async Task<ICreateProjectApiV1ProjectsPostApiResponse?> CreateProjectApiV1ProjectsPostOrDefaultAsync(TodoistAppsApiRestProjectsBody1 todoistAppsApiRestProjectsBody1, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateProjectApiV1ProjectsPostAsync(todoistAppsApiRestProjectsBody1, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Project Creates a new project and returns it
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiRestProjectsBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProjectApiV1ProjectsPostApiResponse"/>&gt;</returns>
        public async Task<ICreateProjectApiV1ProjectsPostApiResponse> CreateProjectApiV1ProjectsPostAsync(TodoistAppsApiRestProjectsBody1 todoistAppsApiRestProjectsBody1, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateProjectApiV1ProjectsPost(todoistAppsApiRestProjectsBody1);

                FormatCreateProjectApiV1ProjectsPost(todoistAppsApiRestProjectsBody1);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/projects"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/projects");

                    httpRequestMessageLocalVar.Content = (todoistAppsApiRestProjectsBody1 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(todoistAppsApiRestProjectsBody1, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateProjectApiV1ProjectsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateProjectApiV1ProjectsPostApiResponse>();

                        CreateProjectApiV1ProjectsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/projects", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateProjectApiV1ProjectsPostDefaultImplementation(apiResponseLocalVar, todoistAppsApiRestProjectsBody1);

                        Events.ExecuteOnCreateProjectApiV1ProjectsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateProjectApiV1ProjectsPostDefaultImplementation(e, "/api/v1/projects", uriBuilderLocalVar.Path, todoistAppsApiRestProjectsBody1);
                Events.ExecuteOnErrorCreateProjectApiV1ProjectsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateProjectApiV1ProjectsPostApiResponse"/>
        /// </summary>
        public partial class CreateProjectApiV1ProjectsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateProjectApiV1ProjectsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateProjectApiV1ProjectsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateProjectApiV1ProjectsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateProjectApiV1ProjectsPostApiResponse(ILogger<CreateProjectApiV1ProjectsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ResponseCreateProjectApiV1ProjectsPost? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ResponseCreateProjectApiV1ProjectsPost>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ResponseCreateProjectApiV1ProjectsPost? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteProjectApiV1ProjectsProjectIdDelete(ProjectId3 projectId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="projectId"></param>
        /// <returns></returns>
        private void ValidateDeleteProjectApiV1ProjectsProjectIdDelete(ProjectId3 projectId)
        {
            if (projectId == null)
                throw new ArgumentNullException(nameof(projectId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        private void AfterDeleteProjectApiV1ProjectsProjectIdDeleteDefaultImplementation(IDeleteProjectApiV1ProjectsProjectIdDeleteApiResponse apiResponseLocalVar, ProjectId3 projectId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteProjectApiV1ProjectsProjectIdDelete(ref suppressDefaultLog, apiResponseLocalVar, projectId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        partial void AfterDeleteProjectApiV1ProjectsProjectIdDelete(ref bool suppressDefaultLog, IDeleteProjectApiV1ProjectsProjectIdDeleteApiResponse apiResponseLocalVar, ProjectId3 projectId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        private void OnErrorDeleteProjectApiV1ProjectsProjectIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteProjectApiV1ProjectsProjectIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        partial void OnErrorDeleteProjectApiV1ProjectsProjectIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId);

        /// <summary>
        /// Delete Project Deletes a project and all of its sections and tasks.
        /// </summary>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteProjectApiV1ProjectsProjectIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteProjectApiV1ProjectsProjectIdDeleteApiResponse?> DeleteProjectApiV1ProjectsProjectIdDeleteOrDefaultAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteProjectApiV1ProjectsProjectIdDeleteAsync(projectId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Project Deletes a project and all of its sections and tasks.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteProjectApiV1ProjectsProjectIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteProjectApiV1ProjectsProjectIdDeleteApiResponse> DeleteProjectApiV1ProjectsProjectIdDeleteAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteProjectApiV1ProjectsProjectIdDelete(projectId);

                FormatDeleteProjectApiV1ProjectsProjectIdDelete(projectId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/projects/{project_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/projects/{project_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bproject_id%7D", Uri.EscapeDataString(projectId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteProjectApiV1ProjectsProjectIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteProjectApiV1ProjectsProjectIdDeleteApiResponse>();

                        DeleteProjectApiV1ProjectsProjectIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/projects/{project_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteProjectApiV1ProjectsProjectIdDeleteDefaultImplementation(apiResponseLocalVar, projectId);

                        Events.ExecuteOnDeleteProjectApiV1ProjectsProjectIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteProjectApiV1ProjectsProjectIdDeleteDefaultImplementation(e, "/api/v1/projects/{project_id}", uriBuilderLocalVar.Path, projectId);
                Events.ExecuteOnErrorDeleteProjectApiV1ProjectsProjectIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteProjectApiV1ProjectsProjectIdDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteProjectApiV1ProjectsProjectIdDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteProjectApiV1ProjectsProjectIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteProjectApiV1ProjectsProjectIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteProjectApiV1ProjectsProjectIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteProjectApiV1ProjectsProjectIdDeleteApiResponse(ILogger<DeleteProjectApiV1ProjectsProjectIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetArchivedApiV1ProjectsArchivedGet(ref Option<string?> cursor, ref Option<int> limit);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void AfterGetArchivedApiV1ProjectsArchivedGetDefaultImplementation(IGetArchivedApiV1ProjectsArchivedGetApiResponse apiResponseLocalVar, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterGetArchivedApiV1ProjectsArchivedGet(ref suppressDefaultLog, apiResponseLocalVar, cursor, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void AfterGetArchivedApiV1ProjectsArchivedGet(ref bool suppressDefaultLog, IGetArchivedApiV1ProjectsArchivedGetApiResponse apiResponseLocalVar, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void OnErrorGetArchivedApiV1ProjectsArchivedGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetArchivedApiV1ProjectsArchivedGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, cursor, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void OnErrorGetArchivedApiV1ProjectsArchivedGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Get Archived 
        /// </summary>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetArchivedApiV1ProjectsArchivedGetApiResponse"/>&gt;</returns>
        public async Task<IGetArchivedApiV1ProjectsArchivedGetApiResponse?> GetArchivedApiV1ProjectsArchivedGetOrDefaultAsync(Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetArchivedApiV1ProjectsArchivedGetAsync(cursor, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Archived 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetArchivedApiV1ProjectsArchivedGetApiResponse"/>&gt;</returns>
        public async Task<IGetArchivedApiV1ProjectsArchivedGetApiResponse> GetArchivedApiV1ProjectsArchivedGetAsync(Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetArchivedApiV1ProjectsArchivedGet(ref cursor, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/projects/archived"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/projects/archived");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (cursor.IsSet)
                        parseQueryStringLocalVar["cursor"] = ClientUtils.ParameterToString(cursor.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetArchivedApiV1ProjectsArchivedGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetArchivedApiV1ProjectsArchivedGetApiResponse>();

                        GetArchivedApiV1ProjectsArchivedGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/projects/archived", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetArchivedApiV1ProjectsArchivedGetDefaultImplementation(apiResponseLocalVar, cursor, limit);

                        Events.ExecuteOnGetArchivedApiV1ProjectsArchivedGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetArchivedApiV1ProjectsArchivedGetDefaultImplementation(e, "/api/v1/projects/archived", uriBuilderLocalVar.Path, cursor, limit);
                Events.ExecuteOnErrorGetArchivedApiV1ProjectsArchivedGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetArchivedApiV1ProjectsArchivedGetApiResponse"/>
        /// </summary>
        public partial class GetArchivedApiV1ProjectsArchivedGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetArchivedApiV1ProjectsArchivedGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetArchivedApiV1ProjectsArchivedGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetArchivedApiV1ProjectsArchivedGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetArchivedApiV1ProjectsArchivedGetApiResponse(ILogger<GetArchivedApiV1ProjectsArchivedGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PaginatedListAnnotatedProjectV1ViewFieldInfoAnnotationNoneTypeRequiredTrueExamplesIdNameChildOrderParentIdColorCollapsedIsArchivedIsDeletedViewStyle? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PaginatedListAnnotatedProjectV1ViewFieldInfoAnnotationNoneTypeRequiredTrueExamplesIdNameChildOrderParentIdColorCollapsedIsArchivedIsDeletedViewStyle>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PaginatedListAnnotatedProjectV1ViewFieldInfoAnnotationNoneTypeRequiredTrueExamplesIdNameChildOrderParentIdColorCollapsedIsArchivedIsDeletedViewStyle? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProjectApiV1ProjectsProjectIdGet(ProjectId3 projectId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="projectId"></param>
        /// <returns></returns>
        private void ValidateGetProjectApiV1ProjectsProjectIdGet(ProjectId3 projectId)
        {
            if (projectId == null)
                throw new ArgumentNullException(nameof(projectId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        private void AfterGetProjectApiV1ProjectsProjectIdGetDefaultImplementation(IGetProjectApiV1ProjectsProjectIdGetApiResponse apiResponseLocalVar, ProjectId3 projectId)
        {
            bool suppressDefaultLog = false;
            AfterGetProjectApiV1ProjectsProjectIdGet(ref suppressDefaultLog, apiResponseLocalVar, projectId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        partial void AfterGetProjectApiV1ProjectsProjectIdGet(ref bool suppressDefaultLog, IGetProjectApiV1ProjectsProjectIdGetApiResponse apiResponseLocalVar, ProjectId3 projectId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        private void OnErrorGetProjectApiV1ProjectsProjectIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetProjectApiV1ProjectsProjectIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        partial void OnErrorGetProjectApiV1ProjectsProjectIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId);

        /// <summary>
        /// Get Project Returns a project object related to the given ID
        /// </summary>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectApiV1ProjectsProjectIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetProjectApiV1ProjectsProjectIdGetApiResponse?> GetProjectApiV1ProjectsProjectIdGetOrDefaultAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProjectApiV1ProjectsProjectIdGetAsync(projectId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Project Returns a project object related to the given ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectApiV1ProjectsProjectIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetProjectApiV1ProjectsProjectIdGetApiResponse> GetProjectApiV1ProjectsProjectIdGetAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProjectApiV1ProjectsProjectIdGet(projectId);

                FormatGetProjectApiV1ProjectsProjectIdGet(projectId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/projects/{project_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/projects/{project_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bproject_id%7D", Uri.EscapeDataString(projectId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProjectApiV1ProjectsProjectIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProjectApiV1ProjectsProjectIdGetApiResponse>();

                        GetProjectApiV1ProjectsProjectIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/projects/{project_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProjectApiV1ProjectsProjectIdGetDefaultImplementation(apiResponseLocalVar, projectId);

                        Events.ExecuteOnGetProjectApiV1ProjectsProjectIdGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProjectApiV1ProjectsProjectIdGetDefaultImplementation(e, "/api/v1/projects/{project_id}", uriBuilderLocalVar.Path, projectId);
                Events.ExecuteOnErrorGetProjectApiV1ProjectsProjectIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProjectApiV1ProjectsProjectIdGetApiResponse"/>
        /// </summary>
        public partial class GetProjectApiV1ProjectsProjectIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetProjectApiV1ProjectsProjectIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProjectApiV1ProjectsProjectIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProjectApiV1ProjectsProjectIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProjectApiV1ProjectsProjectIdGetApiResponse(ILogger<GetProjectApiV1ProjectsProjectIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ResponseGetProjectApiV1ProjectsProjectIdGet? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ResponseGetProjectApiV1ProjectsProjectIdGet>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ResponseGetProjectApiV1ProjectsProjectIdGet? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet(ProjectId3 projectId, ref Option<string?> cursor, ref Option<int> limit, ref Option<string?> publicKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="projectId"></param>
        /// <returns></returns>
        private void ValidateGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet(ProjectId3 projectId)
        {
            if (projectId == null)
                throw new ArgumentNullException(nameof(projectId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        /// <param name="publicKey"></param>
        private void AfterGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetDefaultImplementation(IGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse apiResponseLocalVar, ProjectId3 projectId, Option<string?> cursor, Option<int> limit, Option<string?> publicKey)
        {
            bool suppressDefaultLog = false;
            AfterGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet(ref suppressDefaultLog, apiResponseLocalVar, projectId, cursor, limit, publicKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        /// <param name="publicKey"></param>
        partial void AfterGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet(ref bool suppressDefaultLog, IGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse apiResponseLocalVar, ProjectId3 projectId, Option<string?> cursor, Option<int> limit, Option<string?> publicKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        /// <param name="publicKey"></param>
        private void OnErrorGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId, Option<string?> cursor, Option<int> limit, Option<string?> publicKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectId, cursor, limit, publicKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        /// <param name="publicKey"></param>
        partial void OnErrorGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId, Option<string?> cursor, Option<int> limit, Option<string?> publicKey);

        /// <summary>
        /// Get Project Collaborators 
        /// </summary>
        /// <param name="projectId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="publicKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse"/>&gt;</returns>
        public async Task<IGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse?> GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetOrDefaultAsync(ProjectId3 projectId, Option<string?> cursor = default, Option<int> limit = default, Option<string?> publicKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetAsync(projectId, cursor, limit, publicKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Project Collaborators 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="publicKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse"/>&gt;</returns>
        public async Task<IGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse> GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetAsync(ProjectId3 projectId, Option<string?> cursor = default, Option<int> limit = default, Option<string?> publicKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet(projectId);

                FormatGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet(projectId, ref cursor, ref limit, ref publicKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/projects/{project_id}/collaborators"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/projects/{project_id}/collaborators");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bproject_id%7D", Uri.EscapeDataString(projectId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (cursor.IsSet)
                        parseQueryStringLocalVar["cursor"] = ClientUtils.ParameterToString(cursor.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (publicKey.IsSet)
                        parseQueryStringLocalVar["public_key"] = ClientUtils.ParameterToString(publicKey.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse>();

                        GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/projects/{project_id}/collaborators", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetDefaultImplementation(apiResponseLocalVar, projectId, cursor, limit, publicKey);

                        Events.ExecuteOnGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetDefaultImplementation(e, "/api/v1/projects/{project_id}/collaborators", uriBuilderLocalVar.Path, projectId, cursor, limit, publicKey);
                Events.ExecuteOnErrorGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse"/>
        /// </summary>
        public partial class GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse(ILogger<GetProjectCollaboratorsApiV1ProjectsProjectIdCollaboratorsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PaginatedListCollaborator? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PaginatedListCollaborator>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PaginatedListCollaborator? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProjectsApiV1ProjectsGet(ref Option<string?> cursor, ref Option<int> limit);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void AfterGetProjectsApiV1ProjectsGetDefaultImplementation(IGetProjectsApiV1ProjectsGetApiResponse apiResponseLocalVar, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterGetProjectsApiV1ProjectsGet(ref suppressDefaultLog, apiResponseLocalVar, cursor, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void AfterGetProjectsApiV1ProjectsGet(ref bool suppressDefaultLog, IGetProjectsApiV1ProjectsGetApiResponse apiResponseLocalVar, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void OnErrorGetProjectsApiV1ProjectsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetProjectsApiV1ProjectsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, cursor, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void OnErrorGetProjectsApiV1ProjectsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Get Projects Returns a list containing all active user projects
        /// </summary>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectsApiV1ProjectsGetApiResponse"/>&gt;</returns>
        public async Task<IGetProjectsApiV1ProjectsGetApiResponse?> GetProjectsApiV1ProjectsGetOrDefaultAsync(Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProjectsApiV1ProjectsGetAsync(cursor, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Projects Returns a list containing all active user projects
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectsApiV1ProjectsGetApiResponse"/>&gt;</returns>
        public async Task<IGetProjectsApiV1ProjectsGetApiResponse> GetProjectsApiV1ProjectsGetAsync(Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetProjectsApiV1ProjectsGet(ref cursor, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/projects"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/projects");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (cursor.IsSet)
                        parseQueryStringLocalVar["cursor"] = ClientUtils.ParameterToString(cursor.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProjectsApiV1ProjectsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProjectsApiV1ProjectsGetApiResponse>();

                        GetProjectsApiV1ProjectsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/projects", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProjectsApiV1ProjectsGetDefaultImplementation(apiResponseLocalVar, cursor, limit);

                        Events.ExecuteOnGetProjectsApiV1ProjectsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProjectsApiV1ProjectsGetDefaultImplementation(e, "/api/v1/projects", uriBuilderLocalVar.Path, cursor, limit);
                Events.ExecuteOnErrorGetProjectsApiV1ProjectsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProjectsApiV1ProjectsGetApiResponse"/>
        /// </summary>
        public partial class GetProjectsApiV1ProjectsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetProjectsApiV1ProjectsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProjectsApiV1ProjectsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProjectsApiV1ProjectsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProjectsApiV1ProjectsGetApiResponse(ILogger<GetProjectsApiV1ProjectsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PaginatedListAnnotatedUnionPersonalProjectSyncViewWorkspaceProjectSyncViewFieldInfoAnnotationNoneTypeRequiredTrueTitleProjectObject? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PaginatedListAnnotatedUnionPersonalProjectSyncViewWorkspaceProjectSyncViewFieldInfoAnnotationNoneTypeRequiredTrueTitleProjectObject>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PaginatedListAnnotatedUnionPersonalProjectSyncViewWorkspaceProjectSyncViewFieldInfoAnnotationNoneTypeRequiredTrueTitleProjectObject? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJoinApiV1ProjectsProjectIdJoinPost(ref string projectId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="projectId"></param>
        /// <returns></returns>
        private void ValidateJoinApiV1ProjectsProjectIdJoinPost(string projectId)
        {
            if (projectId == null)
                throw new ArgumentNullException(nameof(projectId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        private void AfterJoinApiV1ProjectsProjectIdJoinPostDefaultImplementation(IJoinApiV1ProjectsProjectIdJoinPostApiResponse apiResponseLocalVar, string projectId)
        {
            bool suppressDefaultLog = false;
            AfterJoinApiV1ProjectsProjectIdJoinPost(ref suppressDefaultLog, apiResponseLocalVar, projectId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        partial void AfterJoinApiV1ProjectsProjectIdJoinPost(ref bool suppressDefaultLog, IJoinApiV1ProjectsProjectIdJoinPostApiResponse apiResponseLocalVar, string projectId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        private void OnErrorJoinApiV1ProjectsProjectIdJoinPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string projectId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJoinApiV1ProjectsProjectIdJoinPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        partial void OnErrorJoinApiV1ProjectsProjectIdJoinPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string projectId);

        /// <summary>
        /// Join _Only used for workspaces_  This endpoint is used to join a workspace project by a workspace_user and is only usable by the workspace user.
        /// </summary>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJoinApiV1ProjectsProjectIdJoinPostApiResponse"/>&gt;</returns>
        public async Task<IJoinApiV1ProjectsProjectIdJoinPostApiResponse?> JoinApiV1ProjectsProjectIdJoinPostOrDefaultAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JoinApiV1ProjectsProjectIdJoinPostAsync(projectId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Join _Only used for workspaces_  This endpoint is used to join a workspace project by a workspace_user and is only usable by the workspace user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJoinApiV1ProjectsProjectIdJoinPostApiResponse"/>&gt;</returns>
        public async Task<IJoinApiV1ProjectsProjectIdJoinPostApiResponse> JoinApiV1ProjectsProjectIdJoinPostAsync(string projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJoinApiV1ProjectsProjectIdJoinPost(projectId);

                FormatJoinApiV1ProjectsProjectIdJoinPost(ref projectId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/projects/{project_id}/join"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/projects/{project_id}/join");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bproject_id%7D", Uri.EscapeDataString(projectId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JoinApiV1ProjectsProjectIdJoinPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JoinApiV1ProjectsProjectIdJoinPostApiResponse>();

                        JoinApiV1ProjectsProjectIdJoinPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/projects/{project_id}/join", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJoinApiV1ProjectsProjectIdJoinPostDefaultImplementation(apiResponseLocalVar, projectId);

                        Events.ExecuteOnJoinApiV1ProjectsProjectIdJoinPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJoinApiV1ProjectsProjectIdJoinPostDefaultImplementation(e, "/api/v1/projects/{project_id}/join", uriBuilderLocalVar.Path, projectId);
                Events.ExecuteOnErrorJoinApiV1ProjectsProjectIdJoinPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JoinApiV1ProjectsProjectIdJoinPostApiResponse"/>
        /// </summary>
        public partial class JoinApiV1ProjectsProjectIdJoinPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IJoinApiV1ProjectsProjectIdJoinPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JoinApiV1ProjectsProjectIdJoinPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JoinApiV1ProjectsProjectIdJoinPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JoinApiV1ProjectsProjectIdJoinPostApiResponse(ILogger<JoinApiV1ProjectsProjectIdJoinPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.GetDataV2Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.GetDataV2Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.GetDataV2Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost(ProjectId3 projectId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="projectId"></param>
        /// <returns></returns>
        private void ValidateUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost(ProjectId3 projectId)
        {
            if (projectId == null)
                throw new ArgumentNullException(nameof(projectId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        private void AfterUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostDefaultImplementation(IUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse apiResponseLocalVar, ProjectId3 projectId)
        {
            bool suppressDefaultLog = false;
            AfterUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost(ref suppressDefaultLog, apiResponseLocalVar, projectId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        partial void AfterUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost(ref bool suppressDefaultLog, IUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse apiResponseLocalVar, ProjectId3 projectId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        private void OnErrorUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        partial void OnErrorUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId);

        /// <summary>
        /// Unarchive Project Marks a previously archived project as active again. For personal projects, this will make the project visible again for the initiating user. For workspace projects, this will make the project visible again for all applicable workspace users.
        /// </summary>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse"/>&gt;</returns>
        public async Task<IUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse?> UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostOrDefaultAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostAsync(projectId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Unarchive Project Marks a previously archived project as active again. For personal projects, this will make the project visible again for the initiating user. For workspace projects, this will make the project visible again for all applicable workspace users.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse"/>&gt;</returns>
        public async Task<IUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse> UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostAsync(ProjectId3 projectId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost(projectId);

                FormatUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost(projectId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/projects/{project_id}/unarchive"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/projects/{project_id}/unarchive");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bproject_id%7D", Uri.EscapeDataString(projectId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse>();

                        UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/projects/{project_id}/unarchive", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostDefaultImplementation(apiResponseLocalVar, projectId);

                        Events.ExecuteOnUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostDefaultImplementation(e, "/api/v1/projects/{project_id}/unarchive", uriBuilderLocalVar.Path, projectId);
                Events.ExecuteOnErrorUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse"/>
        /// </summary>
        public partial class UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse(ILogger<UnarchiveProjectApiV1ProjectsProjectIdUnarchivePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ResponseUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ResponseUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ResponseUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateProjectApiV1ProjectsProjectIdPost(ProjectId3 projectId, TodoistAppsApiRestProjectsBody2 todoistAppsApiRestProjectsBody2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="projectId"></param>
        /// <param name="todoistAppsApiRestProjectsBody2"></param>
        /// <returns></returns>
        private void ValidateUpdateProjectApiV1ProjectsProjectIdPost(ProjectId3 projectId, TodoistAppsApiRestProjectsBody2 todoistAppsApiRestProjectsBody2)
        {
            if (projectId == null)
                throw new ArgumentNullException(nameof(projectId));

            if (todoistAppsApiRestProjectsBody2 == null)
                throw new ArgumentNullException(nameof(todoistAppsApiRestProjectsBody2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="todoistAppsApiRestProjectsBody2"></param>
        private void AfterUpdateProjectApiV1ProjectsProjectIdPostDefaultImplementation(IUpdateProjectApiV1ProjectsProjectIdPostApiResponse apiResponseLocalVar, ProjectId3 projectId, TodoistAppsApiRestProjectsBody2 todoistAppsApiRestProjectsBody2)
        {
            bool suppressDefaultLog = false;
            AfterUpdateProjectApiV1ProjectsProjectIdPost(ref suppressDefaultLog, apiResponseLocalVar, projectId, todoistAppsApiRestProjectsBody2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="todoistAppsApiRestProjectsBody2"></param>
        partial void AfterUpdateProjectApiV1ProjectsProjectIdPost(ref bool suppressDefaultLog, IUpdateProjectApiV1ProjectsProjectIdPostApiResponse apiResponseLocalVar, ProjectId3 projectId, TodoistAppsApiRestProjectsBody2 todoistAppsApiRestProjectsBody2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="todoistAppsApiRestProjectsBody2"></param>
        private void OnErrorUpdateProjectApiV1ProjectsProjectIdPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId, TodoistAppsApiRestProjectsBody2 todoistAppsApiRestProjectsBody2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateProjectApiV1ProjectsProjectIdPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectId, todoistAppsApiRestProjectsBody2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="todoistAppsApiRestProjectsBody2"></param>
        partial void OnErrorUpdateProjectApiV1ProjectsProjectIdPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId, TodoistAppsApiRestProjectsBody2 todoistAppsApiRestProjectsBody2);

        /// <summary>
        /// Update Project Updated a project and return it
        /// </summary>
        /// <param name="projectId"></param>
        /// <param name="todoistAppsApiRestProjectsBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateProjectApiV1ProjectsProjectIdPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateProjectApiV1ProjectsProjectIdPostApiResponse?> UpdateProjectApiV1ProjectsProjectIdPostOrDefaultAsync(ProjectId3 projectId, TodoistAppsApiRestProjectsBody2 todoistAppsApiRestProjectsBody2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateProjectApiV1ProjectsProjectIdPostAsync(projectId, todoistAppsApiRestProjectsBody2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Project Updated a project and return it
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="todoistAppsApiRestProjectsBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateProjectApiV1ProjectsProjectIdPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateProjectApiV1ProjectsProjectIdPostApiResponse> UpdateProjectApiV1ProjectsProjectIdPostAsync(ProjectId3 projectId, TodoistAppsApiRestProjectsBody2 todoistAppsApiRestProjectsBody2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateProjectApiV1ProjectsProjectIdPost(projectId, todoistAppsApiRestProjectsBody2);

                FormatUpdateProjectApiV1ProjectsProjectIdPost(projectId, todoistAppsApiRestProjectsBody2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/projects/{project_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/projects/{project_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bproject_id%7D", Uri.EscapeDataString(projectId.ToString()));

                    httpRequestMessageLocalVar.Content = (todoistAppsApiRestProjectsBody2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(todoistAppsApiRestProjectsBody2, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateProjectApiV1ProjectsProjectIdPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateProjectApiV1ProjectsProjectIdPostApiResponse>();

                        UpdateProjectApiV1ProjectsProjectIdPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/projects/{project_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateProjectApiV1ProjectsProjectIdPostDefaultImplementation(apiResponseLocalVar, projectId, todoistAppsApiRestProjectsBody2);

                        Events.ExecuteOnUpdateProjectApiV1ProjectsProjectIdPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateProjectApiV1ProjectsProjectIdPostDefaultImplementation(e, "/api/v1/projects/{project_id}", uriBuilderLocalVar.Path, projectId, todoistAppsApiRestProjectsBody2);
                Events.ExecuteOnErrorUpdateProjectApiV1ProjectsProjectIdPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateProjectApiV1ProjectsProjectIdPostApiResponse"/>
        /// </summary>
        public partial class UpdateProjectApiV1ProjectsProjectIdPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateProjectApiV1ProjectsProjectIdPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateProjectApiV1ProjectsProjectIdPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateProjectApiV1ProjectsProjectIdPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateProjectApiV1ProjectsProjectIdPostApiResponse(ILogger<UpdateProjectApiV1ProjectsProjectIdPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ResponseUpdateProjectApiV1ProjectsProjectIdPost? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ResponseUpdateProjectApiV1ProjectsProjectIdPost>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ResponseUpdateProjectApiV1ProjectsProjectIdPost? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
