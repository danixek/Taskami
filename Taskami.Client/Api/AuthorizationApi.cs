// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAuthorizationApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AuthorizationApiEvents Events { get; }

        /// <summary>
        /// Migrate Personal Token
        /// </summary>
        /// <remarks>
        /// Tokens obtained via the old email/password authentication method can be migrated to the new OAuth access token. Migrating your users&#39; personal tokens will allow users to see your app in their Todoist Settings page and give them the ability to manage their app authorization.  A successful response has &#x60;200 OK&#x60; status and &#x60;application/json&#x60; Content-Type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsAppPlatformControllersAccessTokenBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse"/>&gt;</returns>
        Task<IMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse> MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostAsync(TodoistAppsAppPlatformControllersAccessTokenBody todoistAppsAppPlatformControllersAccessTokenBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Migrate Personal Token
        /// </summary>
        /// <remarks>
        /// Tokens obtained via the old email/password authentication method can be migrated to the new OAuth access token. Migrating your users&#39; personal tokens will allow users to see your app in their Todoist Settings page and give them the ability to manage their app authorization.  A successful response has &#x60;200 OK&#x60; status and &#x60;application/json&#x60; Content-Type.
        /// </remarks>
        /// <param name="todoistAppsAppPlatformControllersAccessTokenBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse"/>?&gt;</returns>
        Task<IMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse?> MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostOrDefaultAsync(TodoistAppsAppPlatformControllersAccessTokenBody todoistAppsAppPlatformControllersAccessTokenBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke Access Token Api
        /// </summary>
        /// <remarks>
        /// Revoke the access tokens obtained via OAuth
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="accessToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse"/>&gt;</returns>
        Task<IRevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse> RevokeAccessTokenApiApiV1AccessTokensDeleteAsync(string clientId, string clientSecret, string accessToken, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke Access Token Api
        /// </summary>
        /// <remarks>
        /// Revoke the access tokens obtained via OAuth
        /// </remarks>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="accessToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse"/>?&gt;</returns>
        Task<IRevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse?> RevokeAccessTokenApiApiV1AccessTokensDeleteOrDefaultAsync(string clientId, string clientSecret, string accessToken, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse"/>
    /// </summary>
    public interface IMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.MigratePersonalTokenResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IRevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse"/>
    /// </summary>
    public interface IRevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AuthorizationApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost;

        internal void ExecuteOnMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost(AuthorizationApi.MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse apiResponse)
        {
            OnMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost(Exception exception)
        {
            OnErrorMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRevokeAccessTokenApiApiV1AccessTokensDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRevokeAccessTokenApiApiV1AccessTokensDelete;

        internal void ExecuteOnRevokeAccessTokenApiApiV1AccessTokensDelete(AuthorizationApi.RevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse apiResponse)
        {
            OnRevokeAccessTokenApiApiV1AccessTokensDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRevokeAccessTokenApiApiV1AccessTokensDelete(Exception exception)
        {
            OnErrorRevokeAccessTokenApiApiV1AccessTokensDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AuthorizationApi : IAuthorizationApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AuthorizationApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AuthorizationApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorizationApi(ILogger<AuthorizationApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AuthorizationApiEvents authorizationApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AuthorizationApi>();
            HttpClient = httpClient;
            Events = authorizationApiEvents;
        }

        partial void FormatMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost(TodoistAppsAppPlatformControllersAccessTokenBody todoistAppsAppPlatformControllersAccessTokenBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="todoistAppsAppPlatformControllersAccessTokenBody"></param>
        /// <returns></returns>
        private void ValidateMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost(TodoistAppsAppPlatformControllersAccessTokenBody todoistAppsAppPlatformControllersAccessTokenBody)
        {
            if (todoistAppsAppPlatformControllersAccessTokenBody == null)
                throw new ArgumentNullException(nameof(todoistAppsAppPlatformControllersAccessTokenBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsAppPlatformControllersAccessTokenBody"></param>
        private void AfterMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostDefaultImplementation(IMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse apiResponseLocalVar, TodoistAppsAppPlatformControllersAccessTokenBody todoistAppsAppPlatformControllersAccessTokenBody)
        {
            bool suppressDefaultLog = false;
            AfterMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost(ref suppressDefaultLog, apiResponseLocalVar, todoistAppsAppPlatformControllersAccessTokenBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsAppPlatformControllersAccessTokenBody"></param>
        partial void AfterMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost(ref bool suppressDefaultLog, IMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse apiResponseLocalVar, TodoistAppsAppPlatformControllersAccessTokenBody todoistAppsAppPlatformControllersAccessTokenBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsAppPlatformControllersAccessTokenBody"></param>
        private void OnErrorMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsAppPlatformControllersAccessTokenBody todoistAppsAppPlatformControllersAccessTokenBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, todoistAppsAppPlatformControllersAccessTokenBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsAppPlatformControllersAccessTokenBody"></param>
        partial void OnErrorMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsAppPlatformControllersAccessTokenBody todoistAppsAppPlatformControllersAccessTokenBody);

        /// <summary>
        /// Migrate Personal Token Tokens obtained via the old email/password authentication method can be migrated to the new OAuth access token. Migrating your users&#39; personal tokens will allow users to see your app in their Todoist Settings page and give them the ability to manage their app authorization.  A successful response has &#x60;200 OK&#x60; status and &#x60;application/json&#x60; Content-Type.
        /// </summary>
        /// <param name="todoistAppsAppPlatformControllersAccessTokenBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse"/>&gt;</returns>
        public async Task<IMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse?> MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostOrDefaultAsync(TodoistAppsAppPlatformControllersAccessTokenBody todoistAppsAppPlatformControllersAccessTokenBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostAsync(todoistAppsAppPlatformControllersAccessTokenBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Migrate Personal Token Tokens obtained via the old email/password authentication method can be migrated to the new OAuth access token. Migrating your users&#39; personal tokens will allow users to see your app in their Todoist Settings page and give them the ability to manage their app authorization.  A successful response has &#x60;200 OK&#x60; status and &#x60;application/json&#x60; Content-Type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsAppPlatformControllersAccessTokenBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse"/>&gt;</returns>
        public async Task<IMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse> MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostAsync(TodoistAppsAppPlatformControllersAccessTokenBody todoistAppsAppPlatformControllersAccessTokenBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost(todoistAppsAppPlatformControllersAccessTokenBody);

                FormatMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost(todoistAppsAppPlatformControllersAccessTokenBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/access_tokens/migrate_personal_token"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/access_tokens/migrate_personal_token");

                    httpRequestMessageLocalVar.Content = (todoistAppsAppPlatformControllersAccessTokenBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(todoistAppsAppPlatformControllersAccessTokenBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse>();

                        MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/access_tokens/migrate_personal_token", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostDefaultImplementation(apiResponseLocalVar, todoistAppsAppPlatformControllersAccessTokenBody);

                        Events.ExecuteOnMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostDefaultImplementation(e, "/api/v1/access_tokens/migrate_personal_token", uriBuilderLocalVar.Path, todoistAppsAppPlatformControllersAccessTokenBody);
                Events.ExecuteOnErrorMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse"/>
        /// </summary>
        public partial class MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IMigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse(ILogger<MigratePersonalTokenApiV1AccessTokensMigratePersonalTokenPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.MigratePersonalTokenResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.MigratePersonalTokenResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.MigratePersonalTokenResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRevokeAccessTokenApiApiV1AccessTokensDelete(ref string clientId, ref string clientSecret, ref string accessToken);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="accessToken"></param>
        /// <returns></returns>
        private void ValidateRevokeAccessTokenApiApiV1AccessTokensDelete(string clientId, string clientSecret, string accessToken)
        {
            if (clientId == null)
                throw new ArgumentNullException(nameof(clientId));

            if (clientSecret == null)
                throw new ArgumentNullException(nameof(clientSecret));

            if (accessToken == null)
                throw new ArgumentNullException(nameof(accessToken));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="accessToken"></param>
        private void AfterRevokeAccessTokenApiApiV1AccessTokensDeleteDefaultImplementation(IRevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse apiResponseLocalVar, string clientId, string clientSecret, string accessToken)
        {
            bool suppressDefaultLog = false;
            AfterRevokeAccessTokenApiApiV1AccessTokensDelete(ref suppressDefaultLog, apiResponseLocalVar, clientId, clientSecret, accessToken);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="accessToken"></param>
        partial void AfterRevokeAccessTokenApiApiV1AccessTokensDelete(ref bool suppressDefaultLog, IRevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse apiResponseLocalVar, string clientId, string clientSecret, string accessToken);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="accessToken"></param>
        private void OnErrorRevokeAccessTokenApiApiV1AccessTokensDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string clientId, string clientSecret, string accessToken)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRevokeAccessTokenApiApiV1AccessTokensDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, clientId, clientSecret, accessToken);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="accessToken"></param>
        partial void OnErrorRevokeAccessTokenApiApiV1AccessTokensDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string clientId, string clientSecret, string accessToken);

        /// <summary>
        /// Revoke Access Token Api Revoke the access tokens obtained via OAuth
        /// </summary>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="accessToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse"/>&gt;</returns>
        public async Task<IRevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse?> RevokeAccessTokenApiApiV1AccessTokensDeleteOrDefaultAsync(string clientId, string clientSecret, string accessToken, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RevokeAccessTokenApiApiV1AccessTokensDeleteAsync(clientId, clientSecret, accessToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Revoke Access Token Api Revoke the access tokens obtained via OAuth
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="accessToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse"/>&gt;</returns>
        public async Task<IRevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse> RevokeAccessTokenApiApiV1AccessTokensDeleteAsync(string clientId, string clientSecret, string accessToken, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRevokeAccessTokenApiApiV1AccessTokensDelete(clientId, clientSecret, accessToken);

                FormatRevokeAccessTokenApiApiV1AccessTokensDelete(ref clientId, ref clientSecret, ref accessToken);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/access_tokens"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/access_tokens");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["client_id"] = ClientUtils.ParameterToString(clientId);
                    parseQueryStringLocalVar["client_secret"] = ClientUtils.ParameterToString(clientSecret);
                    parseQueryStringLocalVar["access_token"] = ClientUtils.ParameterToString(accessToken);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse>();

                        RevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/access_tokens", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRevokeAccessTokenApiApiV1AccessTokensDeleteDefaultImplementation(apiResponseLocalVar, clientId, clientSecret, accessToken);

                        Events.ExecuteOnRevokeAccessTokenApiApiV1AccessTokensDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRevokeAccessTokenApiApiV1AccessTokensDeleteDefaultImplementation(e, "/api/v1/access_tokens", uriBuilderLocalVar.Path, clientId, clientSecret, accessToken);
                Events.ExecuteOnErrorRevokeAccessTokenApiApiV1AccessTokensDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse"/>
        /// </summary>
        public partial class RevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IRevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse(ILogger<RevokeAccessTokenApiApiV1AccessTokensDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
