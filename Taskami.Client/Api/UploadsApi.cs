// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IUploadsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        UploadsApiEvents Events { get; }

        /// <summary>
        /// Delete Upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteUploadApiV1UploadsDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteUploadApiV1UploadsDeleteApiResponse> DeleteUploadApiV1UploadsDeleteAsync(string fileUrl, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="fileUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteUploadApiV1UploadsDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteUploadApiV1UploadsDeleteApiResponse?> DeleteUploadApiV1UploadsDeleteOrDefaultAsync(string fileUrl, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiSyncRestControllerBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadFileApiV1UploadsPostApiResponse"/>&gt;</returns>
        Task<IUploadFileApiV1UploadsPostApiResponse> UploadFileApiV1UploadsPostAsync(TodoistAppsApiSyncRestControllerBody2 todoistAppsApiSyncRestControllerBody2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="todoistAppsApiSyncRestControllerBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadFileApiV1UploadsPostApiResponse"/>?&gt;</returns>
        Task<IUploadFileApiV1UploadsPostApiResponse?> UploadFileApiV1UploadsPostOrDefaultAsync(TodoistAppsApiSyncRestControllerBody2 todoistAppsApiSyncRestControllerBody2, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteUploadApiV1UploadsDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteUploadApiV1UploadsDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<string?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IUploadFileApiV1UploadsPostApiResponse"/>
    /// </summary>
    public interface IUploadFileApiV1UploadsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UploadResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UploadsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteUploadApiV1UploadsDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteUploadApiV1UploadsDelete;

        internal void ExecuteOnDeleteUploadApiV1UploadsDelete(UploadsApi.DeleteUploadApiV1UploadsDeleteApiResponse apiResponse)
        {
            OnDeleteUploadApiV1UploadsDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteUploadApiV1UploadsDelete(Exception exception)
        {
            OnErrorDeleteUploadApiV1UploadsDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUploadFileApiV1UploadsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUploadFileApiV1UploadsPost;

        internal void ExecuteOnUploadFileApiV1UploadsPost(UploadsApi.UploadFileApiV1UploadsPostApiResponse apiResponse)
        {
            OnUploadFileApiV1UploadsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUploadFileApiV1UploadsPost(Exception exception)
        {
            OnErrorUploadFileApiV1UploadsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class UploadsApi : IUploadsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<UploadsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public UploadsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="UploadsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UploadsApi(ILogger<UploadsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, UploadsApiEvents uploadsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<UploadsApi>();
            HttpClient = httpClient;
            Events = uploadsApiEvents;
        }

        partial void FormatDeleteUploadApiV1UploadsDelete(ref string fileUrl);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fileUrl"></param>
        /// <returns></returns>
        private void ValidateDeleteUploadApiV1UploadsDelete(string fileUrl)
        {
            if (fileUrl == null)
                throw new ArgumentNullException(nameof(fileUrl));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fileUrl"></param>
        private void AfterDeleteUploadApiV1UploadsDeleteDefaultImplementation(IDeleteUploadApiV1UploadsDeleteApiResponse apiResponseLocalVar, string fileUrl)
        {
            bool suppressDefaultLog = false;
            AfterDeleteUploadApiV1UploadsDelete(ref suppressDefaultLog, apiResponseLocalVar, fileUrl);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fileUrl"></param>
        partial void AfterDeleteUploadApiV1UploadsDelete(ref bool suppressDefaultLog, IDeleteUploadApiV1UploadsDeleteApiResponse apiResponseLocalVar, string fileUrl);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fileUrl"></param>
        private void OnErrorDeleteUploadApiV1UploadsDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string fileUrl)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteUploadApiV1UploadsDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, fileUrl);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fileUrl"></param>
        partial void OnErrorDeleteUploadApiV1UploadsDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string fileUrl);

        /// <summary>
        /// Delete Upload 
        /// </summary>
        /// <param name="fileUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteUploadApiV1UploadsDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteUploadApiV1UploadsDeleteApiResponse?> DeleteUploadApiV1UploadsDeleteOrDefaultAsync(string fileUrl, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteUploadApiV1UploadsDeleteAsync(fileUrl, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Upload 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteUploadApiV1UploadsDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteUploadApiV1UploadsDeleteApiResponse> DeleteUploadApiV1UploadsDeleteAsync(string fileUrl, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteUploadApiV1UploadsDelete(fileUrl);

                FormatDeleteUploadApiV1UploadsDelete(ref fileUrl);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/uploads"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/uploads");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["file_url"] = ClientUtils.ParameterToString(fileUrl);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteUploadApiV1UploadsDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteUploadApiV1UploadsDeleteApiResponse>();

                        DeleteUploadApiV1UploadsDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/uploads", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteUploadApiV1UploadsDeleteDefaultImplementation(apiResponseLocalVar, fileUrl);

                        Events.ExecuteOnDeleteUploadApiV1UploadsDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteUploadApiV1UploadsDeleteDefaultImplementation(e, "/api/v1/uploads", uriBuilderLocalVar.Path, fileUrl);
                Events.ExecuteOnErrorDeleteUploadApiV1UploadsDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteUploadApiV1UploadsDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteUploadApiV1UploadsDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteUploadApiV1UploadsDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteUploadApiV1UploadsDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteUploadApiV1UploadsDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteUploadApiV1UploadsDeleteApiResponse(ILogger<DeleteUploadApiV1UploadsDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out string? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUploadFileApiV1UploadsPost(TodoistAppsApiSyncRestControllerBody2 todoistAppsApiSyncRestControllerBody2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="todoistAppsApiSyncRestControllerBody2"></param>
        /// <returns></returns>
        private void ValidateUploadFileApiV1UploadsPost(TodoistAppsApiSyncRestControllerBody2 todoistAppsApiSyncRestControllerBody2)
        {
            if (todoistAppsApiSyncRestControllerBody2 == null)
                throw new ArgumentNullException(nameof(todoistAppsApiSyncRestControllerBody2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiSyncRestControllerBody2"></param>
        private void AfterUploadFileApiV1UploadsPostDefaultImplementation(IUploadFileApiV1UploadsPostApiResponse apiResponseLocalVar, TodoistAppsApiSyncRestControllerBody2 todoistAppsApiSyncRestControllerBody2)
        {
            bool suppressDefaultLog = false;
            AfterUploadFileApiV1UploadsPost(ref suppressDefaultLog, apiResponseLocalVar, todoistAppsApiSyncRestControllerBody2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiSyncRestControllerBody2"></param>
        partial void AfterUploadFileApiV1UploadsPost(ref bool suppressDefaultLog, IUploadFileApiV1UploadsPostApiResponse apiResponseLocalVar, TodoistAppsApiSyncRestControllerBody2 todoistAppsApiSyncRestControllerBody2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiSyncRestControllerBody2"></param>
        private void OnErrorUploadFileApiV1UploadsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiSyncRestControllerBody2 todoistAppsApiSyncRestControllerBody2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUploadFileApiV1UploadsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, todoistAppsApiSyncRestControllerBody2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiSyncRestControllerBody2"></param>
        partial void OnErrorUploadFileApiV1UploadsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiSyncRestControllerBody2 todoistAppsApiSyncRestControllerBody2);

        /// <summary>
        /// Upload File 
        /// </summary>
        /// <param name="todoistAppsApiSyncRestControllerBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadFileApiV1UploadsPostApiResponse"/>&gt;</returns>
        public async Task<IUploadFileApiV1UploadsPostApiResponse?> UploadFileApiV1UploadsPostOrDefaultAsync(TodoistAppsApiSyncRestControllerBody2 todoistAppsApiSyncRestControllerBody2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadFileApiV1UploadsPostAsync(todoistAppsApiSyncRestControllerBody2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Upload File 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiSyncRestControllerBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadFileApiV1UploadsPostApiResponse"/>&gt;</returns>
        public async Task<IUploadFileApiV1UploadsPostApiResponse> UploadFileApiV1UploadsPostAsync(TodoistAppsApiSyncRestControllerBody2 todoistAppsApiSyncRestControllerBody2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadFileApiV1UploadsPost(todoistAppsApiSyncRestControllerBody2);

                FormatUploadFileApiV1UploadsPost(todoistAppsApiSyncRestControllerBody2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/uploads"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/uploads");

                    httpRequestMessageLocalVar.Content = (todoistAppsApiSyncRestControllerBody2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(todoistAppsApiSyncRestControllerBody2, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UploadFileApiV1UploadsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UploadFileApiV1UploadsPostApiResponse>();

                        UploadFileApiV1UploadsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/uploads", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUploadFileApiV1UploadsPostDefaultImplementation(apiResponseLocalVar, todoistAppsApiSyncRestControllerBody2);

                        Events.ExecuteOnUploadFileApiV1UploadsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadFileApiV1UploadsPostDefaultImplementation(e, "/api/v1/uploads", uriBuilderLocalVar.Path, todoistAppsApiSyncRestControllerBody2);
                Events.ExecuteOnErrorUploadFileApiV1UploadsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadFileApiV1UploadsPostApiResponse"/>
        /// </summary>
        public partial class UploadFileApiV1UploadsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUploadFileApiV1UploadsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UploadFileApiV1UploadsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UploadFileApiV1UploadsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadFileApiV1UploadsPostApiResponse(ILogger<UploadFileApiV1UploadsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UploadResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UploadResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UploadResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
