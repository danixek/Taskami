// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ILabelsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        LabelsApiEvents Events { get; }

        /// <summary>
        /// Create Label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiRestLabelsBody4"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateLabelApiV1LabelsPostApiResponse"/>&gt;</returns>
        Task<ICreateLabelApiV1LabelsPostApiResponse> CreateLabelApiV1LabelsPostAsync(TodoistAppsApiRestLabelsBody4 todoistAppsApiRestLabelsBody4, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="todoistAppsApiRestLabelsBody4"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateLabelApiV1LabelsPostApiResponse"/>?&gt;</returns>
        Task<ICreateLabelApiV1LabelsPostApiResponse?> CreateLabelApiV1LabelsPostOrDefaultAsync(TodoistAppsApiRestLabelsBody4 todoistAppsApiRestLabelsBody4, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Label
        /// </summary>
        /// <remarks>
        /// Deletes a personal label. All instances of the label will be removed from tasks
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteLabelApiV1LabelsLabelIdDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteLabelApiV1LabelsLabelIdDeleteApiResponse> DeleteLabelApiV1LabelsLabelIdDeleteAsync(int labelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Label
        /// </summary>
        /// <remarks>
        /// Deletes a personal label. All instances of the label will be removed from tasks
        /// </remarks>
        /// <param name="labelId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteLabelApiV1LabelsLabelIdDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteLabelApiV1LabelsLabelIdDeleteApiResponse?> DeleteLabelApiV1LabelsLabelIdDeleteOrDefaultAsync(int labelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLabelApiV1LabelsLabelIdGetApiResponse"/>&gt;</returns>
        Task<IGetLabelApiV1LabelsLabelIdGetApiResponse> GetLabelApiV1LabelsLabelIdGetAsync(int labelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="labelId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLabelApiV1LabelsLabelIdGetApiResponse"/>?&gt;</returns>
        Task<IGetLabelApiV1LabelsLabelIdGetApiResponse?> GetLabelApiV1LabelsLabelIdGetOrDefaultAsync(int labelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Labels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLabelsApiV1LabelsGetApiResponse"/>&gt;</returns>
        Task<IGetLabelsApiV1LabelsGetApiResponse> GetLabelsApiV1LabelsGetAsync(Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Labels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLabelsApiV1LabelsGetApiResponse"/>?&gt;</returns>
        Task<IGetLabelsApiV1LabelsGetApiResponse?> GetLabelsApiV1LabelsGetOrDefaultAsync(Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Shared Labels
        /// </summary>
        /// <remarks>
        /// Returns a set of unique strings containing labels from active tasks.  By default, the names of a user&#39;s personal labels will also be included. These can be excluded by passing the &#x60;omit_personal&#x60; parameter.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="omitPersonal"> (optional, default to false)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISharedLabelsApiV1LabelsSharedGetApiResponse"/>&gt;</returns>
        Task<ISharedLabelsApiV1LabelsSharedGetApiResponse> SharedLabelsApiV1LabelsSharedGetAsync(Option<bool> omitPersonal = default, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Shared Labels
        /// </summary>
        /// <remarks>
        /// Returns a set of unique strings containing labels from active tasks.  By default, the names of a user&#39;s personal labels will also be included. These can be excluded by passing the &#x60;omit_personal&#x60; parameter.
        /// </remarks>
        /// <param name="omitPersonal"> (optional, default to false)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISharedLabelsApiV1LabelsSharedGetApiResponse"/>?&gt;</returns>
        Task<ISharedLabelsApiV1LabelsSharedGetApiResponse?> SharedLabelsApiV1LabelsSharedGetOrDefaultAsync(Option<bool> omitPersonal = default, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Shared Labels Remove
        /// </summary>
        /// <remarks>
        /// Remove the given shared label from all active tasks
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiRestLabelsBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse"/>&gt;</returns>
        Task<ISharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse> SharedLabelsRemoveApiV1LabelsSharedRemovePostAsync(TodoistAppsApiRestLabelsBody1 todoistAppsApiRestLabelsBody1, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Shared Labels Remove
        /// </summary>
        /// <remarks>
        /// Remove the given shared label from all active tasks
        /// </remarks>
        /// <param name="todoistAppsApiRestLabelsBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse"/>?&gt;</returns>
        Task<ISharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse?> SharedLabelsRemoveApiV1LabelsSharedRemovePostOrDefaultAsync(TodoistAppsApiRestLabelsBody1 todoistAppsApiRestLabelsBody1, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Shared Labels Rename
        /// </summary>
        /// <remarks>
        /// Rename the given shared label from all active tasks
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiRestLabelsBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse"/>&gt;</returns>
        Task<ISharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse> SharedLabelsRenameApiV1LabelsSharedRenamePostAsync(TodoistAppsApiRestLabelsBody2 todoistAppsApiRestLabelsBody2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Shared Labels Rename
        /// </summary>
        /// <remarks>
        /// Rename the given shared label from all active tasks
        /// </remarks>
        /// <param name="todoistAppsApiRestLabelsBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse"/>?&gt;</returns>
        Task<ISharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse?> SharedLabelsRenameApiV1LabelsSharedRenamePostOrDefaultAsync(TodoistAppsApiRestLabelsBody2 todoistAppsApiRestLabelsBody2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId"></param>
        /// <param name="todoistAppsApiRestLabelsBody3"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLabelApiV1LabelsLabelIdPostApiResponse"/>&gt;</returns>
        Task<IUpdateLabelApiV1LabelsLabelIdPostApiResponse> UpdateLabelApiV1LabelsLabelIdPostAsync(int labelId, TodoistAppsApiRestLabelsBody3 todoistAppsApiRestLabelsBody3, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="labelId"></param>
        /// <param name="todoistAppsApiRestLabelsBody3"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLabelApiV1LabelsLabelIdPostApiResponse"/>?&gt;</returns>
        Task<IUpdateLabelApiV1LabelsLabelIdPostApiResponse?> UpdateLabelApiV1LabelsLabelIdPostOrDefaultAsync(int labelId, TodoistAppsApiRestLabelsBody3 todoistAppsApiRestLabelsBody3, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateLabelApiV1LabelsPostApiResponse"/>
    /// </summary>
    public interface ICreateLabelApiV1LabelsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.LabelRestView?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteLabelApiV1LabelsLabelIdDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteLabelApiV1LabelsLabelIdDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetLabelApiV1LabelsLabelIdGetApiResponse"/>
    /// </summary>
    public interface IGetLabelApiV1LabelsLabelIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.LabelRestView?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetLabelsApiV1LabelsGetApiResponse"/>
    /// </summary>
    public interface IGetLabelsApiV1LabelsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PaginatedListLabelRestView?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ISharedLabelsApiV1LabelsSharedGetApiResponse"/>
    /// </summary>
    public interface ISharedLabelsApiV1LabelsSharedGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PaginatedListStr?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ISharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse"/>
    /// </summary>
    public interface ISharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ISharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse"/>
    /// </summary>
    public interface ISharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateLabelApiV1LabelsLabelIdPostApiResponse"/>
    /// </summary>
    public interface IUpdateLabelApiV1LabelsLabelIdPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.LabelRestView?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class LabelsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateLabelApiV1LabelsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateLabelApiV1LabelsPost;

        internal void ExecuteOnCreateLabelApiV1LabelsPost(LabelsApi.CreateLabelApiV1LabelsPostApiResponse apiResponse)
        {
            OnCreateLabelApiV1LabelsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateLabelApiV1LabelsPost(Exception exception)
        {
            OnErrorCreateLabelApiV1LabelsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteLabelApiV1LabelsLabelIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteLabelApiV1LabelsLabelIdDelete;

        internal void ExecuteOnDeleteLabelApiV1LabelsLabelIdDelete(LabelsApi.DeleteLabelApiV1LabelsLabelIdDeleteApiResponse apiResponse)
        {
            OnDeleteLabelApiV1LabelsLabelIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteLabelApiV1LabelsLabelIdDelete(Exception exception)
        {
            OnErrorDeleteLabelApiV1LabelsLabelIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLabelApiV1LabelsLabelIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLabelApiV1LabelsLabelIdGet;

        internal void ExecuteOnGetLabelApiV1LabelsLabelIdGet(LabelsApi.GetLabelApiV1LabelsLabelIdGetApiResponse apiResponse)
        {
            OnGetLabelApiV1LabelsLabelIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLabelApiV1LabelsLabelIdGet(Exception exception)
        {
            OnErrorGetLabelApiV1LabelsLabelIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLabelsApiV1LabelsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLabelsApiV1LabelsGet;

        internal void ExecuteOnGetLabelsApiV1LabelsGet(LabelsApi.GetLabelsApiV1LabelsGetApiResponse apiResponse)
        {
            OnGetLabelsApiV1LabelsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLabelsApiV1LabelsGet(Exception exception)
        {
            OnErrorGetLabelsApiV1LabelsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSharedLabelsApiV1LabelsSharedGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSharedLabelsApiV1LabelsSharedGet;

        internal void ExecuteOnSharedLabelsApiV1LabelsSharedGet(LabelsApi.SharedLabelsApiV1LabelsSharedGetApiResponse apiResponse)
        {
            OnSharedLabelsApiV1LabelsSharedGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSharedLabelsApiV1LabelsSharedGet(Exception exception)
        {
            OnErrorSharedLabelsApiV1LabelsSharedGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSharedLabelsRemoveApiV1LabelsSharedRemovePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSharedLabelsRemoveApiV1LabelsSharedRemovePost;

        internal void ExecuteOnSharedLabelsRemoveApiV1LabelsSharedRemovePost(LabelsApi.SharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse apiResponse)
        {
            OnSharedLabelsRemoveApiV1LabelsSharedRemovePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSharedLabelsRemoveApiV1LabelsSharedRemovePost(Exception exception)
        {
            OnErrorSharedLabelsRemoveApiV1LabelsSharedRemovePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSharedLabelsRenameApiV1LabelsSharedRenamePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSharedLabelsRenameApiV1LabelsSharedRenamePost;

        internal void ExecuteOnSharedLabelsRenameApiV1LabelsSharedRenamePost(LabelsApi.SharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse apiResponse)
        {
            OnSharedLabelsRenameApiV1LabelsSharedRenamePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSharedLabelsRenameApiV1LabelsSharedRenamePost(Exception exception)
        {
            OnErrorSharedLabelsRenameApiV1LabelsSharedRenamePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateLabelApiV1LabelsLabelIdPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateLabelApiV1LabelsLabelIdPost;

        internal void ExecuteOnUpdateLabelApiV1LabelsLabelIdPost(LabelsApi.UpdateLabelApiV1LabelsLabelIdPostApiResponse apiResponse)
        {
            OnUpdateLabelApiV1LabelsLabelIdPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateLabelApiV1LabelsLabelIdPost(Exception exception)
        {
            OnErrorUpdateLabelApiV1LabelsLabelIdPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class LabelsApi : ILabelsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<LabelsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public LabelsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="LabelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LabelsApi(ILogger<LabelsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, LabelsApiEvents labelsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<LabelsApi>();
            HttpClient = httpClient;
            Events = labelsApiEvents;
        }

        partial void FormatCreateLabelApiV1LabelsPost(TodoistAppsApiRestLabelsBody4 todoistAppsApiRestLabelsBody4);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="todoistAppsApiRestLabelsBody4"></param>
        /// <returns></returns>
        private void ValidateCreateLabelApiV1LabelsPost(TodoistAppsApiRestLabelsBody4 todoistAppsApiRestLabelsBody4)
        {
            if (todoistAppsApiRestLabelsBody4 == null)
                throw new ArgumentNullException(nameof(todoistAppsApiRestLabelsBody4));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiRestLabelsBody4"></param>
        private void AfterCreateLabelApiV1LabelsPostDefaultImplementation(ICreateLabelApiV1LabelsPostApiResponse apiResponseLocalVar, TodoistAppsApiRestLabelsBody4 todoistAppsApiRestLabelsBody4)
        {
            bool suppressDefaultLog = false;
            AfterCreateLabelApiV1LabelsPost(ref suppressDefaultLog, apiResponseLocalVar, todoistAppsApiRestLabelsBody4);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiRestLabelsBody4"></param>
        partial void AfterCreateLabelApiV1LabelsPost(ref bool suppressDefaultLog, ICreateLabelApiV1LabelsPostApiResponse apiResponseLocalVar, TodoistAppsApiRestLabelsBody4 todoistAppsApiRestLabelsBody4);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiRestLabelsBody4"></param>
        private void OnErrorCreateLabelApiV1LabelsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiRestLabelsBody4 todoistAppsApiRestLabelsBody4)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateLabelApiV1LabelsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, todoistAppsApiRestLabelsBody4);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiRestLabelsBody4"></param>
        partial void OnErrorCreateLabelApiV1LabelsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiRestLabelsBody4 todoistAppsApiRestLabelsBody4);

        /// <summary>
        /// Create Label 
        /// </summary>
        /// <param name="todoistAppsApiRestLabelsBody4"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateLabelApiV1LabelsPostApiResponse"/>&gt;</returns>
        public async Task<ICreateLabelApiV1LabelsPostApiResponse?> CreateLabelApiV1LabelsPostOrDefaultAsync(TodoistAppsApiRestLabelsBody4 todoistAppsApiRestLabelsBody4, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateLabelApiV1LabelsPostAsync(todoistAppsApiRestLabelsBody4, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Label 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiRestLabelsBody4"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateLabelApiV1LabelsPostApiResponse"/>&gt;</returns>
        public async Task<ICreateLabelApiV1LabelsPostApiResponse> CreateLabelApiV1LabelsPostAsync(TodoistAppsApiRestLabelsBody4 todoistAppsApiRestLabelsBody4, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateLabelApiV1LabelsPost(todoistAppsApiRestLabelsBody4);

                FormatCreateLabelApiV1LabelsPost(todoistAppsApiRestLabelsBody4);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/labels"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/labels");

                    httpRequestMessageLocalVar.Content = (todoistAppsApiRestLabelsBody4 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(todoistAppsApiRestLabelsBody4, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateLabelApiV1LabelsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateLabelApiV1LabelsPostApiResponse>();

                        CreateLabelApiV1LabelsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/labels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateLabelApiV1LabelsPostDefaultImplementation(apiResponseLocalVar, todoistAppsApiRestLabelsBody4);

                        Events.ExecuteOnCreateLabelApiV1LabelsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateLabelApiV1LabelsPostDefaultImplementation(e, "/api/v1/labels", uriBuilderLocalVar.Path, todoistAppsApiRestLabelsBody4);
                Events.ExecuteOnErrorCreateLabelApiV1LabelsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateLabelApiV1LabelsPostApiResponse"/>
        /// </summary>
        public partial class CreateLabelApiV1LabelsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateLabelApiV1LabelsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateLabelApiV1LabelsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateLabelApiV1LabelsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateLabelApiV1LabelsPostApiResponse(ILogger<CreateLabelApiV1LabelsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.LabelRestView? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.LabelRestView>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.LabelRestView? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteLabelApiV1LabelsLabelIdDelete(ref int labelId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="labelId"></param>
        private void AfterDeleteLabelApiV1LabelsLabelIdDeleteDefaultImplementation(IDeleteLabelApiV1LabelsLabelIdDeleteApiResponse apiResponseLocalVar, int labelId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteLabelApiV1LabelsLabelIdDelete(ref suppressDefaultLog, apiResponseLocalVar, labelId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="labelId"></param>
        partial void AfterDeleteLabelApiV1LabelsLabelIdDelete(ref bool suppressDefaultLog, IDeleteLabelApiV1LabelsLabelIdDeleteApiResponse apiResponseLocalVar, int labelId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="labelId"></param>
        private void OnErrorDeleteLabelApiV1LabelsLabelIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int labelId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteLabelApiV1LabelsLabelIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, labelId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="labelId"></param>
        partial void OnErrorDeleteLabelApiV1LabelsLabelIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int labelId);

        /// <summary>
        /// Delete Label Deletes a personal label. All instances of the label will be removed from tasks
        /// </summary>
        /// <param name="labelId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteLabelApiV1LabelsLabelIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteLabelApiV1LabelsLabelIdDeleteApiResponse?> DeleteLabelApiV1LabelsLabelIdDeleteOrDefaultAsync(int labelId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteLabelApiV1LabelsLabelIdDeleteAsync(labelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Label Deletes a personal label. All instances of the label will be removed from tasks
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteLabelApiV1LabelsLabelIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteLabelApiV1LabelsLabelIdDeleteApiResponse> DeleteLabelApiV1LabelsLabelIdDeleteAsync(int labelId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteLabelApiV1LabelsLabelIdDelete(ref labelId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/labels/{label_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/labels/{label_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Blabel_id%7D", Uri.EscapeDataString(labelId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteLabelApiV1LabelsLabelIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteLabelApiV1LabelsLabelIdDeleteApiResponse>();

                        DeleteLabelApiV1LabelsLabelIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/labels/{label_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteLabelApiV1LabelsLabelIdDeleteDefaultImplementation(apiResponseLocalVar, labelId);

                        Events.ExecuteOnDeleteLabelApiV1LabelsLabelIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteLabelApiV1LabelsLabelIdDeleteDefaultImplementation(e, "/api/v1/labels/{label_id}", uriBuilderLocalVar.Path, labelId);
                Events.ExecuteOnErrorDeleteLabelApiV1LabelsLabelIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteLabelApiV1LabelsLabelIdDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteLabelApiV1LabelsLabelIdDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteLabelApiV1LabelsLabelIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteLabelApiV1LabelsLabelIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteLabelApiV1LabelsLabelIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteLabelApiV1LabelsLabelIdDeleteApiResponse(ILogger<DeleteLabelApiV1LabelsLabelIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetLabelApiV1LabelsLabelIdGet(ref int labelId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="labelId"></param>
        private void AfterGetLabelApiV1LabelsLabelIdGetDefaultImplementation(IGetLabelApiV1LabelsLabelIdGetApiResponse apiResponseLocalVar, int labelId)
        {
            bool suppressDefaultLog = false;
            AfterGetLabelApiV1LabelsLabelIdGet(ref suppressDefaultLog, apiResponseLocalVar, labelId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="labelId"></param>
        partial void AfterGetLabelApiV1LabelsLabelIdGet(ref bool suppressDefaultLog, IGetLabelApiV1LabelsLabelIdGetApiResponse apiResponseLocalVar, int labelId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="labelId"></param>
        private void OnErrorGetLabelApiV1LabelsLabelIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int labelId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetLabelApiV1LabelsLabelIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, labelId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="labelId"></param>
        partial void OnErrorGetLabelApiV1LabelsLabelIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int labelId);

        /// <summary>
        /// Get Label 
        /// </summary>
        /// <param name="labelId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLabelApiV1LabelsLabelIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetLabelApiV1LabelsLabelIdGetApiResponse?> GetLabelApiV1LabelsLabelIdGetOrDefaultAsync(int labelId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetLabelApiV1LabelsLabelIdGetAsync(labelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Label 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLabelApiV1LabelsLabelIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetLabelApiV1LabelsLabelIdGetApiResponse> GetLabelApiV1LabelsLabelIdGetAsync(int labelId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetLabelApiV1LabelsLabelIdGet(ref labelId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/labels/{label_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/labels/{label_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Blabel_id%7D", Uri.EscapeDataString(labelId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetLabelApiV1LabelsLabelIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetLabelApiV1LabelsLabelIdGetApiResponse>();

                        GetLabelApiV1LabelsLabelIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/labels/{label_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetLabelApiV1LabelsLabelIdGetDefaultImplementation(apiResponseLocalVar, labelId);

                        Events.ExecuteOnGetLabelApiV1LabelsLabelIdGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetLabelApiV1LabelsLabelIdGetDefaultImplementation(e, "/api/v1/labels/{label_id}", uriBuilderLocalVar.Path, labelId);
                Events.ExecuteOnErrorGetLabelApiV1LabelsLabelIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetLabelApiV1LabelsLabelIdGetApiResponse"/>
        /// </summary>
        public partial class GetLabelApiV1LabelsLabelIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetLabelApiV1LabelsLabelIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetLabelApiV1LabelsLabelIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetLabelApiV1LabelsLabelIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetLabelApiV1LabelsLabelIdGetApiResponse(ILogger<GetLabelApiV1LabelsLabelIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.LabelRestView? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.LabelRestView>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.LabelRestView? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetLabelsApiV1LabelsGet(ref Option<string?> cursor, ref Option<int> limit);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void AfterGetLabelsApiV1LabelsGetDefaultImplementation(IGetLabelsApiV1LabelsGetApiResponse apiResponseLocalVar, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterGetLabelsApiV1LabelsGet(ref suppressDefaultLog, apiResponseLocalVar, cursor, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void AfterGetLabelsApiV1LabelsGet(ref bool suppressDefaultLog, IGetLabelsApiV1LabelsGetApiResponse apiResponseLocalVar, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void OnErrorGetLabelsApiV1LabelsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetLabelsApiV1LabelsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, cursor, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void OnErrorGetLabelsApiV1LabelsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Get Labels 
        /// </summary>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLabelsApiV1LabelsGetApiResponse"/>&gt;</returns>
        public async Task<IGetLabelsApiV1LabelsGetApiResponse?> GetLabelsApiV1LabelsGetOrDefaultAsync(Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetLabelsApiV1LabelsGetAsync(cursor, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Labels 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLabelsApiV1LabelsGetApiResponse"/>&gt;</returns>
        public async Task<IGetLabelsApiV1LabelsGetApiResponse> GetLabelsApiV1LabelsGetAsync(Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetLabelsApiV1LabelsGet(ref cursor, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/labels"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/labels");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (cursor.IsSet)
                        parseQueryStringLocalVar["cursor"] = ClientUtils.ParameterToString(cursor.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetLabelsApiV1LabelsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetLabelsApiV1LabelsGetApiResponse>();

                        GetLabelsApiV1LabelsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/labels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetLabelsApiV1LabelsGetDefaultImplementation(apiResponseLocalVar, cursor, limit);

                        Events.ExecuteOnGetLabelsApiV1LabelsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetLabelsApiV1LabelsGetDefaultImplementation(e, "/api/v1/labels", uriBuilderLocalVar.Path, cursor, limit);
                Events.ExecuteOnErrorGetLabelsApiV1LabelsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetLabelsApiV1LabelsGetApiResponse"/>
        /// </summary>
        public partial class GetLabelsApiV1LabelsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetLabelsApiV1LabelsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetLabelsApiV1LabelsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetLabelsApiV1LabelsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetLabelsApiV1LabelsGetApiResponse(ILogger<GetLabelsApiV1LabelsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PaginatedListLabelRestView? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PaginatedListLabelRestView>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PaginatedListLabelRestView? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSharedLabelsApiV1LabelsSharedGet(ref Option<bool> omitPersonal, ref Option<string?> cursor, ref Option<int> limit);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="omitPersonal"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void AfterSharedLabelsApiV1LabelsSharedGetDefaultImplementation(ISharedLabelsApiV1LabelsSharedGetApiResponse apiResponseLocalVar, Option<bool> omitPersonal, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterSharedLabelsApiV1LabelsSharedGet(ref suppressDefaultLog, apiResponseLocalVar, omitPersonal, cursor, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="omitPersonal"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void AfterSharedLabelsApiV1LabelsSharedGet(ref bool suppressDefaultLog, ISharedLabelsApiV1LabelsSharedGetApiResponse apiResponseLocalVar, Option<bool> omitPersonal, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="omitPersonal"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void OnErrorSharedLabelsApiV1LabelsSharedGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<bool> omitPersonal, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSharedLabelsApiV1LabelsSharedGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, omitPersonal, cursor, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="omitPersonal"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void OnErrorSharedLabelsApiV1LabelsSharedGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<bool> omitPersonal, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Shared Labels Returns a set of unique strings containing labels from active tasks.  By default, the names of a user&#39;s personal labels will also be included. These can be excluded by passing the &#x60;omit_personal&#x60; parameter.
        /// </summary>
        /// <param name="omitPersonal"> (optional, default to false)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISharedLabelsApiV1LabelsSharedGetApiResponse"/>&gt;</returns>
        public async Task<ISharedLabelsApiV1LabelsSharedGetApiResponse?> SharedLabelsApiV1LabelsSharedGetOrDefaultAsync(Option<bool> omitPersonal = default, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SharedLabelsApiV1LabelsSharedGetAsync(omitPersonal, cursor, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Shared Labels Returns a set of unique strings containing labels from active tasks.  By default, the names of a user&#39;s personal labels will also be included. These can be excluded by passing the &#x60;omit_personal&#x60; parameter.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="omitPersonal"> (optional, default to false)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISharedLabelsApiV1LabelsSharedGetApiResponse"/>&gt;</returns>
        public async Task<ISharedLabelsApiV1LabelsSharedGetApiResponse> SharedLabelsApiV1LabelsSharedGetAsync(Option<bool> omitPersonal = default, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatSharedLabelsApiV1LabelsSharedGet(ref omitPersonal, ref cursor, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/labels/shared"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/labels/shared");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (omitPersonal.IsSet)
                        parseQueryStringLocalVar["omit_personal"] = ClientUtils.ParameterToString(omitPersonal.Value);

                    if (cursor.IsSet)
                        parseQueryStringLocalVar["cursor"] = ClientUtils.ParameterToString(cursor.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SharedLabelsApiV1LabelsSharedGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SharedLabelsApiV1LabelsSharedGetApiResponse>();

                        SharedLabelsApiV1LabelsSharedGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/labels/shared", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSharedLabelsApiV1LabelsSharedGetDefaultImplementation(apiResponseLocalVar, omitPersonal, cursor, limit);

                        Events.ExecuteOnSharedLabelsApiV1LabelsSharedGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSharedLabelsApiV1LabelsSharedGetDefaultImplementation(e, "/api/v1/labels/shared", uriBuilderLocalVar.Path, omitPersonal, cursor, limit);
                Events.ExecuteOnErrorSharedLabelsApiV1LabelsSharedGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SharedLabelsApiV1LabelsSharedGetApiResponse"/>
        /// </summary>
        public partial class SharedLabelsApiV1LabelsSharedGetApiResponse : Org.OpenAPITools.Client.ApiResponse, ISharedLabelsApiV1LabelsSharedGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SharedLabelsApiV1LabelsSharedGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SharedLabelsApiV1LabelsSharedGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SharedLabelsApiV1LabelsSharedGetApiResponse(ILogger<SharedLabelsApiV1LabelsSharedGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PaginatedListStr? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PaginatedListStr>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PaginatedListStr? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSharedLabelsRemoveApiV1LabelsSharedRemovePost(TodoistAppsApiRestLabelsBody1 todoistAppsApiRestLabelsBody1);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="todoistAppsApiRestLabelsBody1"></param>
        /// <returns></returns>
        private void ValidateSharedLabelsRemoveApiV1LabelsSharedRemovePost(TodoistAppsApiRestLabelsBody1 todoistAppsApiRestLabelsBody1)
        {
            if (todoistAppsApiRestLabelsBody1 == null)
                throw new ArgumentNullException(nameof(todoistAppsApiRestLabelsBody1));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiRestLabelsBody1"></param>
        private void AfterSharedLabelsRemoveApiV1LabelsSharedRemovePostDefaultImplementation(ISharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse apiResponseLocalVar, TodoistAppsApiRestLabelsBody1 todoistAppsApiRestLabelsBody1)
        {
            bool suppressDefaultLog = false;
            AfterSharedLabelsRemoveApiV1LabelsSharedRemovePost(ref suppressDefaultLog, apiResponseLocalVar, todoistAppsApiRestLabelsBody1);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiRestLabelsBody1"></param>
        partial void AfterSharedLabelsRemoveApiV1LabelsSharedRemovePost(ref bool suppressDefaultLog, ISharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse apiResponseLocalVar, TodoistAppsApiRestLabelsBody1 todoistAppsApiRestLabelsBody1);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiRestLabelsBody1"></param>
        private void OnErrorSharedLabelsRemoveApiV1LabelsSharedRemovePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiRestLabelsBody1 todoistAppsApiRestLabelsBody1)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSharedLabelsRemoveApiV1LabelsSharedRemovePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, todoistAppsApiRestLabelsBody1);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiRestLabelsBody1"></param>
        partial void OnErrorSharedLabelsRemoveApiV1LabelsSharedRemovePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiRestLabelsBody1 todoistAppsApiRestLabelsBody1);

        /// <summary>
        /// Shared Labels Remove Remove the given shared label from all active tasks
        /// </summary>
        /// <param name="todoistAppsApiRestLabelsBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse"/>&gt;</returns>
        public async Task<ISharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse?> SharedLabelsRemoveApiV1LabelsSharedRemovePostOrDefaultAsync(TodoistAppsApiRestLabelsBody1 todoistAppsApiRestLabelsBody1, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SharedLabelsRemoveApiV1LabelsSharedRemovePostAsync(todoistAppsApiRestLabelsBody1, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Shared Labels Remove Remove the given shared label from all active tasks
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiRestLabelsBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse"/>&gt;</returns>
        public async Task<ISharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse> SharedLabelsRemoveApiV1LabelsSharedRemovePostAsync(TodoistAppsApiRestLabelsBody1 todoistAppsApiRestLabelsBody1, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSharedLabelsRemoveApiV1LabelsSharedRemovePost(todoistAppsApiRestLabelsBody1);

                FormatSharedLabelsRemoveApiV1LabelsSharedRemovePost(todoistAppsApiRestLabelsBody1);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/labels/shared/remove"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/labels/shared/remove");

                    httpRequestMessageLocalVar.Content = (todoistAppsApiRestLabelsBody1 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(todoistAppsApiRestLabelsBody1, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse>();

                        SharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/labels/shared/remove", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSharedLabelsRemoveApiV1LabelsSharedRemovePostDefaultImplementation(apiResponseLocalVar, todoistAppsApiRestLabelsBody1);

                        Events.ExecuteOnSharedLabelsRemoveApiV1LabelsSharedRemovePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSharedLabelsRemoveApiV1LabelsSharedRemovePostDefaultImplementation(e, "/api/v1/labels/shared/remove", uriBuilderLocalVar.Path, todoistAppsApiRestLabelsBody1);
                Events.ExecuteOnErrorSharedLabelsRemoveApiV1LabelsSharedRemovePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse"/>
        /// </summary>
        public partial class SharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse : Org.OpenAPITools.Client.ApiResponse, ISharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse(ILogger<SharedLabelsRemoveApiV1LabelsSharedRemovePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSharedLabelsRenameApiV1LabelsSharedRenamePost(TodoistAppsApiRestLabelsBody2 todoistAppsApiRestLabelsBody2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="todoistAppsApiRestLabelsBody2"></param>
        /// <returns></returns>
        private void ValidateSharedLabelsRenameApiV1LabelsSharedRenamePost(TodoistAppsApiRestLabelsBody2 todoistAppsApiRestLabelsBody2)
        {
            if (todoistAppsApiRestLabelsBody2 == null)
                throw new ArgumentNullException(nameof(todoistAppsApiRestLabelsBody2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiRestLabelsBody2"></param>
        private void AfterSharedLabelsRenameApiV1LabelsSharedRenamePostDefaultImplementation(ISharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse apiResponseLocalVar, TodoistAppsApiRestLabelsBody2 todoistAppsApiRestLabelsBody2)
        {
            bool suppressDefaultLog = false;
            AfterSharedLabelsRenameApiV1LabelsSharedRenamePost(ref suppressDefaultLog, apiResponseLocalVar, todoistAppsApiRestLabelsBody2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiRestLabelsBody2"></param>
        partial void AfterSharedLabelsRenameApiV1LabelsSharedRenamePost(ref bool suppressDefaultLog, ISharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse apiResponseLocalVar, TodoistAppsApiRestLabelsBody2 todoistAppsApiRestLabelsBody2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiRestLabelsBody2"></param>
        private void OnErrorSharedLabelsRenameApiV1LabelsSharedRenamePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiRestLabelsBody2 todoistAppsApiRestLabelsBody2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSharedLabelsRenameApiV1LabelsSharedRenamePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, todoistAppsApiRestLabelsBody2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiRestLabelsBody2"></param>
        partial void OnErrorSharedLabelsRenameApiV1LabelsSharedRenamePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiRestLabelsBody2 todoistAppsApiRestLabelsBody2);

        /// <summary>
        /// Shared Labels Rename Rename the given shared label from all active tasks
        /// </summary>
        /// <param name="todoistAppsApiRestLabelsBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse"/>&gt;</returns>
        public async Task<ISharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse?> SharedLabelsRenameApiV1LabelsSharedRenamePostOrDefaultAsync(TodoistAppsApiRestLabelsBody2 todoistAppsApiRestLabelsBody2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SharedLabelsRenameApiV1LabelsSharedRenamePostAsync(todoistAppsApiRestLabelsBody2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Shared Labels Rename Rename the given shared label from all active tasks
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiRestLabelsBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse"/>&gt;</returns>
        public async Task<ISharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse> SharedLabelsRenameApiV1LabelsSharedRenamePostAsync(TodoistAppsApiRestLabelsBody2 todoistAppsApiRestLabelsBody2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSharedLabelsRenameApiV1LabelsSharedRenamePost(todoistAppsApiRestLabelsBody2);

                FormatSharedLabelsRenameApiV1LabelsSharedRenamePost(todoistAppsApiRestLabelsBody2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/labels/shared/rename"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/labels/shared/rename");

                    httpRequestMessageLocalVar.Content = (todoistAppsApiRestLabelsBody2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(todoistAppsApiRestLabelsBody2, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse>();

                        SharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/labels/shared/rename", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSharedLabelsRenameApiV1LabelsSharedRenamePostDefaultImplementation(apiResponseLocalVar, todoistAppsApiRestLabelsBody2);

                        Events.ExecuteOnSharedLabelsRenameApiV1LabelsSharedRenamePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSharedLabelsRenameApiV1LabelsSharedRenamePostDefaultImplementation(e, "/api/v1/labels/shared/rename", uriBuilderLocalVar.Path, todoistAppsApiRestLabelsBody2);
                Events.ExecuteOnErrorSharedLabelsRenameApiV1LabelsSharedRenamePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse"/>
        /// </summary>
        public partial class SharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse : Org.OpenAPITools.Client.ApiResponse, ISharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse(ILogger<SharedLabelsRenameApiV1LabelsSharedRenamePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateLabelApiV1LabelsLabelIdPost(ref int labelId, TodoistAppsApiRestLabelsBody3 todoistAppsApiRestLabelsBody3);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="todoistAppsApiRestLabelsBody3"></param>
        /// <returns></returns>
        private void ValidateUpdateLabelApiV1LabelsLabelIdPost(TodoistAppsApiRestLabelsBody3 todoistAppsApiRestLabelsBody3)
        {
            if (todoistAppsApiRestLabelsBody3 == null)
                throw new ArgumentNullException(nameof(todoistAppsApiRestLabelsBody3));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="labelId"></param>
        /// <param name="todoistAppsApiRestLabelsBody3"></param>
        private void AfterUpdateLabelApiV1LabelsLabelIdPostDefaultImplementation(IUpdateLabelApiV1LabelsLabelIdPostApiResponse apiResponseLocalVar, int labelId, TodoistAppsApiRestLabelsBody3 todoistAppsApiRestLabelsBody3)
        {
            bool suppressDefaultLog = false;
            AfterUpdateLabelApiV1LabelsLabelIdPost(ref suppressDefaultLog, apiResponseLocalVar, labelId, todoistAppsApiRestLabelsBody3);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="labelId"></param>
        /// <param name="todoistAppsApiRestLabelsBody3"></param>
        partial void AfterUpdateLabelApiV1LabelsLabelIdPost(ref bool suppressDefaultLog, IUpdateLabelApiV1LabelsLabelIdPostApiResponse apiResponseLocalVar, int labelId, TodoistAppsApiRestLabelsBody3 todoistAppsApiRestLabelsBody3);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="labelId"></param>
        /// <param name="todoistAppsApiRestLabelsBody3"></param>
        private void OnErrorUpdateLabelApiV1LabelsLabelIdPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int labelId, TodoistAppsApiRestLabelsBody3 todoistAppsApiRestLabelsBody3)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateLabelApiV1LabelsLabelIdPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, labelId, todoistAppsApiRestLabelsBody3);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="labelId"></param>
        /// <param name="todoistAppsApiRestLabelsBody3"></param>
        partial void OnErrorUpdateLabelApiV1LabelsLabelIdPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int labelId, TodoistAppsApiRestLabelsBody3 todoistAppsApiRestLabelsBody3);

        /// <summary>
        /// Update Label 
        /// </summary>
        /// <param name="labelId"></param>
        /// <param name="todoistAppsApiRestLabelsBody3"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLabelApiV1LabelsLabelIdPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateLabelApiV1LabelsLabelIdPostApiResponse?> UpdateLabelApiV1LabelsLabelIdPostOrDefaultAsync(int labelId, TodoistAppsApiRestLabelsBody3 todoistAppsApiRestLabelsBody3, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateLabelApiV1LabelsLabelIdPostAsync(labelId, todoistAppsApiRestLabelsBody3, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Label 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId"></param>
        /// <param name="todoistAppsApiRestLabelsBody3"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLabelApiV1LabelsLabelIdPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateLabelApiV1LabelsLabelIdPostApiResponse> UpdateLabelApiV1LabelsLabelIdPostAsync(int labelId, TodoistAppsApiRestLabelsBody3 todoistAppsApiRestLabelsBody3, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateLabelApiV1LabelsLabelIdPost(todoistAppsApiRestLabelsBody3);

                FormatUpdateLabelApiV1LabelsLabelIdPost(ref labelId, todoistAppsApiRestLabelsBody3);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/labels/{label_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/labels/{label_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Blabel_id%7D", Uri.EscapeDataString(labelId.ToString()));

                    httpRequestMessageLocalVar.Content = (todoistAppsApiRestLabelsBody3 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(todoistAppsApiRestLabelsBody3, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateLabelApiV1LabelsLabelIdPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateLabelApiV1LabelsLabelIdPostApiResponse>();

                        UpdateLabelApiV1LabelsLabelIdPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/labels/{label_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateLabelApiV1LabelsLabelIdPostDefaultImplementation(apiResponseLocalVar, labelId, todoistAppsApiRestLabelsBody3);

                        Events.ExecuteOnUpdateLabelApiV1LabelsLabelIdPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateLabelApiV1LabelsLabelIdPostDefaultImplementation(e, "/api/v1/labels/{label_id}", uriBuilderLocalVar.Path, labelId, todoistAppsApiRestLabelsBody3);
                Events.ExecuteOnErrorUpdateLabelApiV1LabelsLabelIdPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateLabelApiV1LabelsLabelIdPostApiResponse"/>
        /// </summary>
        public partial class UpdateLabelApiV1LabelsLabelIdPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateLabelApiV1LabelsLabelIdPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateLabelApiV1LabelsLabelIdPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateLabelApiV1LabelsLabelIdPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateLabelApiV1LabelsLabelIdPostApiResponse(ILogger<UpdateLabelApiV1LabelsLabelIdPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.LabelRestView? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.LabelRestView>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.LabelRestView? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
