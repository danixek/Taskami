// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITemplatesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TemplatesApiEvents Events { get; }

        /// <summary>
        /// Create Project From File
        /// </summary>
        /// <remarks>
        /// A template can be imported in an existing project, or in a newly created one.  Upload a file suitable to be passed as a template to be imported into a project.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="workspaceId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse"/>&gt;</returns>
        Task<ICreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse> CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostAsync(string name, System.IO.Stream file, Option<string?> workspaceId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Project From File
        /// </summary>
        /// <remarks>
        /// A template can be imported in an existing project, or in a newly created one.  Upload a file suitable to be passed as a template to be imported into a project.
        /// </remarks>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="workspaceId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse"/>?&gt;</returns>
        Task<ICreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse?> CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostOrDefaultAsync(string name, System.IO.Stream file, Option<string?> workspaceId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export As File
        /// </summary>
        /// <remarks>
        /// Get a template for a project as a CSV file
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportAsFileApiV1TemplatesFileGetApiResponse"/>&gt;</returns>
        Task<IExportAsFileApiV1TemplatesFileGetApiResponse> ExportAsFileApiV1TemplatesFileGetAsync(ProjectId3 projectId, Option<bool> useRelativeDates = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export As File
        /// </summary>
        /// <remarks>
        /// Get a template for a project as a CSV file
        /// </remarks>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportAsFileApiV1TemplatesFileGetApiResponse"/>?&gt;</returns>
        Task<IExportAsFileApiV1TemplatesFileGetApiResponse?> ExportAsFileApiV1TemplatesFileGetOrDefaultAsync(ProjectId3 projectId, Option<bool> useRelativeDates = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export As Url
        /// </summary>
        /// <remarks>
        /// Get a template for a project as a shareable URL.  The URL can then be passed to &#x60;https://todoist.com/api/v1/import/project_from_url?t_url&#x3D;&lt;url&gt;&#x60; to make a shareable template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportAsUrlApiV1TemplatesUrlGetApiResponse"/>&gt;</returns>
        Task<IExportAsUrlApiV1TemplatesUrlGetApiResponse> ExportAsUrlApiV1TemplatesUrlGetAsync(ProjectId3 projectId, Option<bool> useRelativeDates = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export As Url
        /// </summary>
        /// <remarks>
        /// Get a template for a project as a shareable URL.  The URL can then be passed to &#x60;https://todoist.com/api/v1/import/project_from_url?t_url&#x3D;&lt;url&gt;&#x60; to make a shareable template.
        /// </remarks>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportAsUrlApiV1TemplatesUrlGetApiResponse"/>?&gt;</returns>
        Task<IExportAsUrlApiV1TemplatesUrlGetApiResponse?> ExportAsUrlApiV1TemplatesUrlGetOrDefaultAsync(ProjectId3 projectId, Option<bool> useRelativeDates = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Import Into Project From File
        /// </summary>
        /// <remarks>
        /// A template can be imported in an existing project, or in a newly created one.  Upload a file suitable to be passed as a template to be imported into a project.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse"/>&gt;</returns>
        Task<IImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse> ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostAsync(ProjectId3 projectId, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Import Into Project From File
        /// </summary>
        /// <remarks>
        /// A template can be imported in an existing project, or in a newly created one.  Upload a file suitable to be passed as a template to be imported into a project.
        /// </remarks>
        /// <param name="projectId"></param>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse"/>?&gt;</returns>
        Task<IImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse?> ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostOrDefaultAsync(ProjectId3 projectId, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Import Into Project From Template Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsImportExportControllersRestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse"/>&gt;</returns>
        Task<IImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse> ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostAsync(TodoistAppsImportExportControllersRestBody todoistAppsImportExportControllersRestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Import Into Project From Template Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="todoistAppsImportExportControllersRestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse"/>?&gt;</returns>
        Task<IImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse?> ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostOrDefaultAsync(TodoistAppsImportExportControllersRestBody todoistAppsImportExportControllersRestBody, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse"/>
    /// </summary>
    public interface ICreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ProjectImportCreateResponseWithObjects?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IExportAsFileApiV1TemplatesFileGetApiResponse"/>
    /// </summary>
    public interface IExportAsFileApiV1TemplatesFileGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<string?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IExportAsUrlApiV1TemplatesUrlGetApiResponse"/>
    /// </summary>
    public interface IExportAsUrlApiV1TemplatesUrlGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.FileURLResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse"/>
    /// </summary>
    public interface IImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ProjectImportResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse"/>
    /// </summary>
    public interface IImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ProjectImportResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TemplatesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost;

        internal void ExecuteOnCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost(TemplatesApi.CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse apiResponse)
        {
            OnCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost(Exception exception)
        {
            OnErrorCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnExportAsFileApiV1TemplatesFileGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorExportAsFileApiV1TemplatesFileGet;

        internal void ExecuteOnExportAsFileApiV1TemplatesFileGet(TemplatesApi.ExportAsFileApiV1TemplatesFileGetApiResponse apiResponse)
        {
            OnExportAsFileApiV1TemplatesFileGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorExportAsFileApiV1TemplatesFileGet(Exception exception)
        {
            OnErrorExportAsFileApiV1TemplatesFileGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnExportAsUrlApiV1TemplatesUrlGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorExportAsUrlApiV1TemplatesUrlGet;

        internal void ExecuteOnExportAsUrlApiV1TemplatesUrlGet(TemplatesApi.ExportAsUrlApiV1TemplatesUrlGetApiResponse apiResponse)
        {
            OnExportAsUrlApiV1TemplatesUrlGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorExportAsUrlApiV1TemplatesUrlGet(Exception exception)
        {
            OnErrorExportAsUrlApiV1TemplatesUrlGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost;

        internal void ExecuteOnImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost(TemplatesApi.ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse apiResponse)
        {
            OnImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost(Exception exception)
        {
            OnErrorImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost;

        internal void ExecuteOnImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost(TemplatesApi.ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse apiResponse)
        {
            OnImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost(Exception exception)
        {
            OnErrorImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TemplatesApi : ITemplatesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TemplatesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TemplatesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi(ILogger<TemplatesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TemplatesApiEvents templatesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TemplatesApi>();
            HttpClient = httpClient;
            Events = templatesApiEvents;
        }

        partial void FormatCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost(ref string name, ref System.IO.Stream file, ref Option<string?> workspaceId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost(string name, System.IO.Stream file)
        {
            if (name == null)
                throw new ArgumentNullException(nameof(name));

            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="workspaceId"></param>
        private void AfterCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostDefaultImplementation(ICreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse apiResponseLocalVar, string name, System.IO.Stream file, Option<string?> workspaceId)
        {
            bool suppressDefaultLog = false;
            AfterCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost(ref suppressDefaultLog, apiResponseLocalVar, name, file, workspaceId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="workspaceId"></param>
        partial void AfterCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost(ref bool suppressDefaultLog, ICreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse apiResponseLocalVar, string name, System.IO.Stream file, Option<string?> workspaceId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="workspaceId"></param>
        private void OnErrorCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string name, System.IO.Stream file, Option<string?> workspaceId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, name, file, workspaceId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="workspaceId"></param>
        partial void OnErrorCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string name, System.IO.Stream file, Option<string?> workspaceId);

        /// <summary>
        /// Create Project From File A template can be imported in an existing project, or in a newly created one.  Upload a file suitable to be passed as a template to be imported into a project.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="workspaceId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse"/>&gt;</returns>
        public async Task<ICreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse?> CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostOrDefaultAsync(string name, System.IO.Stream file, Option<string?> workspaceId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostAsync(name, file, workspaceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Project From File A template can be imported in an existing project, or in a newly created one.  Upload a file suitable to be passed as a template to be imported into a project.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="workspaceId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse"/>&gt;</returns>
        public async Task<ICreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse> CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostAsync(string name, System.IO.Stream file, Option<string?> workspaceId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost(name, file);

                FormatCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost(ref name, ref file, ref workspaceId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/templates/create_project_from_file"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/templates/create_project_from_file");

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("name", ClientUtils.ParameterToString(name)));

                    multipartContentLocalVar.Add(new StreamContent(file));

                    if (workspaceId.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("workspace_id", ClientUtils.ParameterToString(workspaceId.Value)));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse>();

                        CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/templates/create_project_from_file", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostDefaultImplementation(apiResponseLocalVar, name, file, workspaceId);

                        Events.ExecuteOnCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostDefaultImplementation(e, "/api/v1/templates/create_project_from_file", uriBuilderLocalVar.Path, name, file, workspaceId);
                Events.ExecuteOnErrorCreateProjectFromFileApiV1TemplatesCreateProjectFromFilePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse"/>
        /// </summary>
        public partial class CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse(ILogger<CreateProjectFromFileApiV1TemplatesCreateProjectFromFilePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ProjectImportCreateResponseWithObjects? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ProjectImportCreateResponseWithObjects>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ProjectImportCreateResponseWithObjects? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatExportAsFileApiV1TemplatesFileGet(ProjectId3 projectId, ref Option<bool> useRelativeDates);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="projectId"></param>
        /// <returns></returns>
        private void ValidateExportAsFileApiV1TemplatesFileGet(ProjectId3 projectId)
        {
            if (projectId == null)
                throw new ArgumentNullException(nameof(projectId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"></param>
        private void AfterExportAsFileApiV1TemplatesFileGetDefaultImplementation(IExportAsFileApiV1TemplatesFileGetApiResponse apiResponseLocalVar, ProjectId3 projectId, Option<bool> useRelativeDates)
        {
            bool suppressDefaultLog = false;
            AfterExportAsFileApiV1TemplatesFileGet(ref suppressDefaultLog, apiResponseLocalVar, projectId, useRelativeDates);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"></param>
        partial void AfterExportAsFileApiV1TemplatesFileGet(ref bool suppressDefaultLog, IExportAsFileApiV1TemplatesFileGetApiResponse apiResponseLocalVar, ProjectId3 projectId, Option<bool> useRelativeDates);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"></param>
        private void OnErrorExportAsFileApiV1TemplatesFileGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId, Option<bool> useRelativeDates)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorExportAsFileApiV1TemplatesFileGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectId, useRelativeDates);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"></param>
        partial void OnErrorExportAsFileApiV1TemplatesFileGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId, Option<bool> useRelativeDates);

        /// <summary>
        /// Export As File Get a template for a project as a CSV file
        /// </summary>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportAsFileApiV1TemplatesFileGetApiResponse"/>&gt;</returns>
        public async Task<IExportAsFileApiV1TemplatesFileGetApiResponse?> ExportAsFileApiV1TemplatesFileGetOrDefaultAsync(ProjectId3 projectId, Option<bool> useRelativeDates = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ExportAsFileApiV1TemplatesFileGetAsync(projectId, useRelativeDates, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Export As File Get a template for a project as a CSV file
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportAsFileApiV1TemplatesFileGetApiResponse"/>&gt;</returns>
        public async Task<IExportAsFileApiV1TemplatesFileGetApiResponse> ExportAsFileApiV1TemplatesFileGetAsync(ProjectId3 projectId, Option<bool> useRelativeDates = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateExportAsFileApiV1TemplatesFileGet(projectId);

                FormatExportAsFileApiV1TemplatesFileGet(projectId, ref useRelativeDates);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/templates/file"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/templates/file");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["project_id"] = ClientUtils.ParameterToString(projectId);

                    if (useRelativeDates.IsSet)
                        parseQueryStringLocalVar["use_relative_dates"] = ClientUtils.ParameterToString(useRelativeDates.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ExportAsFileApiV1TemplatesFileGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ExportAsFileApiV1TemplatesFileGetApiResponse>();

                        ExportAsFileApiV1TemplatesFileGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/templates/file", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterExportAsFileApiV1TemplatesFileGetDefaultImplementation(apiResponseLocalVar, projectId, useRelativeDates);

                        Events.ExecuteOnExportAsFileApiV1TemplatesFileGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorExportAsFileApiV1TemplatesFileGetDefaultImplementation(e, "/api/v1/templates/file", uriBuilderLocalVar.Path, projectId, useRelativeDates);
                Events.ExecuteOnErrorExportAsFileApiV1TemplatesFileGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ExportAsFileApiV1TemplatesFileGetApiResponse"/>
        /// </summary>
        public partial class ExportAsFileApiV1TemplatesFileGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IExportAsFileApiV1TemplatesFileGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ExportAsFileApiV1TemplatesFileGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ExportAsFileApiV1TemplatesFileGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ExportAsFileApiV1TemplatesFileGetApiResponse(ILogger<ExportAsFileApiV1TemplatesFileGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out string? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatExportAsUrlApiV1TemplatesUrlGet(ProjectId3 projectId, ref Option<bool> useRelativeDates);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="projectId"></param>
        /// <returns></returns>
        private void ValidateExportAsUrlApiV1TemplatesUrlGet(ProjectId3 projectId)
        {
            if (projectId == null)
                throw new ArgumentNullException(nameof(projectId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"></param>
        private void AfterExportAsUrlApiV1TemplatesUrlGetDefaultImplementation(IExportAsUrlApiV1TemplatesUrlGetApiResponse apiResponseLocalVar, ProjectId3 projectId, Option<bool> useRelativeDates)
        {
            bool suppressDefaultLog = false;
            AfterExportAsUrlApiV1TemplatesUrlGet(ref suppressDefaultLog, apiResponseLocalVar, projectId, useRelativeDates);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"></param>
        partial void AfterExportAsUrlApiV1TemplatesUrlGet(ref bool suppressDefaultLog, IExportAsUrlApiV1TemplatesUrlGetApiResponse apiResponseLocalVar, ProjectId3 projectId, Option<bool> useRelativeDates);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"></param>
        private void OnErrorExportAsUrlApiV1TemplatesUrlGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId, Option<bool> useRelativeDates)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorExportAsUrlApiV1TemplatesUrlGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectId, useRelativeDates);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"></param>
        partial void OnErrorExportAsUrlApiV1TemplatesUrlGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId, Option<bool> useRelativeDates);

        /// <summary>
        /// Export As Url Get a template for a project as a shareable URL.  The URL can then be passed to &#x60;https://todoist.com/api/v1/import/project_from_url?t_url&#x3D;&lt;url&gt;&#x60; to make a shareable template.
        /// </summary>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportAsUrlApiV1TemplatesUrlGetApiResponse"/>&gt;</returns>
        public async Task<IExportAsUrlApiV1TemplatesUrlGetApiResponse?> ExportAsUrlApiV1TemplatesUrlGetOrDefaultAsync(ProjectId3 projectId, Option<bool> useRelativeDates = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ExportAsUrlApiV1TemplatesUrlGetAsync(projectId, useRelativeDates, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Export As Url Get a template for a project as a shareable URL.  The URL can then be passed to &#x60;https://todoist.com/api/v1/import/project_from_url?t_url&#x3D;&lt;url&gt;&#x60; to make a shareable template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="useRelativeDates"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportAsUrlApiV1TemplatesUrlGetApiResponse"/>&gt;</returns>
        public async Task<IExportAsUrlApiV1TemplatesUrlGetApiResponse> ExportAsUrlApiV1TemplatesUrlGetAsync(ProjectId3 projectId, Option<bool> useRelativeDates = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateExportAsUrlApiV1TemplatesUrlGet(projectId);

                FormatExportAsUrlApiV1TemplatesUrlGet(projectId, ref useRelativeDates);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/templates/url"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/templates/url");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["project_id"] = ClientUtils.ParameterToString(projectId);

                    if (useRelativeDates.IsSet)
                        parseQueryStringLocalVar["use_relative_dates"] = ClientUtils.ParameterToString(useRelativeDates.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ExportAsUrlApiV1TemplatesUrlGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ExportAsUrlApiV1TemplatesUrlGetApiResponse>();

                        ExportAsUrlApiV1TemplatesUrlGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/templates/url", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterExportAsUrlApiV1TemplatesUrlGetDefaultImplementation(apiResponseLocalVar, projectId, useRelativeDates);

                        Events.ExecuteOnExportAsUrlApiV1TemplatesUrlGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorExportAsUrlApiV1TemplatesUrlGetDefaultImplementation(e, "/api/v1/templates/url", uriBuilderLocalVar.Path, projectId, useRelativeDates);
                Events.ExecuteOnErrorExportAsUrlApiV1TemplatesUrlGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ExportAsUrlApiV1TemplatesUrlGetApiResponse"/>
        /// </summary>
        public partial class ExportAsUrlApiV1TemplatesUrlGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IExportAsUrlApiV1TemplatesUrlGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ExportAsUrlApiV1TemplatesUrlGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ExportAsUrlApiV1TemplatesUrlGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ExportAsUrlApiV1TemplatesUrlGetApiResponse(ILogger<ExportAsUrlApiV1TemplatesUrlGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.FileURLResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.FileURLResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.FileURLResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost(ProjectId3 projectId, ref System.IO.Stream file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="projectId"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost(ProjectId3 projectId, System.IO.Stream file)
        {
            if (projectId == null)
                throw new ArgumentNullException(nameof(projectId));

            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="file"></param>
        private void AfterImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostDefaultImplementation(IImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse apiResponseLocalVar, ProjectId3 projectId, System.IO.Stream file)
        {
            bool suppressDefaultLog = false;
            AfterImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost(ref suppressDefaultLog, apiResponseLocalVar, projectId, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="file"></param>
        partial void AfterImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost(ref bool suppressDefaultLog, IImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse apiResponseLocalVar, ProjectId3 projectId, System.IO.Stream file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="file"></param>
        private void OnErrorImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId, System.IO.Stream file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectId, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="file"></param>
        partial void OnErrorImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProjectId3 projectId, System.IO.Stream file);

        /// <summary>
        /// Import Into Project From File A template can be imported in an existing project, or in a newly created one.  Upload a file suitable to be passed as a template to be imported into a project.
        /// </summary>
        /// <param name="projectId"></param>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse"/>&gt;</returns>
        public async Task<IImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse?> ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostOrDefaultAsync(ProjectId3 projectId, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostAsync(projectId, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Import Into Project From File A template can be imported in an existing project, or in a newly created one.  Upload a file suitable to be passed as a template to be imported into a project.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse"/>&gt;</returns>
        public async Task<IImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse> ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostAsync(ProjectId3 projectId, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost(projectId, file);

                FormatImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost(projectId, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/templates/import_into_project_from_file"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/templates/import_into_project_from_file");

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("project_id", ClientUtils.ParameterToString(projectId)));

                    multipartContentLocalVar.Add(new StreamContent(file));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse>();

                        ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/templates/import_into_project_from_file", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostDefaultImplementation(apiResponseLocalVar, projectId, file);

                        Events.ExecuteOnImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostDefaultImplementation(e, "/api/v1/templates/import_into_project_from_file", uriBuilderLocalVar.Path, projectId, file);
                Events.ExecuteOnErrorImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse"/>
        /// </summary>
        public partial class ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse(ILogger<ImportIntoProjectFromFileApiV1TemplatesImportIntoProjectFromFilePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ProjectImportResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ProjectImportResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ProjectImportResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost(TodoistAppsImportExportControllersRestBody todoistAppsImportExportControllersRestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="todoistAppsImportExportControllersRestBody"></param>
        /// <returns></returns>
        private void ValidateImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost(TodoistAppsImportExportControllersRestBody todoistAppsImportExportControllersRestBody)
        {
            if (todoistAppsImportExportControllersRestBody == null)
                throw new ArgumentNullException(nameof(todoistAppsImportExportControllersRestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsImportExportControllersRestBody"></param>
        private void AfterImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostDefaultImplementation(IImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse apiResponseLocalVar, TodoistAppsImportExportControllersRestBody todoistAppsImportExportControllersRestBody)
        {
            bool suppressDefaultLog = false;
            AfterImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost(ref suppressDefaultLog, apiResponseLocalVar, todoistAppsImportExportControllersRestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsImportExportControllersRestBody"></param>
        partial void AfterImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost(ref bool suppressDefaultLog, IImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse apiResponseLocalVar, TodoistAppsImportExportControllersRestBody todoistAppsImportExportControllersRestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsImportExportControllersRestBody"></param>
        private void OnErrorImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsImportExportControllersRestBody todoistAppsImportExportControllersRestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, todoistAppsImportExportControllersRestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsImportExportControllersRestBody"></param>
        partial void OnErrorImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsImportExportControllersRestBody todoistAppsImportExportControllersRestBody);

        /// <summary>
        /// Import Into Project From Template Id 
        /// </summary>
        /// <param name="todoistAppsImportExportControllersRestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse"/>&gt;</returns>
        public async Task<IImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse?> ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostOrDefaultAsync(TodoistAppsImportExportControllersRestBody todoistAppsImportExportControllersRestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostAsync(todoistAppsImportExportControllersRestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Import Into Project From Template Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsImportExportControllersRestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse"/>&gt;</returns>
        public async Task<IImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse> ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostAsync(TodoistAppsImportExportControllersRestBody todoistAppsImportExportControllersRestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost(todoistAppsImportExportControllersRestBody);

                FormatImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost(todoistAppsImportExportControllersRestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/templates/import_into_project_from_template_id"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/templates/import_into_project_from_template_id");

                    httpRequestMessageLocalVar.Content = (todoistAppsImportExportControllersRestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(todoistAppsImportExportControllersRestBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse>();

                        ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/templates/import_into_project_from_template_id", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostDefaultImplementation(apiResponseLocalVar, todoistAppsImportExportControllersRestBody);

                        Events.ExecuteOnImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostDefaultImplementation(e, "/api/v1/templates/import_into_project_from_template_id", uriBuilderLocalVar.Path, todoistAppsImportExportControllersRestBody);
                Events.ExecuteOnErrorImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse"/>
        /// </summary>
        public partial class ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse(ILogger<ImportIntoProjectFromTemplateIdApiV1TemplatesImportIntoProjectFromTemplateIdPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ProjectImportResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ProjectImportResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ProjectImportResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
