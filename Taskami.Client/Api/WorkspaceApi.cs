// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IWorkspaceApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        WorkspaceApiEvents Events { get; }

        /// <summary>
        /// Accept Invitation
        /// </summary>
        /// <remarks>
        /// Accept a workspace invitation. Usable by authenticated users only.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse"/>&gt;</returns>
        Task<IAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse> AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutAsync(string inviteCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Accept Invitation
        /// </summary>
        /// <remarks>
        /// Accept a workspace invitation. Usable by authenticated users only.
        /// </remarks>
        /// <param name="inviteCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse"/>?&gt;</returns>
        Task<IAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse?> AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutOrDefaultAsync(string inviteCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Active Projects
        /// </summary>
        /// <remarks>
        /// Returns all active workspace projects, including those visible but not joined by the user.  _For guests, returns all joined workspace projects only._
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse"/>&gt;</returns>
        Task<IActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse> ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetAsync(int workspaceId, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Active Projects
        /// </summary>
        /// <remarks>
        /// Returns all active workspace projects, including those visible but not joined by the user.  _For guests, returns all joined workspace projects only._
        /// </remarks>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse"/>?&gt;</returns>
        Task<IActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse?> ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetOrDefaultAsync(int workspaceId, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// All Invitations
        /// </summary>
        /// <remarks>
        /// Return a list containing details of all pending invitation to a workspace.  This list is not paginated. All workspace members can access this list.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse"/>&gt;</returns>
        Task<IAllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse> AllInvitationsApiV1WorkspacesInvitationsAllGetAsync(int workspaceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// All Invitations
        /// </summary>
        /// <remarks>
        /// Return a list containing details of all pending invitation to a workspace.  This list is not paginated. All workspace members can access this list.
        /// </remarks>
        /// <param name="workspaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse"/>?&gt;</returns>
        Task<IAllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse?> AllInvitationsApiV1WorkspacesInvitationsAllGetOrDefaultAsync(int workspaceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Archived Projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse"/>&gt;</returns>
        Task<IArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse> ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetAsync(int workspaceId, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Archived Projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse"/>?&gt;</returns>
        Task<IArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse?> ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetOrDefaultAsync(int workspaceId, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Invitation
        /// </summary>
        /// <remarks>
        /// Deletes a workspace invitation. Only admins can delete invitations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse"/>&gt;</returns>
        Task<IDeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse> DeleteInvitationApiV1WorkspacesInvitationsDeletePostAsync(TodoistAppsApiSyncRestWorkspacesBody1 todoistAppsApiSyncRestWorkspacesBody1, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Invitation
        /// </summary>
        /// <remarks>
        /// Deletes a workspace invitation. Only admins can delete invitations.
        /// </remarks>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse"/>?&gt;</returns>
        Task<IDeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse?> DeleteInvitationApiV1WorkspacesInvitationsDeletePostOrDefaultAsync(TodoistAppsApiSyncRestWorkspacesBody1 todoistAppsApiSyncRestWorkspacesBody1, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Workspaces Users
        /// </summary>
        /// <remarks>
        /// Returns all workspace_users for a given workspace if workspace_id is provided. Otherwise, returns all workspace_users for all workspaces that the requesting user is part of.  _Not accessible by guests._
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse"/>&gt;</returns>
        Task<IGetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse> GetWorkspacesUsersApiV1WorkspacesUsersGetAsync(Option<int?> workspaceId = default, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Workspaces Users
        /// </summary>
        /// <remarks>
        /// Returns all workspace_users for a given workspace if workspace_id is provided. Otherwise, returns all workspace_users for all workspaces that the requesting user is part of.  _Not accessible by guests._
        /// </remarks>
        /// <param name="workspaceId"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse"/>?&gt;</returns>
        Task<IGetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse?> GetWorkspacesUsersApiV1WorkspacesUsersGetOrDefaultAsync(Option<int?> workspaceId = default, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Invitations
        /// </summary>
        /// <remarks>
        /// Return a list of user emails who have a pending invitation to a workspace.  The list is not paginated. All workspace members can access this list.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInvitationsApiV1WorkspacesInvitationsGetApiResponse"/>&gt;</returns>
        Task<IInvitationsApiV1WorkspacesInvitationsGetApiResponse> InvitationsApiV1WorkspacesInvitationsGetAsync(int workspaceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Invitations
        /// </summary>
        /// <remarks>
        /// Return a list of user emails who have a pending invitation to a workspace.  The list is not paginated. All workspace members can access this list.
        /// </remarks>
        /// <param name="workspaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInvitationsApiV1WorkspacesInvitationsGetApiResponse"/>?&gt;</returns>
        Task<IInvitationsApiV1WorkspacesInvitationsGetApiResponse?> InvitationsApiV1WorkspacesInvitationsGetOrDefaultAsync(int workspaceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Join
        /// </summary>
        /// <remarks>
        /// Join a workspace via link or via workspace ID, if the user can auto-join the workspace by domain.  ## Joining by Domain This is possible if: - The user is verified - The user has a user e-mail belonging to a domain that is set   as a domain name for a workspace - That workspace has the auto-join by domain feature enabled
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJoinApiV1WorkspacesJoinPostApiResponse"/>&gt;</returns>
        Task<IJoinApiV1WorkspacesJoinPostApiResponse> JoinApiV1WorkspacesJoinPostAsync(TodoistAppsApiSyncRestWorkspacesBody2 todoistAppsApiSyncRestWorkspacesBody2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Join
        /// </summary>
        /// <remarks>
        /// Join a workspace via link or via workspace ID, if the user can auto-join the workspace by domain.  ## Joining by Domain This is possible if: - The user is verified - The user has a user e-mail belonging to a domain that is set   as a domain name for a workspace - That workspace has the auto-join by domain feature enabled
        /// </remarks>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJoinApiV1WorkspacesJoinPostApiResponse"/>?&gt;</returns>
        Task<IJoinApiV1WorkspacesJoinPostApiResponse?> JoinApiV1WorkspacesJoinPostOrDefaultAsync(TodoistAppsApiSyncRestWorkspacesBody2 todoistAppsApiSyncRestWorkspacesBody2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Plan Details
        /// </summary>
        /// <remarks>
        /// Lists details of the workspace&#39;s current plan and usage
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse"/>&gt;</returns>
        Task<IPlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse> PlanDetailsApiV1WorkspacesPlanDetailsGetAsync(int workspaceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Plan Details
        /// </summary>
        /// <remarks>
        /// Lists details of the workspace&#39;s current plan and usage
        /// </remarks>
        /// <param name="workspaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse"/>?&gt;</returns>
        Task<IPlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse?> PlanDetailsApiV1WorkspacesPlanDetailsGetOrDefaultAsync(int workspaceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reject Invitation
        /// </summary>
        /// <remarks>
        /// Reject a workspace invitation. Usable by authenticated users only.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse"/>&gt;</returns>
        Task<IRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse> RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutAsync(string inviteCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reject Invitation
        /// </summary>
        /// <remarks>
        /// Reject a workspace invitation. Usable by authenticated users only.
        /// </remarks>
        /// <param name="inviteCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse"/>?&gt;</returns>
        Task<IRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse?> RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutOrDefaultAsync(string inviteCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Logo
        /// </summary>
        /// <remarks>
        /// Upload an image to be used as the workspace logo. Similar to a user’s avatar. If &#x60;delete&#x60; is set to true, it removes the logo completely and does not return any &#x60;logo_*&#x60; attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"></param>
        /// <param name="file"></param>
        /// <param name="delete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLogoApiV1WorkspacesLogoPostApiResponse"/>&gt;</returns>
        Task<IUpdateLogoApiV1WorkspacesLogoPostApiResponse> UpdateLogoApiV1WorkspacesLogoPostAsync(int workspaceId, System.IO.Stream file, Option<bool> delete = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Logo
        /// </summary>
        /// <remarks>
        /// Upload an image to be used as the workspace logo. Similar to a user’s avatar. If &#x60;delete&#x60; is set to true, it removes the logo completely and does not return any &#x60;logo_*&#x60; attribute.
        /// </remarks>
        /// <param name="workspaceId"></param>
        /// <param name="file"></param>
        /// <param name="delete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLogoApiV1WorkspacesLogoPostApiResponse"/>?&gt;</returns>
        Task<IUpdateLogoApiV1WorkspacesLogoPostApiResponse?> UpdateLogoApiV1WorkspacesLogoPostOrDefaultAsync(int workspaceId, System.IO.Stream file, Option<bool> delete = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse"/>
    /// </summary>
    public interface IAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.WorkspaceInvitationView?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse"/>
    /// </summary>
    public interface IActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ProjectsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IAllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse"/>
    /// </summary>
    public interface IAllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<WorkspaceInvitationView>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse"/>
    /// </summary>
    public interface IArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ProjectsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse"/>
    /// </summary>
    public interface IDeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.WorkspaceInvitationView?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse"/>
    /// </summary>
    public interface IGetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IInvitationsApiV1WorkspacesInvitationsGetApiResponse"/>
    /// </summary>
    public interface IInvitationsApiV1WorkspacesInvitationsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<string>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IJoinApiV1WorkspacesJoinPostApiResponse"/>
    /// </summary>
    public interface IJoinApiV1WorkspacesJoinPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.WorkspaceUserView?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse"/>
    /// </summary>
    public interface IPlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PlanDetailsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse"/>
    /// </summary>
    public interface IRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.WorkspaceInvitationView?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateLogoApiV1WorkspacesLogoPostApiResponse"/>
    /// </summary>
    public interface IUpdateLogoApiV1WorkspacesLogoPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Dictionary<string, Object>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WorkspaceApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut;

        internal void ExecuteOnAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut(WorkspaceApi.AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse apiResponse)
        {
            OnAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut(Exception exception)
        {
            OnErrorAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet;

        internal void ExecuteOnActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet(WorkspaceApi.ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse apiResponse)
        {
            OnActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet(Exception exception)
        {
            OnErrorActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAllInvitationsApiV1WorkspacesInvitationsAllGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAllInvitationsApiV1WorkspacesInvitationsAllGet;

        internal void ExecuteOnAllInvitationsApiV1WorkspacesInvitationsAllGet(WorkspaceApi.AllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse apiResponse)
        {
            OnAllInvitationsApiV1WorkspacesInvitationsAllGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAllInvitationsApiV1WorkspacesInvitationsAllGet(Exception exception)
        {
            OnErrorAllInvitationsApiV1WorkspacesInvitationsAllGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet;

        internal void ExecuteOnArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet(WorkspaceApi.ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse apiResponse)
        {
            OnArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet(Exception exception)
        {
            OnErrorArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteInvitationApiV1WorkspacesInvitationsDeletePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteInvitationApiV1WorkspacesInvitationsDeletePost;

        internal void ExecuteOnDeleteInvitationApiV1WorkspacesInvitationsDeletePost(WorkspaceApi.DeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse apiResponse)
        {
            OnDeleteInvitationApiV1WorkspacesInvitationsDeletePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteInvitationApiV1WorkspacesInvitationsDeletePost(Exception exception)
        {
            OnErrorDeleteInvitationApiV1WorkspacesInvitationsDeletePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetWorkspacesUsersApiV1WorkspacesUsersGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetWorkspacesUsersApiV1WorkspacesUsersGet;

        internal void ExecuteOnGetWorkspacesUsersApiV1WorkspacesUsersGet(WorkspaceApi.GetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse apiResponse)
        {
            OnGetWorkspacesUsersApiV1WorkspacesUsersGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWorkspacesUsersApiV1WorkspacesUsersGet(Exception exception)
        {
            OnErrorGetWorkspacesUsersApiV1WorkspacesUsersGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInvitationsApiV1WorkspacesInvitationsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInvitationsApiV1WorkspacesInvitationsGet;

        internal void ExecuteOnInvitationsApiV1WorkspacesInvitationsGet(WorkspaceApi.InvitationsApiV1WorkspacesInvitationsGetApiResponse apiResponse)
        {
            OnInvitationsApiV1WorkspacesInvitationsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInvitationsApiV1WorkspacesInvitationsGet(Exception exception)
        {
            OnErrorInvitationsApiV1WorkspacesInvitationsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJoinApiV1WorkspacesJoinPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJoinApiV1WorkspacesJoinPost;

        internal void ExecuteOnJoinApiV1WorkspacesJoinPost(WorkspaceApi.JoinApiV1WorkspacesJoinPostApiResponse apiResponse)
        {
            OnJoinApiV1WorkspacesJoinPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJoinApiV1WorkspacesJoinPost(Exception exception)
        {
            OnErrorJoinApiV1WorkspacesJoinPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPlanDetailsApiV1WorkspacesPlanDetailsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPlanDetailsApiV1WorkspacesPlanDetailsGet;

        internal void ExecuteOnPlanDetailsApiV1WorkspacesPlanDetailsGet(WorkspaceApi.PlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse apiResponse)
        {
            OnPlanDetailsApiV1WorkspacesPlanDetailsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPlanDetailsApiV1WorkspacesPlanDetailsGet(Exception exception)
        {
            OnErrorPlanDetailsApiV1WorkspacesPlanDetailsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut;

        internal void ExecuteOnRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut(WorkspaceApi.RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse apiResponse)
        {
            OnRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut(Exception exception)
        {
            OnErrorRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateLogoApiV1WorkspacesLogoPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateLogoApiV1WorkspacesLogoPost;

        internal void ExecuteOnUpdateLogoApiV1WorkspacesLogoPost(WorkspaceApi.UpdateLogoApiV1WorkspacesLogoPostApiResponse apiResponse)
        {
            OnUpdateLogoApiV1WorkspacesLogoPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateLogoApiV1WorkspacesLogoPost(Exception exception)
        {
            OnErrorUpdateLogoApiV1WorkspacesLogoPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class WorkspaceApi : IWorkspaceApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<WorkspaceApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public WorkspaceApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkspaceApi(ILogger<WorkspaceApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, WorkspaceApiEvents workspaceApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<WorkspaceApi>();
            HttpClient = httpClient;
            Events = workspaceApiEvents;
        }

        partial void FormatAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut(ref string inviteCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="inviteCode"></param>
        /// <returns></returns>
        private void ValidateAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut(string inviteCode)
        {
            if (inviteCode == null)
                throw new ArgumentNullException(nameof(inviteCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inviteCode"></param>
        private void AfterAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutDefaultImplementation(IAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse apiResponseLocalVar, string inviteCode)
        {
            bool suppressDefaultLog = false;
            AfterAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut(ref suppressDefaultLog, apiResponseLocalVar, inviteCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inviteCode"></param>
        partial void AfterAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut(ref bool suppressDefaultLog, IAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse apiResponseLocalVar, string inviteCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inviteCode"></param>
        private void OnErrorAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string inviteCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inviteCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inviteCode"></param>
        partial void OnErrorAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string inviteCode);

        /// <summary>
        /// Accept Invitation Accept a workspace invitation. Usable by authenticated users only.
        /// </summary>
        /// <param name="inviteCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse"/>&gt;</returns>
        public async Task<IAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse?> AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutOrDefaultAsync(string inviteCode, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutAsync(inviteCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Accept Invitation Accept a workspace invitation. Usable by authenticated users only.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse"/>&gt;</returns>
        public async Task<IAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse> AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutAsync(string inviteCode, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut(inviteCode);

                FormatAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut(ref inviteCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/workspaces/invitations/{invite_code}/accept"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/workspaces/invitations/{invite_code}/accept");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Binvite_code%7D", Uri.EscapeDataString(inviteCode.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse>();

                        AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/workspaces/invitations/{invite_code}/accept", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutDefaultImplementation(apiResponseLocalVar, inviteCode);

                        Events.ExecuteOnAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutDefaultImplementation(e, "/api/v1/workspaces/invitations/{invite_code}/accept", uriBuilderLocalVar.Path, inviteCode);
                Events.ExecuteOnErrorAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse"/>
        /// </summary>
        public partial class AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse : Org.OpenAPITools.Client.ApiResponse, IAcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse(ILogger<AcceptInvitationApiV1WorkspacesInvitationsInviteCodeAcceptPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.WorkspaceInvitationView? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.WorkspaceInvitationView>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.WorkspaceInvitationView? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet(ref int workspaceId, ref Option<string?> cursor, ref Option<int> limit);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void AfterActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetDefaultImplementation(IActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse apiResponseLocalVar, int workspaceId, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet(ref suppressDefaultLog, apiResponseLocalVar, workspaceId, cursor, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void AfterActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet(ref bool suppressDefaultLog, IActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse apiResponseLocalVar, int workspaceId, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void OnErrorActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int workspaceId, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, workspaceId, cursor, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void OnErrorActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int workspaceId, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Active Projects Returns all active workspace projects, including those visible but not joined by the user.  _For guests, returns all joined workspace projects only._
        /// </summary>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse"/>&gt;</returns>
        public async Task<IActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse?> ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetOrDefaultAsync(int workspaceId, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetAsync(workspaceId, cursor, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Active Projects Returns all active workspace projects, including those visible but not joined by the user.  _For guests, returns all joined workspace projects only._
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse"/>&gt;</returns>
        public async Task<IActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse> ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetAsync(int workspaceId, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet(ref workspaceId, ref cursor, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/workspaces/{workspace_id}/projects/active"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/workspaces/{workspace_id}/projects/active");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bworkspace_id%7D", Uri.EscapeDataString(workspaceId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (cursor.IsSet)
                        parseQueryStringLocalVar["cursor"] = ClientUtils.ParameterToString(cursor.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse>();

                        ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/workspaces/{workspace_id}/projects/active", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetDefaultImplementation(apiResponseLocalVar, workspaceId, cursor, limit);

                        Events.ExecuteOnActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetDefaultImplementation(e, "/api/v1/workspaces/{workspace_id}/projects/active", uriBuilderLocalVar.Path, workspaceId, cursor, limit);
                Events.ExecuteOnErrorActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse"/>
        /// </summary>
        public partial class ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse(ILogger<ActiveProjectsApiV1WorkspacesWorkspaceIdProjectsActiveGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ProjectsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ProjectsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ProjectsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAllInvitationsApiV1WorkspacesInvitationsAllGet(ref int workspaceId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        private void AfterAllInvitationsApiV1WorkspacesInvitationsAllGetDefaultImplementation(IAllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse apiResponseLocalVar, int workspaceId)
        {
            bool suppressDefaultLog = false;
            AfterAllInvitationsApiV1WorkspacesInvitationsAllGet(ref suppressDefaultLog, apiResponseLocalVar, workspaceId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        partial void AfterAllInvitationsApiV1WorkspacesInvitationsAllGet(ref bool suppressDefaultLog, IAllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse apiResponseLocalVar, int workspaceId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        private void OnErrorAllInvitationsApiV1WorkspacesInvitationsAllGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int workspaceId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAllInvitationsApiV1WorkspacesInvitationsAllGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, workspaceId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        partial void OnErrorAllInvitationsApiV1WorkspacesInvitationsAllGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int workspaceId);

        /// <summary>
        /// All Invitations Return a list containing details of all pending invitation to a workspace.  This list is not paginated. All workspace members can access this list.
        /// </summary>
        /// <param name="workspaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse"/>&gt;</returns>
        public async Task<IAllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse?> AllInvitationsApiV1WorkspacesInvitationsAllGetOrDefaultAsync(int workspaceId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AllInvitationsApiV1WorkspacesInvitationsAllGetAsync(workspaceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// All Invitations Return a list containing details of all pending invitation to a workspace.  This list is not paginated. All workspace members can access this list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse"/>&gt;</returns>
        public async Task<IAllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse> AllInvitationsApiV1WorkspacesInvitationsAllGetAsync(int workspaceId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatAllInvitationsApiV1WorkspacesInvitationsAllGet(ref workspaceId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/workspaces/invitations/all"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/workspaces/invitations/all");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["workspace_id"] = ClientUtils.ParameterToString(workspaceId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse>();

                        AllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/workspaces/invitations/all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAllInvitationsApiV1WorkspacesInvitationsAllGetDefaultImplementation(apiResponseLocalVar, workspaceId);

                        Events.ExecuteOnAllInvitationsApiV1WorkspacesInvitationsAllGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAllInvitationsApiV1WorkspacesInvitationsAllGetDefaultImplementation(e, "/api/v1/workspaces/invitations/all", uriBuilderLocalVar.Path, workspaceId);
                Events.ExecuteOnErrorAllInvitationsApiV1WorkspacesInvitationsAllGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse"/>
        /// </summary>
        public partial class AllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IAllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse(ILogger<AllInvitationsApiV1WorkspacesInvitationsAllGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<WorkspaceInvitationView>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<WorkspaceInvitationView>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<WorkspaceInvitationView>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet(ref int workspaceId, ref Option<string?> cursor, ref Option<int> limit);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void AfterArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetDefaultImplementation(IArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse apiResponseLocalVar, int workspaceId, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet(ref suppressDefaultLog, apiResponseLocalVar, workspaceId, cursor, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void AfterArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet(ref bool suppressDefaultLog, IArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse apiResponseLocalVar, int workspaceId, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void OnErrorArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int workspaceId, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, workspaceId, cursor, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void OnErrorArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int workspaceId, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Archived Projects 
        /// </summary>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse"/>&gt;</returns>
        public async Task<IArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse?> ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetOrDefaultAsync(int workspaceId, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetAsync(workspaceId, cursor, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Archived Projects 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse"/>&gt;</returns>
        public async Task<IArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse> ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetAsync(int workspaceId, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet(ref workspaceId, ref cursor, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/workspaces/{workspace_id}/projects/archived"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/workspaces/{workspace_id}/projects/archived");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bworkspace_id%7D", Uri.EscapeDataString(workspaceId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (cursor.IsSet)
                        parseQueryStringLocalVar["cursor"] = ClientUtils.ParameterToString(cursor.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse>();

                        ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/workspaces/{workspace_id}/projects/archived", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetDefaultImplementation(apiResponseLocalVar, workspaceId, cursor, limit);

                        Events.ExecuteOnArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetDefaultImplementation(e, "/api/v1/workspaces/{workspace_id}/projects/archived", uriBuilderLocalVar.Path, workspaceId, cursor, limit);
                Events.ExecuteOnErrorArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse"/>
        /// </summary>
        public partial class ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse(ILogger<ArchivedProjectsApiV1WorkspacesWorkspaceIdProjectsArchivedGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ProjectsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ProjectsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ProjectsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteInvitationApiV1WorkspacesInvitationsDeletePost(TodoistAppsApiSyncRestWorkspacesBody1 todoistAppsApiSyncRestWorkspacesBody1);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody1"></param>
        /// <returns></returns>
        private void ValidateDeleteInvitationApiV1WorkspacesInvitationsDeletePost(TodoistAppsApiSyncRestWorkspacesBody1 todoistAppsApiSyncRestWorkspacesBody1)
        {
            if (todoistAppsApiSyncRestWorkspacesBody1 == null)
                throw new ArgumentNullException(nameof(todoistAppsApiSyncRestWorkspacesBody1));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody1"></param>
        private void AfterDeleteInvitationApiV1WorkspacesInvitationsDeletePostDefaultImplementation(IDeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse apiResponseLocalVar, TodoistAppsApiSyncRestWorkspacesBody1 todoistAppsApiSyncRestWorkspacesBody1)
        {
            bool suppressDefaultLog = false;
            AfterDeleteInvitationApiV1WorkspacesInvitationsDeletePost(ref suppressDefaultLog, apiResponseLocalVar, todoistAppsApiSyncRestWorkspacesBody1);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody1"></param>
        partial void AfterDeleteInvitationApiV1WorkspacesInvitationsDeletePost(ref bool suppressDefaultLog, IDeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse apiResponseLocalVar, TodoistAppsApiSyncRestWorkspacesBody1 todoistAppsApiSyncRestWorkspacesBody1);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody1"></param>
        private void OnErrorDeleteInvitationApiV1WorkspacesInvitationsDeletePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiSyncRestWorkspacesBody1 todoistAppsApiSyncRestWorkspacesBody1)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteInvitationApiV1WorkspacesInvitationsDeletePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, todoistAppsApiSyncRestWorkspacesBody1);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody1"></param>
        partial void OnErrorDeleteInvitationApiV1WorkspacesInvitationsDeletePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiSyncRestWorkspacesBody1 todoistAppsApiSyncRestWorkspacesBody1);

        /// <summary>
        /// Delete Invitation Deletes a workspace invitation. Only admins can delete invitations.
        /// </summary>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse"/>&gt;</returns>
        public async Task<IDeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse?> DeleteInvitationApiV1WorkspacesInvitationsDeletePostOrDefaultAsync(TodoistAppsApiSyncRestWorkspacesBody1 todoistAppsApiSyncRestWorkspacesBody1, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteInvitationApiV1WorkspacesInvitationsDeletePostAsync(todoistAppsApiSyncRestWorkspacesBody1, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Invitation Deletes a workspace invitation. Only admins can delete invitations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse"/>&gt;</returns>
        public async Task<IDeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse> DeleteInvitationApiV1WorkspacesInvitationsDeletePostAsync(TodoistAppsApiSyncRestWorkspacesBody1 todoistAppsApiSyncRestWorkspacesBody1, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteInvitationApiV1WorkspacesInvitationsDeletePost(todoistAppsApiSyncRestWorkspacesBody1);

                FormatDeleteInvitationApiV1WorkspacesInvitationsDeletePost(todoistAppsApiSyncRestWorkspacesBody1);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/workspaces/invitations/delete"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/workspaces/invitations/delete");

                    httpRequestMessageLocalVar.Content = (todoistAppsApiSyncRestWorkspacesBody1 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(todoistAppsApiSyncRestWorkspacesBody1, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse>();

                        DeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/workspaces/invitations/delete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteInvitationApiV1WorkspacesInvitationsDeletePostDefaultImplementation(apiResponseLocalVar, todoistAppsApiSyncRestWorkspacesBody1);

                        Events.ExecuteOnDeleteInvitationApiV1WorkspacesInvitationsDeletePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteInvitationApiV1WorkspacesInvitationsDeletePostDefaultImplementation(e, "/api/v1/workspaces/invitations/delete", uriBuilderLocalVar.Path, todoistAppsApiSyncRestWorkspacesBody1);
                Events.ExecuteOnErrorDeleteInvitationApiV1WorkspacesInvitationsDeletePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse"/>
        /// </summary>
        public partial class DeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse(ILogger<DeleteInvitationApiV1WorkspacesInvitationsDeletePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.WorkspaceInvitationView? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.WorkspaceInvitationView>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.WorkspaceInvitationView? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWorkspacesUsersApiV1WorkspacesUsersGet(ref Option<int?> workspaceId, ref Option<string?> cursor, ref Option<int> limit);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void AfterGetWorkspacesUsersApiV1WorkspacesUsersGetDefaultImplementation(IGetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse apiResponseLocalVar, Option<int?> workspaceId, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterGetWorkspacesUsersApiV1WorkspacesUsersGet(ref suppressDefaultLog, apiResponseLocalVar, workspaceId, cursor, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void AfterGetWorkspacesUsersApiV1WorkspacesUsersGet(ref bool suppressDefaultLog, IGetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse apiResponseLocalVar, Option<int?> workspaceId, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void OnErrorGetWorkspacesUsersApiV1WorkspacesUsersGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> workspaceId, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWorkspacesUsersApiV1WorkspacesUsersGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, workspaceId, cursor, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void OnErrorGetWorkspacesUsersApiV1WorkspacesUsersGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> workspaceId, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Get Workspaces Users Returns all workspace_users for a given workspace if workspace_id is provided. Otherwise, returns all workspace_users for all workspaces that the requesting user is part of.  _Not accessible by guests._
        /// </summary>
        /// <param name="workspaceId"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse"/>&gt;</returns>
        public async Task<IGetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse?> GetWorkspacesUsersApiV1WorkspacesUsersGetOrDefaultAsync(Option<int?> workspaceId = default, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWorkspacesUsersApiV1WorkspacesUsersGetAsync(workspaceId, cursor, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Workspaces Users Returns all workspace_users for a given workspace if workspace_id is provided. Otherwise, returns all workspace_users for all workspaces that the requesting user is part of.  _Not accessible by guests._
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse"/>&gt;</returns>
        public async Task<IGetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse> GetWorkspacesUsersApiV1WorkspacesUsersGetAsync(Option<int?> workspaceId = default, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetWorkspacesUsersApiV1WorkspacesUsersGet(ref workspaceId, ref cursor, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/workspaces/users"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/workspaces/users");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (workspaceId.IsSet)
                        parseQueryStringLocalVar["workspace_id"] = ClientUtils.ParameterToString(workspaceId.Value);

                    if (cursor.IsSet)
                        parseQueryStringLocalVar["cursor"] = ClientUtils.ParameterToString(cursor.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse>();

                        GetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/workspaces/users", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWorkspacesUsersApiV1WorkspacesUsersGetDefaultImplementation(apiResponseLocalVar, workspaceId, cursor, limit);

                        Events.ExecuteOnGetWorkspacesUsersApiV1WorkspacesUsersGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWorkspacesUsersApiV1WorkspacesUsersGetDefaultImplementation(e, "/api/v1/workspaces/users", uriBuilderLocalVar.Path, workspaceId, cursor, limit);
                Events.ExecuteOnErrorGetWorkspacesUsersApiV1WorkspacesUsersGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse"/>
        /// </summary>
        public partial class GetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse(ILogger<GetWorkspacesUsersApiV1WorkspacesUsersGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInvitationsApiV1WorkspacesInvitationsGet(ref int workspaceId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        private void AfterInvitationsApiV1WorkspacesInvitationsGetDefaultImplementation(IInvitationsApiV1WorkspacesInvitationsGetApiResponse apiResponseLocalVar, int workspaceId)
        {
            bool suppressDefaultLog = false;
            AfterInvitationsApiV1WorkspacesInvitationsGet(ref suppressDefaultLog, apiResponseLocalVar, workspaceId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        partial void AfterInvitationsApiV1WorkspacesInvitationsGet(ref bool suppressDefaultLog, IInvitationsApiV1WorkspacesInvitationsGetApiResponse apiResponseLocalVar, int workspaceId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        private void OnErrorInvitationsApiV1WorkspacesInvitationsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int workspaceId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInvitationsApiV1WorkspacesInvitationsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, workspaceId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        partial void OnErrorInvitationsApiV1WorkspacesInvitationsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int workspaceId);

        /// <summary>
        /// Invitations Return a list of user emails who have a pending invitation to a workspace.  The list is not paginated. All workspace members can access this list.
        /// </summary>
        /// <param name="workspaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInvitationsApiV1WorkspacesInvitationsGetApiResponse"/>&gt;</returns>
        public async Task<IInvitationsApiV1WorkspacesInvitationsGetApiResponse?> InvitationsApiV1WorkspacesInvitationsGetOrDefaultAsync(int workspaceId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InvitationsApiV1WorkspacesInvitationsGetAsync(workspaceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Invitations Return a list of user emails who have a pending invitation to a workspace.  The list is not paginated. All workspace members can access this list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInvitationsApiV1WorkspacesInvitationsGetApiResponse"/>&gt;</returns>
        public async Task<IInvitationsApiV1WorkspacesInvitationsGetApiResponse> InvitationsApiV1WorkspacesInvitationsGetAsync(int workspaceId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatInvitationsApiV1WorkspacesInvitationsGet(ref workspaceId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/workspaces/invitations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/workspaces/invitations");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["workspace_id"] = ClientUtils.ParameterToString(workspaceId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InvitationsApiV1WorkspacesInvitationsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InvitationsApiV1WorkspacesInvitationsGetApiResponse>();

                        InvitationsApiV1WorkspacesInvitationsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/workspaces/invitations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInvitationsApiV1WorkspacesInvitationsGetDefaultImplementation(apiResponseLocalVar, workspaceId);

                        Events.ExecuteOnInvitationsApiV1WorkspacesInvitationsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInvitationsApiV1WorkspacesInvitationsGetDefaultImplementation(e, "/api/v1/workspaces/invitations", uriBuilderLocalVar.Path, workspaceId);
                Events.ExecuteOnErrorInvitationsApiV1WorkspacesInvitationsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InvitationsApiV1WorkspacesInvitationsGetApiResponse"/>
        /// </summary>
        public partial class InvitationsApiV1WorkspacesInvitationsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IInvitationsApiV1WorkspacesInvitationsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InvitationsApiV1WorkspacesInvitationsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InvitationsApiV1WorkspacesInvitationsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InvitationsApiV1WorkspacesInvitationsGetApiResponse(ILogger<InvitationsApiV1WorkspacesInvitationsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<string>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<string>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<string>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJoinApiV1WorkspacesJoinPost(TodoistAppsApiSyncRestWorkspacesBody2 todoistAppsApiSyncRestWorkspacesBody2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody2"></param>
        /// <returns></returns>
        private void ValidateJoinApiV1WorkspacesJoinPost(TodoistAppsApiSyncRestWorkspacesBody2 todoistAppsApiSyncRestWorkspacesBody2)
        {
            if (todoistAppsApiSyncRestWorkspacesBody2 == null)
                throw new ArgumentNullException(nameof(todoistAppsApiSyncRestWorkspacesBody2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody2"></param>
        private void AfterJoinApiV1WorkspacesJoinPostDefaultImplementation(IJoinApiV1WorkspacesJoinPostApiResponse apiResponseLocalVar, TodoistAppsApiSyncRestWorkspacesBody2 todoistAppsApiSyncRestWorkspacesBody2)
        {
            bool suppressDefaultLog = false;
            AfterJoinApiV1WorkspacesJoinPost(ref suppressDefaultLog, apiResponseLocalVar, todoistAppsApiSyncRestWorkspacesBody2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody2"></param>
        partial void AfterJoinApiV1WorkspacesJoinPost(ref bool suppressDefaultLog, IJoinApiV1WorkspacesJoinPostApiResponse apiResponseLocalVar, TodoistAppsApiSyncRestWorkspacesBody2 todoistAppsApiSyncRestWorkspacesBody2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody2"></param>
        private void OnErrorJoinApiV1WorkspacesJoinPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiSyncRestWorkspacesBody2 todoistAppsApiSyncRestWorkspacesBody2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJoinApiV1WorkspacesJoinPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, todoistAppsApiSyncRestWorkspacesBody2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody2"></param>
        partial void OnErrorJoinApiV1WorkspacesJoinPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiSyncRestWorkspacesBody2 todoistAppsApiSyncRestWorkspacesBody2);

        /// <summary>
        /// Join Join a workspace via link or via workspace ID, if the user can auto-join the workspace by domain.  ## Joining by Domain This is possible if: - The user is verified - The user has a user e-mail belonging to a domain that is set   as a domain name for a workspace - That workspace has the auto-join by domain feature enabled
        /// </summary>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJoinApiV1WorkspacesJoinPostApiResponse"/>&gt;</returns>
        public async Task<IJoinApiV1WorkspacesJoinPostApiResponse?> JoinApiV1WorkspacesJoinPostOrDefaultAsync(TodoistAppsApiSyncRestWorkspacesBody2 todoistAppsApiSyncRestWorkspacesBody2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JoinApiV1WorkspacesJoinPostAsync(todoistAppsApiSyncRestWorkspacesBody2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Join Join a workspace via link or via workspace ID, if the user can auto-join the workspace by domain.  ## Joining by Domain This is possible if: - The user is verified - The user has a user e-mail belonging to a domain that is set   as a domain name for a workspace - That workspace has the auto-join by domain feature enabled
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiSyncRestWorkspacesBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJoinApiV1WorkspacesJoinPostApiResponse"/>&gt;</returns>
        public async Task<IJoinApiV1WorkspacesJoinPostApiResponse> JoinApiV1WorkspacesJoinPostAsync(TodoistAppsApiSyncRestWorkspacesBody2 todoistAppsApiSyncRestWorkspacesBody2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJoinApiV1WorkspacesJoinPost(todoistAppsApiSyncRestWorkspacesBody2);

                FormatJoinApiV1WorkspacesJoinPost(todoistAppsApiSyncRestWorkspacesBody2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/workspaces/join"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/workspaces/join");

                    httpRequestMessageLocalVar.Content = (todoistAppsApiSyncRestWorkspacesBody2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(todoistAppsApiSyncRestWorkspacesBody2, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JoinApiV1WorkspacesJoinPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JoinApiV1WorkspacesJoinPostApiResponse>();

                        JoinApiV1WorkspacesJoinPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/workspaces/join", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJoinApiV1WorkspacesJoinPostDefaultImplementation(apiResponseLocalVar, todoistAppsApiSyncRestWorkspacesBody2);

                        Events.ExecuteOnJoinApiV1WorkspacesJoinPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJoinApiV1WorkspacesJoinPostDefaultImplementation(e, "/api/v1/workspaces/join", uriBuilderLocalVar.Path, todoistAppsApiSyncRestWorkspacesBody2);
                Events.ExecuteOnErrorJoinApiV1WorkspacesJoinPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JoinApiV1WorkspacesJoinPostApiResponse"/>
        /// </summary>
        public partial class JoinApiV1WorkspacesJoinPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IJoinApiV1WorkspacesJoinPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JoinApiV1WorkspacesJoinPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JoinApiV1WorkspacesJoinPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JoinApiV1WorkspacesJoinPostApiResponse(ILogger<JoinApiV1WorkspacesJoinPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.WorkspaceUserView? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.WorkspaceUserView>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.WorkspaceUserView? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPlanDetailsApiV1WorkspacesPlanDetailsGet(ref int workspaceId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        private void AfterPlanDetailsApiV1WorkspacesPlanDetailsGetDefaultImplementation(IPlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse apiResponseLocalVar, int workspaceId)
        {
            bool suppressDefaultLog = false;
            AfterPlanDetailsApiV1WorkspacesPlanDetailsGet(ref suppressDefaultLog, apiResponseLocalVar, workspaceId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        partial void AfterPlanDetailsApiV1WorkspacesPlanDetailsGet(ref bool suppressDefaultLog, IPlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse apiResponseLocalVar, int workspaceId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        private void OnErrorPlanDetailsApiV1WorkspacesPlanDetailsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int workspaceId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPlanDetailsApiV1WorkspacesPlanDetailsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, workspaceId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        partial void OnErrorPlanDetailsApiV1WorkspacesPlanDetailsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int workspaceId);

        /// <summary>
        /// Plan Details Lists details of the workspace&#39;s current plan and usage
        /// </summary>
        /// <param name="workspaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse"/>&gt;</returns>
        public async Task<IPlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse?> PlanDetailsApiV1WorkspacesPlanDetailsGetOrDefaultAsync(int workspaceId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PlanDetailsApiV1WorkspacesPlanDetailsGetAsync(workspaceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Plan Details Lists details of the workspace&#39;s current plan and usage
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse"/>&gt;</returns>
        public async Task<IPlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse> PlanDetailsApiV1WorkspacesPlanDetailsGetAsync(int workspaceId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatPlanDetailsApiV1WorkspacesPlanDetailsGet(ref workspaceId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/workspaces/plan_details"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/workspaces/plan_details");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["workspace_id"] = ClientUtils.ParameterToString(workspaceId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse>();

                        PlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/workspaces/plan_details", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPlanDetailsApiV1WorkspacesPlanDetailsGetDefaultImplementation(apiResponseLocalVar, workspaceId);

                        Events.ExecuteOnPlanDetailsApiV1WorkspacesPlanDetailsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPlanDetailsApiV1WorkspacesPlanDetailsGetDefaultImplementation(e, "/api/v1/workspaces/plan_details", uriBuilderLocalVar.Path, workspaceId);
                Events.ExecuteOnErrorPlanDetailsApiV1WorkspacesPlanDetailsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse"/>
        /// </summary>
        public partial class PlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IPlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse(ILogger<PlanDetailsApiV1WorkspacesPlanDetailsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PlanDetailsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PlanDetailsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PlanDetailsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut(ref string inviteCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="inviteCode"></param>
        /// <returns></returns>
        private void ValidateRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut(string inviteCode)
        {
            if (inviteCode == null)
                throw new ArgumentNullException(nameof(inviteCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inviteCode"></param>
        private void AfterRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutDefaultImplementation(IRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse apiResponseLocalVar, string inviteCode)
        {
            bool suppressDefaultLog = false;
            AfterRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut(ref suppressDefaultLog, apiResponseLocalVar, inviteCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inviteCode"></param>
        partial void AfterRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut(ref bool suppressDefaultLog, IRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse apiResponseLocalVar, string inviteCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inviteCode"></param>
        private void OnErrorRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string inviteCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inviteCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inviteCode"></param>
        partial void OnErrorRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string inviteCode);

        /// <summary>
        /// Reject Invitation Reject a workspace invitation. Usable by authenticated users only.
        /// </summary>
        /// <param name="inviteCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse"/>&gt;</returns>
        public async Task<IRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse?> RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutOrDefaultAsync(string inviteCode, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutAsync(inviteCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reject Invitation Reject a workspace invitation. Usable by authenticated users only.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse"/>&gt;</returns>
        public async Task<IRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse> RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutAsync(string inviteCode, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut(inviteCode);

                FormatRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut(ref inviteCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/workspaces/invitations/{invite_code}/reject"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/workspaces/invitations/{invite_code}/reject");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Binvite_code%7D", Uri.EscapeDataString(inviteCode.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse>();

                        RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/workspaces/invitations/{invite_code}/reject", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutDefaultImplementation(apiResponseLocalVar, inviteCode);

                        Events.ExecuteOnRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutDefaultImplementation(e, "/api/v1/workspaces/invitations/{invite_code}/reject", uriBuilderLocalVar.Path, inviteCode);
                Events.ExecuteOnErrorRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse"/>
        /// </summary>
        public partial class RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse : Org.OpenAPITools.Client.ApiResponse, IRejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse(ILogger<RejectInvitationApiV1WorkspacesInvitationsInviteCodeRejectPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.WorkspaceInvitationView? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.WorkspaceInvitationView>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.WorkspaceInvitationView? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateLogoApiV1WorkspacesLogoPost(ref int workspaceId, ref System.IO.Stream file, ref Option<bool> delete);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateUpdateLogoApiV1WorkspacesLogoPost(System.IO.Stream file)
        {
            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="file"></param>
        /// <param name="delete"></param>
        private void AfterUpdateLogoApiV1WorkspacesLogoPostDefaultImplementation(IUpdateLogoApiV1WorkspacesLogoPostApiResponse apiResponseLocalVar, int workspaceId, System.IO.Stream file, Option<bool> delete)
        {
            bool suppressDefaultLog = false;
            AfterUpdateLogoApiV1WorkspacesLogoPost(ref suppressDefaultLog, apiResponseLocalVar, workspaceId, file, delete);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="file"></param>
        /// <param name="delete"></param>
        partial void AfterUpdateLogoApiV1WorkspacesLogoPost(ref bool suppressDefaultLog, IUpdateLogoApiV1WorkspacesLogoPostApiResponse apiResponseLocalVar, int workspaceId, System.IO.Stream file, Option<bool> delete);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="file"></param>
        /// <param name="delete"></param>
        private void OnErrorUpdateLogoApiV1WorkspacesLogoPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int workspaceId, System.IO.Stream file, Option<bool> delete)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateLogoApiV1WorkspacesLogoPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, workspaceId, file, delete);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="workspaceId"></param>
        /// <param name="file"></param>
        /// <param name="delete"></param>
        partial void OnErrorUpdateLogoApiV1WorkspacesLogoPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int workspaceId, System.IO.Stream file, Option<bool> delete);

        /// <summary>
        /// Update Logo Upload an image to be used as the workspace logo. Similar to a user’s avatar. If &#x60;delete&#x60; is set to true, it removes the logo completely and does not return any &#x60;logo_*&#x60; attribute.
        /// </summary>
        /// <param name="workspaceId"></param>
        /// <param name="file"></param>
        /// <param name="delete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLogoApiV1WorkspacesLogoPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateLogoApiV1WorkspacesLogoPostApiResponse?> UpdateLogoApiV1WorkspacesLogoPostOrDefaultAsync(int workspaceId, System.IO.Stream file, Option<bool> delete = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateLogoApiV1WorkspacesLogoPostAsync(workspaceId, file, delete, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Logo Upload an image to be used as the workspace logo. Similar to a user’s avatar. If &#x60;delete&#x60; is set to true, it removes the logo completely and does not return any &#x60;logo_*&#x60; attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId"></param>
        /// <param name="file"></param>
        /// <param name="delete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLogoApiV1WorkspacesLogoPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateLogoApiV1WorkspacesLogoPostApiResponse> UpdateLogoApiV1WorkspacesLogoPostAsync(int workspaceId, System.IO.Stream file, Option<bool> delete = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateLogoApiV1WorkspacesLogoPost(file);

                FormatUpdateLogoApiV1WorkspacesLogoPost(ref workspaceId, ref file, ref delete);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/workspaces/logo"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/workspaces/logo");

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("workspace_id", ClientUtils.ParameterToString(workspaceId)));

                    multipartContentLocalVar.Add(new StreamContent(file));

                    if (delete.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("delete", ClientUtils.ParameterToString(delete.Value)));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateLogoApiV1WorkspacesLogoPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateLogoApiV1WorkspacesLogoPostApiResponse>();

                        UpdateLogoApiV1WorkspacesLogoPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/workspaces/logo", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateLogoApiV1WorkspacesLogoPostDefaultImplementation(apiResponseLocalVar, workspaceId, file, delete);

                        Events.ExecuteOnUpdateLogoApiV1WorkspacesLogoPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateLogoApiV1WorkspacesLogoPostDefaultImplementation(e, "/api/v1/workspaces/logo", uriBuilderLocalVar.Path, workspaceId, file, delete);
                Events.ExecuteOnErrorUpdateLogoApiV1WorkspacesLogoPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateLogoApiV1WorkspacesLogoPostApiResponse"/>
        /// </summary>
        public partial class UpdateLogoApiV1WorkspacesLogoPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateLogoApiV1WorkspacesLogoPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateLogoApiV1WorkspacesLogoPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateLogoApiV1WorkspacesLogoPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateLogoApiV1WorkspacesLogoPostApiResponse(ILogger<UpdateLogoApiV1WorkspacesLogoPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Dictionary<string, Object>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, Object>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Dictionary<string, Object>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
