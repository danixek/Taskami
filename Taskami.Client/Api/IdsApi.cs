// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IIdsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        IdsApiEvents Events { get; }

        /// <summary>
        /// Id Mappings
        /// </summary>
        /// <remarks>
        /// Translates IDs from v1 to v2 or vice versa.  IDs are not unique across object types, hence the need to specify the object type.  When V1 ids are provided, the function will return the corresponding V2 ids, if they exist, and vice versa.  When no objects are found, an empty list is returned.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objName"></param>
        /// <param name="objIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IIdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse"/>&gt;</returns>
        Task<IIdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse> IdMappingsApiV1IdMappingsObjNameObjIdsGetAsync(string objName, string objIds, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Id Mappings
        /// </summary>
        /// <remarks>
        /// Translates IDs from v1 to v2 or vice versa.  IDs are not unique across object types, hence the need to specify the object type.  When V1 ids are provided, the function will return the corresponding V2 ids, if they exist, and vice versa.  When no objects are found, an empty list is returned.
        /// </remarks>
        /// <param name="objName"></param>
        /// <param name="objIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IIdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse"/>?&gt;</returns>
        Task<IIdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse?> IdMappingsApiV1IdMappingsObjNameObjIdsGetOrDefaultAsync(string objName, string objIds, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IIdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse"/>
    /// </summary>
    public interface IIdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<IDMapping>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class IdsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnIdMappingsApiV1IdMappingsObjNameObjIdsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorIdMappingsApiV1IdMappingsObjNameObjIdsGet;

        internal void ExecuteOnIdMappingsApiV1IdMappingsObjNameObjIdsGet(IdsApi.IdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse apiResponse)
        {
            OnIdMappingsApiV1IdMappingsObjNameObjIdsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorIdMappingsApiV1IdMappingsObjNameObjIdsGet(Exception exception)
        {
            OnErrorIdMappingsApiV1IdMappingsObjNameObjIdsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class IdsApi : IIdsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<IdsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public IdsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdsApi(ILogger<IdsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, IdsApiEvents idsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<IdsApi>();
            HttpClient = httpClient;
            Events = idsApiEvents;
        }

        partial void FormatIdMappingsApiV1IdMappingsObjNameObjIdsGet(ref string objName, ref string objIds);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="objName"></param>
        /// <param name="objIds"></param>
        /// <returns></returns>
        private void ValidateIdMappingsApiV1IdMappingsObjNameObjIdsGet(string objName, string objIds)
        {
            if (objName == null)
                throw new ArgumentNullException(nameof(objName));

            if (objIds == null)
                throw new ArgumentNullException(nameof(objIds));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="objName"></param>
        /// <param name="objIds"></param>
        private void AfterIdMappingsApiV1IdMappingsObjNameObjIdsGetDefaultImplementation(IIdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse apiResponseLocalVar, string objName, string objIds)
        {
            bool suppressDefaultLog = false;
            AfterIdMappingsApiV1IdMappingsObjNameObjIdsGet(ref suppressDefaultLog, apiResponseLocalVar, objName, objIds);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="objName"></param>
        /// <param name="objIds"></param>
        partial void AfterIdMappingsApiV1IdMappingsObjNameObjIdsGet(ref bool suppressDefaultLog, IIdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse apiResponseLocalVar, string objName, string objIds);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="objName"></param>
        /// <param name="objIds"></param>
        private void OnErrorIdMappingsApiV1IdMappingsObjNameObjIdsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string objName, string objIds)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorIdMappingsApiV1IdMappingsObjNameObjIdsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, objName, objIds);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="objName"></param>
        /// <param name="objIds"></param>
        partial void OnErrorIdMappingsApiV1IdMappingsObjNameObjIdsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string objName, string objIds);

        /// <summary>
        /// Id Mappings Translates IDs from v1 to v2 or vice versa.  IDs are not unique across object types, hence the need to specify the object type.  When V1 ids are provided, the function will return the corresponding V2 ids, if they exist, and vice versa.  When no objects are found, an empty list is returned.
        /// </summary>
        /// <param name="objName"></param>
        /// <param name="objIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IIdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse"/>&gt;</returns>
        public async Task<IIdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse?> IdMappingsApiV1IdMappingsObjNameObjIdsGetOrDefaultAsync(string objName, string objIds, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await IdMappingsApiV1IdMappingsObjNameObjIdsGetAsync(objName, objIds, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Id Mappings Translates IDs from v1 to v2 or vice versa.  IDs are not unique across object types, hence the need to specify the object type.  When V1 ids are provided, the function will return the corresponding V2 ids, if they exist, and vice versa.  When no objects are found, an empty list is returned.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objName"></param>
        /// <param name="objIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IIdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse"/>&gt;</returns>
        public async Task<IIdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse> IdMappingsApiV1IdMappingsObjNameObjIdsGetAsync(string objName, string objIds, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateIdMappingsApiV1IdMappingsObjNameObjIdsGet(objName, objIds);

                FormatIdMappingsApiV1IdMappingsObjNameObjIdsGet(ref objName, ref objIds);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/id_mappings/{obj_name}/{obj_ids}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/id_mappings/{obj_name}/{obj_ids}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bobj_name%7D", Uri.EscapeDataString(objName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bobj_ids%7D", Uri.EscapeDataString(objIds.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<IdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<IdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse>();

                        IdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/id_mappings/{obj_name}/{obj_ids}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterIdMappingsApiV1IdMappingsObjNameObjIdsGetDefaultImplementation(apiResponseLocalVar, objName, objIds);

                        Events.ExecuteOnIdMappingsApiV1IdMappingsObjNameObjIdsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorIdMappingsApiV1IdMappingsObjNameObjIdsGetDefaultImplementation(e, "/api/v1/id_mappings/{obj_name}/{obj_ids}", uriBuilderLocalVar.Path, objName, objIds);
                Events.ExecuteOnErrorIdMappingsApiV1IdMappingsObjNameObjIdsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse"/>
        /// </summary>
        public partial class IdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IIdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<IdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="IdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public IdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse(ILogger<IdMappingsApiV1IdMappingsObjNameObjIdsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<IDMapping>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<IDMapping>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<IDMapping>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
