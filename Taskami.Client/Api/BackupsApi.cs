// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IBackupsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        BackupsApiEvents Events { get; }

        /// <summary>
        /// Download Backup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadBackupApiV1BackupsDownloadGetApiResponse"/>&gt;</returns>
        Task<IDownloadBackupApiV1BackupsDownloadGetApiResponse> DownloadBackupApiV1BackupsDownloadGetAsync(string file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download Backup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadBackupApiV1BackupsDownloadGetApiResponse"/>?&gt;</returns>
        Task<IDownloadBackupApiV1BackupsDownloadGetApiResponse?> DownloadBackupApiV1BackupsDownloadGetOrDefaultAsync(string file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Backups
        /// </summary>
        /// <remarks>
        /// Todoist creates a backup archive of users&#39; data on a daily basis. Backup archives can also be accessed from the web app (Todoist Settings -&gt; Backups).  When using the default token, with the &#x60;data:read_write&#x60; scope, and having MFA enabled, the MFA token is required and must be provided with the request. To be able to use this endpoint without an MFA token, your token must have the &#x60;backups:read&#x60; scope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mfaToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBackupsApiV1BackupsGetApiResponse"/>&gt;</returns>
        Task<IGetBackupsApiV1BackupsGetApiResponse> GetBackupsApiV1BackupsGetAsync(Option<string?> mfaToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Backups
        /// </summary>
        /// <remarks>
        /// Todoist creates a backup archive of users&#39; data on a daily basis. Backup archives can also be accessed from the web app (Todoist Settings -&gt; Backups).  When using the default token, with the &#x60;data:read_write&#x60; scope, and having MFA enabled, the MFA token is required and must be provided with the request. To be able to use this endpoint without an MFA token, your token must have the &#x60;backups:read&#x60; scope.
        /// </remarks>
        /// <param name="mfaToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBackupsApiV1BackupsGetApiResponse"/>?&gt;</returns>
        Task<IGetBackupsApiV1BackupsGetApiResponse?> GetBackupsApiV1BackupsGetOrDefaultAsync(Option<string?> mfaToken = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDownloadBackupApiV1BackupsDownloadGetApiResponse"/>
    /// </summary>
    public interface IDownloadBackupApiV1BackupsDownloadGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetBackupsApiV1BackupsGetApiResponse"/>
    /// </summary>
    public interface IGetBackupsApiV1BackupsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<BackupResponse>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class BackupsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDownloadBackupApiV1BackupsDownloadGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDownloadBackupApiV1BackupsDownloadGet;

        internal void ExecuteOnDownloadBackupApiV1BackupsDownloadGet(BackupsApi.DownloadBackupApiV1BackupsDownloadGetApiResponse apiResponse)
        {
            OnDownloadBackupApiV1BackupsDownloadGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDownloadBackupApiV1BackupsDownloadGet(Exception exception)
        {
            OnErrorDownloadBackupApiV1BackupsDownloadGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBackupsApiV1BackupsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBackupsApiV1BackupsGet;

        internal void ExecuteOnGetBackupsApiV1BackupsGet(BackupsApi.GetBackupsApiV1BackupsGetApiResponse apiResponse)
        {
            OnGetBackupsApiV1BackupsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBackupsApiV1BackupsGet(Exception exception)
        {
            OnErrorGetBackupsApiV1BackupsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class BackupsApi : IBackupsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<BackupsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public BackupsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BackupsApi(ILogger<BackupsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, BackupsApiEvents backupsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<BackupsApi>();
            HttpClient = httpClient;
            Events = backupsApiEvents;
        }

        partial void FormatDownloadBackupApiV1BackupsDownloadGet(ref string file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateDownloadBackupApiV1BackupsDownloadGet(string file)
        {
            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        private void AfterDownloadBackupApiV1BackupsDownloadGetDefaultImplementation(IDownloadBackupApiV1BackupsDownloadGetApiResponse apiResponseLocalVar, string file)
        {
            bool suppressDefaultLog = false;
            AfterDownloadBackupApiV1BackupsDownloadGet(ref suppressDefaultLog, apiResponseLocalVar, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        partial void AfterDownloadBackupApiV1BackupsDownloadGet(ref bool suppressDefaultLog, IDownloadBackupApiV1BackupsDownloadGetApiResponse apiResponseLocalVar, string file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="file"></param>
        private void OnErrorDownloadBackupApiV1BackupsDownloadGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDownloadBackupApiV1BackupsDownloadGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="file"></param>
        partial void OnErrorDownloadBackupApiV1BackupsDownloadGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string file);

        /// <summary>
        /// Download Backup 
        /// </summary>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadBackupApiV1BackupsDownloadGetApiResponse"/>&gt;</returns>
        public async Task<IDownloadBackupApiV1BackupsDownloadGetApiResponse?> DownloadBackupApiV1BackupsDownloadGetOrDefaultAsync(string file, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DownloadBackupApiV1BackupsDownloadGetAsync(file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Download Backup 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadBackupApiV1BackupsDownloadGetApiResponse"/>&gt;</returns>
        public async Task<IDownloadBackupApiV1BackupsDownloadGetApiResponse> DownloadBackupApiV1BackupsDownloadGetAsync(string file, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDownloadBackupApiV1BackupsDownloadGet(file);

                FormatDownloadBackupApiV1BackupsDownloadGet(ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/backups/download"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/backups/download");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["file"] = ClientUtils.ParameterToString(file);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DownloadBackupApiV1BackupsDownloadGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DownloadBackupApiV1BackupsDownloadGetApiResponse>();

                        DownloadBackupApiV1BackupsDownloadGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/backups/download", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDownloadBackupApiV1BackupsDownloadGetDefaultImplementation(apiResponseLocalVar, file);

                        Events.ExecuteOnDownloadBackupApiV1BackupsDownloadGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDownloadBackupApiV1BackupsDownloadGetDefaultImplementation(e, "/api/v1/backups/download", uriBuilderLocalVar.Path, file);
                Events.ExecuteOnErrorDownloadBackupApiV1BackupsDownloadGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DownloadBackupApiV1BackupsDownloadGetApiResponse"/>
        /// </summary>
        public partial class DownloadBackupApiV1BackupsDownloadGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IDownloadBackupApiV1BackupsDownloadGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DownloadBackupApiV1BackupsDownloadGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DownloadBackupApiV1BackupsDownloadGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DownloadBackupApiV1BackupsDownloadGetApiResponse(ILogger<DownloadBackupApiV1BackupsDownloadGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetBackupsApiV1BackupsGet(ref Option<string?> mfaToken);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mfaToken"></param>
        private void AfterGetBackupsApiV1BackupsGetDefaultImplementation(IGetBackupsApiV1BackupsGetApiResponse apiResponseLocalVar, Option<string?> mfaToken)
        {
            bool suppressDefaultLog = false;
            AfterGetBackupsApiV1BackupsGet(ref suppressDefaultLog, apiResponseLocalVar, mfaToken);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mfaToken"></param>
        partial void AfterGetBackupsApiV1BackupsGet(ref bool suppressDefaultLog, IGetBackupsApiV1BackupsGetApiResponse apiResponseLocalVar, Option<string?> mfaToken);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="mfaToken"></param>
        private void OnErrorGetBackupsApiV1BackupsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> mfaToken)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetBackupsApiV1BackupsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, mfaToken);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="mfaToken"></param>
        partial void OnErrorGetBackupsApiV1BackupsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> mfaToken);

        /// <summary>
        /// Get Backups Todoist creates a backup archive of users&#39; data on a daily basis. Backup archives can also be accessed from the web app (Todoist Settings -&gt; Backups).  When using the default token, with the &#x60;data:read_write&#x60; scope, and having MFA enabled, the MFA token is required and must be provided with the request. To be able to use this endpoint without an MFA token, your token must have the &#x60;backups:read&#x60; scope.
        /// </summary>
        /// <param name="mfaToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBackupsApiV1BackupsGetApiResponse"/>&gt;</returns>
        public async Task<IGetBackupsApiV1BackupsGetApiResponse?> GetBackupsApiV1BackupsGetOrDefaultAsync(Option<string?> mfaToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBackupsApiV1BackupsGetAsync(mfaToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Backups Todoist creates a backup archive of users&#39; data on a daily basis. Backup archives can also be accessed from the web app (Todoist Settings -&gt; Backups).  When using the default token, with the &#x60;data:read_write&#x60; scope, and having MFA enabled, the MFA token is required and must be provided with the request. To be able to use this endpoint without an MFA token, your token must have the &#x60;backups:read&#x60; scope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mfaToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBackupsApiV1BackupsGetApiResponse"/>&gt;</returns>
        public async Task<IGetBackupsApiV1BackupsGetApiResponse> GetBackupsApiV1BackupsGetAsync(Option<string?> mfaToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetBackupsApiV1BackupsGet(ref mfaToken);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/backups"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/backups");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (mfaToken.IsSet)
                        parseQueryStringLocalVar["mfa_token"] = ClientUtils.ParameterToString(mfaToken.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetBackupsApiV1BackupsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBackupsApiV1BackupsGetApiResponse>();

                        GetBackupsApiV1BackupsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/backups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetBackupsApiV1BackupsGetDefaultImplementation(apiResponseLocalVar, mfaToken);

                        Events.ExecuteOnGetBackupsApiV1BackupsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBackupsApiV1BackupsGetDefaultImplementation(e, "/api/v1/backups", uriBuilderLocalVar.Path, mfaToken);
                Events.ExecuteOnErrorGetBackupsApiV1BackupsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBackupsApiV1BackupsGetApiResponse"/>
        /// </summary>
        public partial class GetBackupsApiV1BackupsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetBackupsApiV1BackupsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBackupsApiV1BackupsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBackupsApiV1BackupsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBackupsApiV1BackupsGetApiResponse(ILogger<GetBackupsApiV1BackupsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<BackupResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<BackupResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<BackupResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
