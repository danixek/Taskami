// <auto-generated>
/*
 * Todoist API
 *
 * # Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app/settings/integrations/app-management).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISectionsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SectionsApiEvents Events { get; }

        /// <summary>
        /// Create Section
        /// </summary>
        /// <remarks>
        /// Create a new section
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiRestSectionsBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSectionApiV1SectionsPostApiResponse"/>&gt;</returns>
        Task<ICreateSectionApiV1SectionsPostApiResponse> CreateSectionApiV1SectionsPostAsync(TodoistAppsApiRestSectionsBody1 todoistAppsApiRestSectionsBody1, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Section
        /// </summary>
        /// <remarks>
        /// Create a new section
        /// </remarks>
        /// <param name="todoistAppsApiRestSectionsBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSectionApiV1SectionsPostApiResponse"/>?&gt;</returns>
        Task<ICreateSectionApiV1SectionsPostApiResponse?> CreateSectionApiV1SectionsPostOrDefaultAsync(TodoistAppsApiRestSectionsBody1 todoistAppsApiRestSectionsBody1, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Section
        /// </summary>
        /// <remarks>
        /// Delete the section and all of its tasks
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSectionApiV1SectionsSectionIdDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteSectionApiV1SectionsSectionIdDeleteApiResponse> DeleteSectionApiV1SectionsSectionIdDeleteAsync(SectionId3 sectionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Section
        /// </summary>
        /// <remarks>
        /// Delete the section and all of its tasks
        /// </remarks>
        /// <param name="sectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSectionApiV1SectionsSectionIdDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteSectionApiV1SectionsSectionIdDeleteApiResponse?> DeleteSectionApiV1SectionsSectionIdDeleteOrDefaultAsync(SectionId3 sectionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Section
        /// </summary>
        /// <remarks>
        /// Return the section for the given section ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="publicKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionApiV1SectionsSectionIdGetApiResponse"/>&gt;</returns>
        Task<IGetSectionApiV1SectionsSectionIdGetApiResponse> GetSectionApiV1SectionsSectionIdGetAsync(SectionId2 sectionId, Option<string?> publicKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Section
        /// </summary>
        /// <remarks>
        /// Return the section for the given section ID
        /// </remarks>
        /// <param name="sectionId"></param>
        /// <param name="publicKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionApiV1SectionsSectionIdGetApiResponse"/>?&gt;</returns>
        Task<IGetSectionApiV1SectionsSectionIdGetApiResponse?> GetSectionApiV1SectionsSectionIdGetOrDefaultAsync(SectionId2 sectionId, Option<string?> publicKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Sections
        /// </summary>
        /// <remarks>
        /// Return a list of all active sections for the user
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsApiV1SectionsGetApiResponse"/>&gt;</returns>
        Task<IGetSectionsApiV1SectionsGetApiResponse> GetSectionsApiV1SectionsGetAsync(Option<ProjectId?> projectId = default, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Sections
        /// </summary>
        /// <remarks>
        /// Return a list of all active sections for the user
        /// </remarks>
        /// <param name="projectId"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsApiV1SectionsGetApiResponse"/>?&gt;</returns>
        Task<IGetSectionsApiV1SectionsGetApiResponse?> GetSectionsApiV1SectionsGetOrDefaultAsync(Option<ProjectId?> projectId = default, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="todoistAppsApiRestSectionsBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSectionApiV1SectionsSectionIdPostApiResponse"/>&gt;</returns>
        Task<IUpdateSectionApiV1SectionsSectionIdPostApiResponse> UpdateSectionApiV1SectionsSectionIdPostAsync(SectionId3 sectionId, TodoistAppsApiRestSectionsBody2 todoistAppsApiRestSectionsBody2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="sectionId"></param>
        /// <param name="todoistAppsApiRestSectionsBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSectionApiV1SectionsSectionIdPostApiResponse"/>?&gt;</returns>
        Task<IUpdateSectionApiV1SectionsSectionIdPostApiResponse?> UpdateSectionApiV1SectionsSectionIdPostOrDefaultAsync(SectionId3 sectionId, TodoistAppsApiRestSectionsBody2 todoistAppsApiRestSectionsBody2, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateSectionApiV1SectionsPostApiResponse"/>
    /// </summary>
    public interface ICreateSectionApiV1SectionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.SectionSyncView?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteSectionApiV1SectionsSectionIdDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteSectionApiV1SectionsSectionIdDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetSectionApiV1SectionsSectionIdGetApiResponse"/>
    /// </summary>
    public interface IGetSectionApiV1SectionsSectionIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.SectionSyncView?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetSectionsApiV1SectionsGetApiResponse"/>
    /// </summary>
    public interface IGetSectionsApiV1SectionsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PaginatedListSectionSyncView?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateSectionApiV1SectionsSectionIdPostApiResponse"/>
    /// </summary>
    public interface IUpdateSectionApiV1SectionsSectionIdPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.SectionSyncView?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SectionsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateSectionApiV1SectionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateSectionApiV1SectionsPost;

        internal void ExecuteOnCreateSectionApiV1SectionsPost(SectionsApi.CreateSectionApiV1SectionsPostApiResponse apiResponse)
        {
            OnCreateSectionApiV1SectionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateSectionApiV1SectionsPost(Exception exception)
        {
            OnErrorCreateSectionApiV1SectionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteSectionApiV1SectionsSectionIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteSectionApiV1SectionsSectionIdDelete;

        internal void ExecuteOnDeleteSectionApiV1SectionsSectionIdDelete(SectionsApi.DeleteSectionApiV1SectionsSectionIdDeleteApiResponse apiResponse)
        {
            OnDeleteSectionApiV1SectionsSectionIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSectionApiV1SectionsSectionIdDelete(Exception exception)
        {
            OnErrorDeleteSectionApiV1SectionsSectionIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSectionApiV1SectionsSectionIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSectionApiV1SectionsSectionIdGet;

        internal void ExecuteOnGetSectionApiV1SectionsSectionIdGet(SectionsApi.GetSectionApiV1SectionsSectionIdGetApiResponse apiResponse)
        {
            OnGetSectionApiV1SectionsSectionIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSectionApiV1SectionsSectionIdGet(Exception exception)
        {
            OnErrorGetSectionApiV1SectionsSectionIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSectionsApiV1SectionsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSectionsApiV1SectionsGet;

        internal void ExecuteOnGetSectionsApiV1SectionsGet(SectionsApi.GetSectionsApiV1SectionsGetApiResponse apiResponse)
        {
            OnGetSectionsApiV1SectionsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSectionsApiV1SectionsGet(Exception exception)
        {
            OnErrorGetSectionsApiV1SectionsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateSectionApiV1SectionsSectionIdPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateSectionApiV1SectionsSectionIdPost;

        internal void ExecuteOnUpdateSectionApiV1SectionsSectionIdPost(SectionsApi.UpdateSectionApiV1SectionsSectionIdPostApiResponse apiResponse)
        {
            OnUpdateSectionApiV1SectionsSectionIdPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateSectionApiV1SectionsSectionIdPost(Exception exception)
        {
            OnErrorUpdateSectionApiV1SectionsSectionIdPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SectionsApi : ISectionsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SectionsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SectionsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SectionsApi(ILogger<SectionsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SectionsApiEvents sectionsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SectionsApi>();
            HttpClient = httpClient;
            Events = sectionsApiEvents;
        }

        partial void FormatCreateSectionApiV1SectionsPost(TodoistAppsApiRestSectionsBody1 todoistAppsApiRestSectionsBody1);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="todoistAppsApiRestSectionsBody1"></param>
        /// <returns></returns>
        private void ValidateCreateSectionApiV1SectionsPost(TodoistAppsApiRestSectionsBody1 todoistAppsApiRestSectionsBody1)
        {
            if (todoistAppsApiRestSectionsBody1 == null)
                throw new ArgumentNullException(nameof(todoistAppsApiRestSectionsBody1));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiRestSectionsBody1"></param>
        private void AfterCreateSectionApiV1SectionsPostDefaultImplementation(ICreateSectionApiV1SectionsPostApiResponse apiResponseLocalVar, TodoistAppsApiRestSectionsBody1 todoistAppsApiRestSectionsBody1)
        {
            bool suppressDefaultLog = false;
            AfterCreateSectionApiV1SectionsPost(ref suppressDefaultLog, apiResponseLocalVar, todoistAppsApiRestSectionsBody1);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="todoistAppsApiRestSectionsBody1"></param>
        partial void AfterCreateSectionApiV1SectionsPost(ref bool suppressDefaultLog, ICreateSectionApiV1SectionsPostApiResponse apiResponseLocalVar, TodoistAppsApiRestSectionsBody1 todoistAppsApiRestSectionsBody1);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiRestSectionsBody1"></param>
        private void OnErrorCreateSectionApiV1SectionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiRestSectionsBody1 todoistAppsApiRestSectionsBody1)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateSectionApiV1SectionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, todoistAppsApiRestSectionsBody1);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="todoistAppsApiRestSectionsBody1"></param>
        partial void OnErrorCreateSectionApiV1SectionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TodoistAppsApiRestSectionsBody1 todoistAppsApiRestSectionsBody1);

        /// <summary>
        /// Create Section Create a new section
        /// </summary>
        /// <param name="todoistAppsApiRestSectionsBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSectionApiV1SectionsPostApiResponse"/>&gt;</returns>
        public async Task<ICreateSectionApiV1SectionsPostApiResponse?> CreateSectionApiV1SectionsPostOrDefaultAsync(TodoistAppsApiRestSectionsBody1 todoistAppsApiRestSectionsBody1, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateSectionApiV1SectionsPostAsync(todoistAppsApiRestSectionsBody1, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Section Create a new section
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="todoistAppsApiRestSectionsBody1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSectionApiV1SectionsPostApiResponse"/>&gt;</returns>
        public async Task<ICreateSectionApiV1SectionsPostApiResponse> CreateSectionApiV1SectionsPostAsync(TodoistAppsApiRestSectionsBody1 todoistAppsApiRestSectionsBody1, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateSectionApiV1SectionsPost(todoistAppsApiRestSectionsBody1);

                FormatCreateSectionApiV1SectionsPost(todoistAppsApiRestSectionsBody1);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/sections"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/sections");

                    httpRequestMessageLocalVar.Content = (todoistAppsApiRestSectionsBody1 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(todoistAppsApiRestSectionsBody1, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateSectionApiV1SectionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateSectionApiV1SectionsPostApiResponse>();

                        CreateSectionApiV1SectionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/sections", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateSectionApiV1SectionsPostDefaultImplementation(apiResponseLocalVar, todoistAppsApiRestSectionsBody1);

                        Events.ExecuteOnCreateSectionApiV1SectionsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateSectionApiV1SectionsPostDefaultImplementation(e, "/api/v1/sections", uriBuilderLocalVar.Path, todoistAppsApiRestSectionsBody1);
                Events.ExecuteOnErrorCreateSectionApiV1SectionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateSectionApiV1SectionsPostApiResponse"/>
        /// </summary>
        public partial class CreateSectionApiV1SectionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateSectionApiV1SectionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateSectionApiV1SectionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateSectionApiV1SectionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateSectionApiV1SectionsPostApiResponse(ILogger<CreateSectionApiV1SectionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SectionSyncView? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SectionSyncView>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.SectionSyncView? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteSectionApiV1SectionsSectionIdDelete(SectionId3 sectionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sectionId"></param>
        /// <returns></returns>
        private void ValidateDeleteSectionApiV1SectionsSectionIdDelete(SectionId3 sectionId)
        {
            if (sectionId == null)
                throw new ArgumentNullException(nameof(sectionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sectionId"></param>
        private void AfterDeleteSectionApiV1SectionsSectionIdDeleteDefaultImplementation(IDeleteSectionApiV1SectionsSectionIdDeleteApiResponse apiResponseLocalVar, SectionId3 sectionId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSectionApiV1SectionsSectionIdDelete(ref suppressDefaultLog, apiResponseLocalVar, sectionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sectionId"></param>
        partial void AfterDeleteSectionApiV1SectionsSectionIdDelete(ref bool suppressDefaultLog, IDeleteSectionApiV1SectionsSectionIdDeleteApiResponse apiResponseLocalVar, SectionId3 sectionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sectionId"></param>
        private void OnErrorDeleteSectionApiV1SectionsSectionIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SectionId3 sectionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSectionApiV1SectionsSectionIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sectionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sectionId"></param>
        partial void OnErrorDeleteSectionApiV1SectionsSectionIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SectionId3 sectionId);

        /// <summary>
        /// Delete Section Delete the section and all of its tasks
        /// </summary>
        /// <param name="sectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSectionApiV1SectionsSectionIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteSectionApiV1SectionsSectionIdDeleteApiResponse?> DeleteSectionApiV1SectionsSectionIdDeleteOrDefaultAsync(SectionId3 sectionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSectionApiV1SectionsSectionIdDeleteAsync(sectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Section Delete the section and all of its tasks
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSectionApiV1SectionsSectionIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteSectionApiV1SectionsSectionIdDeleteApiResponse> DeleteSectionApiV1SectionsSectionIdDeleteAsync(SectionId3 sectionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteSectionApiV1SectionsSectionIdDelete(sectionId);

                FormatDeleteSectionApiV1SectionsSectionIdDelete(sectionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/sections/{section_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/sections/{section_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsection_id%7D", Uri.EscapeDataString(sectionId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteSectionApiV1SectionsSectionIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSectionApiV1SectionsSectionIdDeleteApiResponse>();

                        DeleteSectionApiV1SectionsSectionIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/sections/{section_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSectionApiV1SectionsSectionIdDeleteDefaultImplementation(apiResponseLocalVar, sectionId);

                        Events.ExecuteOnDeleteSectionApiV1SectionsSectionIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSectionApiV1SectionsSectionIdDeleteDefaultImplementation(e, "/api/v1/sections/{section_id}", uriBuilderLocalVar.Path, sectionId);
                Events.ExecuteOnErrorDeleteSectionApiV1SectionsSectionIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSectionApiV1SectionsSectionIdDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteSectionApiV1SectionsSectionIdDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteSectionApiV1SectionsSectionIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSectionApiV1SectionsSectionIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSectionApiV1SectionsSectionIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSectionApiV1SectionsSectionIdDeleteApiResponse(ILogger<DeleteSectionApiV1SectionsSectionIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSectionApiV1SectionsSectionIdGet(SectionId2 sectionId, ref Option<string?> publicKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sectionId"></param>
        /// <returns></returns>
        private void ValidateGetSectionApiV1SectionsSectionIdGet(SectionId2 sectionId)
        {
            if (sectionId == null)
                throw new ArgumentNullException(nameof(sectionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sectionId"></param>
        /// <param name="publicKey"></param>
        private void AfterGetSectionApiV1SectionsSectionIdGetDefaultImplementation(IGetSectionApiV1SectionsSectionIdGetApiResponse apiResponseLocalVar, SectionId2 sectionId, Option<string?> publicKey)
        {
            bool suppressDefaultLog = false;
            AfterGetSectionApiV1SectionsSectionIdGet(ref suppressDefaultLog, apiResponseLocalVar, sectionId, publicKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sectionId"></param>
        /// <param name="publicKey"></param>
        partial void AfterGetSectionApiV1SectionsSectionIdGet(ref bool suppressDefaultLog, IGetSectionApiV1SectionsSectionIdGetApiResponse apiResponseLocalVar, SectionId2 sectionId, Option<string?> publicKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sectionId"></param>
        /// <param name="publicKey"></param>
        private void OnErrorGetSectionApiV1SectionsSectionIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SectionId2 sectionId, Option<string?> publicKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSectionApiV1SectionsSectionIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sectionId, publicKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sectionId"></param>
        /// <param name="publicKey"></param>
        partial void OnErrorGetSectionApiV1SectionsSectionIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SectionId2 sectionId, Option<string?> publicKey);

        /// <summary>
        /// Get Section Return the section for the given section ID
        /// </summary>
        /// <param name="sectionId"></param>
        /// <param name="publicKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionApiV1SectionsSectionIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetSectionApiV1SectionsSectionIdGetApiResponse?> GetSectionApiV1SectionsSectionIdGetOrDefaultAsync(SectionId2 sectionId, Option<string?> publicKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSectionApiV1SectionsSectionIdGetAsync(sectionId, publicKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Section Return the section for the given section ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="publicKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionApiV1SectionsSectionIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetSectionApiV1SectionsSectionIdGetApiResponse> GetSectionApiV1SectionsSectionIdGetAsync(SectionId2 sectionId, Option<string?> publicKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSectionApiV1SectionsSectionIdGet(sectionId);

                FormatGetSectionApiV1SectionsSectionIdGet(sectionId, ref publicKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/sections/{section_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/sections/{section_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsection_id%7D", Uri.EscapeDataString(sectionId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (publicKey.IsSet)
                        parseQueryStringLocalVar["public_key"] = ClientUtils.ParameterToString(publicKey.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSectionApiV1SectionsSectionIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSectionApiV1SectionsSectionIdGetApiResponse>();

                        GetSectionApiV1SectionsSectionIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/sections/{section_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSectionApiV1SectionsSectionIdGetDefaultImplementation(apiResponseLocalVar, sectionId, publicKey);

                        Events.ExecuteOnGetSectionApiV1SectionsSectionIdGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSectionApiV1SectionsSectionIdGetDefaultImplementation(e, "/api/v1/sections/{section_id}", uriBuilderLocalVar.Path, sectionId, publicKey);
                Events.ExecuteOnErrorGetSectionApiV1SectionsSectionIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSectionApiV1SectionsSectionIdGetApiResponse"/>
        /// </summary>
        public partial class GetSectionApiV1SectionsSectionIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSectionApiV1SectionsSectionIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSectionApiV1SectionsSectionIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSectionApiV1SectionsSectionIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSectionApiV1SectionsSectionIdGetApiResponse(ILogger<GetSectionApiV1SectionsSectionIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SectionSyncView? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SectionSyncView>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.SectionSyncView? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSectionsApiV1SectionsGet(Option<ProjectId?> projectId, ref Option<string?> cursor, ref Option<int> limit);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void AfterGetSectionsApiV1SectionsGetDefaultImplementation(IGetSectionsApiV1SectionsGetApiResponse apiResponseLocalVar, Option<ProjectId?> projectId, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterGetSectionsApiV1SectionsGet(ref suppressDefaultLog, apiResponseLocalVar, projectId, cursor, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void AfterGetSectionsApiV1SectionsGet(ref bool suppressDefaultLog, IGetSectionsApiV1SectionsGetApiResponse apiResponseLocalVar, Option<ProjectId?> projectId, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        private void OnErrorGetSectionsApiV1SectionsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<ProjectId?> projectId, Option<string?> cursor, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSectionsApiV1SectionsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectId, cursor, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectId"></param>
        /// <param name="cursor"></param>
        /// <param name="limit"></param>
        partial void OnErrorGetSectionsApiV1SectionsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<ProjectId?> projectId, Option<string?> cursor, Option<int> limit);

        /// <summary>
        /// Get Sections Return a list of all active sections for the user
        /// </summary>
        /// <param name="projectId"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsApiV1SectionsGetApiResponse"/>&gt;</returns>
        public async Task<IGetSectionsApiV1SectionsGetApiResponse?> GetSectionsApiV1SectionsGetOrDefaultAsync(Option<ProjectId?> projectId = default, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSectionsApiV1SectionsGetAsync(projectId, cursor, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Sections Return a list of all active sections for the user
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsApiV1SectionsGetApiResponse"/>&gt;</returns>
        public async Task<IGetSectionsApiV1SectionsGetApiResponse> GetSectionsApiV1SectionsGetAsync(Option<ProjectId?> projectId = default, Option<string?> cursor = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetSectionsApiV1SectionsGet(projectId, ref cursor, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/sections"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/sections");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (projectId.IsSet)
                        parseQueryStringLocalVar["project_id"] = ClientUtils.ParameterToString(projectId.Value);

                    if (cursor.IsSet)
                        parseQueryStringLocalVar["cursor"] = ClientUtils.ParameterToString(cursor.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSectionsApiV1SectionsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSectionsApiV1SectionsGetApiResponse>();

                        GetSectionsApiV1SectionsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/sections", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSectionsApiV1SectionsGetDefaultImplementation(apiResponseLocalVar, projectId, cursor, limit);

                        Events.ExecuteOnGetSectionsApiV1SectionsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSectionsApiV1SectionsGetDefaultImplementation(e, "/api/v1/sections", uriBuilderLocalVar.Path, projectId, cursor, limit);
                Events.ExecuteOnErrorGetSectionsApiV1SectionsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSectionsApiV1SectionsGetApiResponse"/>
        /// </summary>
        public partial class GetSectionsApiV1SectionsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSectionsApiV1SectionsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSectionsApiV1SectionsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSectionsApiV1SectionsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSectionsApiV1SectionsGetApiResponse(ILogger<GetSectionsApiV1SectionsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PaginatedListSectionSyncView? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PaginatedListSectionSyncView>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PaginatedListSectionSyncView? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateSectionApiV1SectionsSectionIdPost(SectionId3 sectionId, TodoistAppsApiRestSectionsBody2 todoistAppsApiRestSectionsBody2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sectionId"></param>
        /// <param name="todoistAppsApiRestSectionsBody2"></param>
        /// <returns></returns>
        private void ValidateUpdateSectionApiV1SectionsSectionIdPost(SectionId3 sectionId, TodoistAppsApiRestSectionsBody2 todoistAppsApiRestSectionsBody2)
        {
            if (sectionId == null)
                throw new ArgumentNullException(nameof(sectionId));

            if (todoistAppsApiRestSectionsBody2 == null)
                throw new ArgumentNullException(nameof(todoistAppsApiRestSectionsBody2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sectionId"></param>
        /// <param name="todoistAppsApiRestSectionsBody2"></param>
        private void AfterUpdateSectionApiV1SectionsSectionIdPostDefaultImplementation(IUpdateSectionApiV1SectionsSectionIdPostApiResponse apiResponseLocalVar, SectionId3 sectionId, TodoistAppsApiRestSectionsBody2 todoistAppsApiRestSectionsBody2)
        {
            bool suppressDefaultLog = false;
            AfterUpdateSectionApiV1SectionsSectionIdPost(ref suppressDefaultLog, apiResponseLocalVar, sectionId, todoistAppsApiRestSectionsBody2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sectionId"></param>
        /// <param name="todoistAppsApiRestSectionsBody2"></param>
        partial void AfterUpdateSectionApiV1SectionsSectionIdPost(ref bool suppressDefaultLog, IUpdateSectionApiV1SectionsSectionIdPostApiResponse apiResponseLocalVar, SectionId3 sectionId, TodoistAppsApiRestSectionsBody2 todoistAppsApiRestSectionsBody2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sectionId"></param>
        /// <param name="todoistAppsApiRestSectionsBody2"></param>
        private void OnErrorUpdateSectionApiV1SectionsSectionIdPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SectionId3 sectionId, TodoistAppsApiRestSectionsBody2 todoistAppsApiRestSectionsBody2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateSectionApiV1SectionsSectionIdPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sectionId, todoistAppsApiRestSectionsBody2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sectionId"></param>
        /// <param name="todoistAppsApiRestSectionsBody2"></param>
        partial void OnErrorUpdateSectionApiV1SectionsSectionIdPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SectionId3 sectionId, TodoistAppsApiRestSectionsBody2 todoistAppsApiRestSectionsBody2);

        /// <summary>
        /// Update Section 
        /// </summary>
        /// <param name="sectionId"></param>
        /// <param name="todoistAppsApiRestSectionsBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSectionApiV1SectionsSectionIdPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateSectionApiV1SectionsSectionIdPostApiResponse?> UpdateSectionApiV1SectionsSectionIdPostOrDefaultAsync(SectionId3 sectionId, TodoistAppsApiRestSectionsBody2 todoistAppsApiRestSectionsBody2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateSectionApiV1SectionsSectionIdPostAsync(sectionId, todoistAppsApiRestSectionsBody2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Section 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="todoistAppsApiRestSectionsBody2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSectionApiV1SectionsSectionIdPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateSectionApiV1SectionsSectionIdPostApiResponse> UpdateSectionApiV1SectionsSectionIdPostAsync(SectionId3 sectionId, TodoistAppsApiRestSectionsBody2 todoistAppsApiRestSectionsBody2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateSectionApiV1SectionsSectionIdPost(sectionId, todoistAppsApiRestSectionsBody2);

                FormatUpdateSectionApiV1SectionsSectionIdPost(sectionId, todoistAppsApiRestSectionsBody2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/sections/{section_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/sections/{section_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsection_id%7D", Uri.EscapeDataString(sectionId.ToString()));

                    httpRequestMessageLocalVar.Content = (todoistAppsApiRestSectionsBody2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(todoistAppsApiRestSectionsBody2, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateSectionApiV1SectionsSectionIdPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateSectionApiV1SectionsSectionIdPostApiResponse>();

                        UpdateSectionApiV1SectionsSectionIdPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/sections/{section_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateSectionApiV1SectionsSectionIdPostDefaultImplementation(apiResponseLocalVar, sectionId, todoistAppsApiRestSectionsBody2);

                        Events.ExecuteOnUpdateSectionApiV1SectionsSectionIdPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateSectionApiV1SectionsSectionIdPostDefaultImplementation(e, "/api/v1/sections/{section_id}", uriBuilderLocalVar.Path, sectionId, todoistAppsApiRestSectionsBody2);
                Events.ExecuteOnErrorUpdateSectionApiV1SectionsSectionIdPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateSectionApiV1SectionsSectionIdPostApiResponse"/>
        /// </summary>
        public partial class UpdateSectionApiV1SectionsSectionIdPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateSectionApiV1SectionsSectionIdPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateSectionApiV1SectionsSectionIdPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateSectionApiV1SectionsSectionIdPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateSectionApiV1SectionsSectionIdPostApiResponse(ILogger<UpdateSectionApiV1SectionsSectionIdPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SectionSyncView? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SectionSyncView>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.SectionSyncView? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
